from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse, path
from django.http import HttpResponseRedirect
from django.contrib import messages
from .models import Employee, Contract, WorkLog
from .utils import generate_contract_pdf, generate_timesheet_pdf
import logging
import traceback

logger = logging.getLogger('hr')


class ContractInline(admin.TabularInline):
    model = Contract
    extra = 0
    fields = ('position', 'contract_type', 'start_date', 'salary_netto', 'salary_brutto')
    readonly_fields = ('generated_at',)


@admin.register(Employee)
class EmployeeAdmin(admin.ModelAdmin):
    list_display = (
        'full_name',
        'email',
        'phone',
        'contracts_count',
        'created_at'
    )
    
    search_fields = ('full_name', 'email', 'phone')
    list_filter = ('created_at',)
    
    inlines = [ContractInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('full_name', 'email', 'phone')
        }),
        ('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ)', {
            'fields': ('pesel', 'birth_date', 'address'),
            'classes': ('collapse',)
        }),
    )
    
    def contracts_count(self, obj):
        count = obj.contracts.count()
        return format_html(
            '<span style="background: #28a745; color: white; padding: 3px 8px; border-radius: 10px;">{}</span>',
            count
        )
    contracts_count.short_description = 'üìÑ –î–æ–≥–æ–≤–æ—Ä—ñ–≤'


@admin.register(Contract)
class ContractAdmin(admin.ModelAdmin):
    @admin.display(description='–ó–∞—Ä–ø–ª–∞—Ç–∞ (‚Ç¥)')
    def salary_display(self, obj):
        try:
            total = obj.calculate_total_salary()
            if total is None:
                return "‚Äî"
            return f"{total:.2f} ‚Ç¥"
        except Exception as e:
            return f"‚Äî ({e})"

    def status_badge(self, obj):
        if obj.pdf_file:
            return format_html(
                '<span style="background: #28a745; color: white; padding: 3px 8px; border-radius: 10px;">‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ</span>'
            )
        return format_html(
            '<span style="background: #dc3545; color: white; padding: 3px 8px; border-radius: 10px;">‚ùå –ù–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ</span>'
        )
    status_badge.short_description = '–°—Ç–∞—Ç—É—Å'

    def actions_column(self, obj):
        """–°—Ç–æ–≤–ø–µ—Ü—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥—ñ–π"""
        try:
            buttons = []

            # –ö–Ω–æ–ø–∫–∞ –¥–æ–≥–æ–≤–æ—Ä—É
            if not obj.pdf_file:
                url = reverse('admin:hr_contract_generate', args=[obj.pk])
                buttons.append(format_html('<a class="button" href="{}">üìÑ –î–æ–≥–æ–≤—ñ—Ä</a>', url))
            else:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º URL
                    pdf_url = obj.pdf_file.url
                    buttons.append(format_html('<a class="button" href="{}" target="_blank">üì• –î–æ–≥–æ–≤—ñ—Ä</a>', pdf_url))
                except (ValueError, FileNotFoundError, AttributeError) as e:
                    # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ —î –ø—Ä–æ–±–ª–µ–º–∞ –∑ –¥–æ—Å—Ç—É–ø–æ–º, –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
                    logger.warning(f"PDF file exists in DB but not accessible for contract {obj.pk}: {str(e)}")
                    url = reverse('admin:hr_contract_generate', args=[obj.pk])
                    buttons.append(format_html('<a class="button" href="{}" style="background: #ffc107;">‚ö†Ô∏è –†–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏</a>', url))

            # –ö–Ω–æ–ø–∫–∞ —Ç–∞–±–µ–ª—é
            timesheet_url = reverse('admin:hr_contract_timesheet', args=[obj.pk])
            if obj.timesheet_pdf:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º URL
                    timesheet_pdf_url = obj.timesheet_pdf.url
                    buttons.append(format_html('<a class="button" href="{}" target="_blank">üìä –¢–∞–±–µ–ª—å</a>', timesheet_pdf_url))
                except (ValueError, FileNotFoundError, AttributeError) as e:
                    # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
                    logger.warning(f"Timesheet PDF file exists in DB but not accessible for contract {obj.pk}: {str(e)}")
                    buttons.append(format_html('<a class="button" href="{}" style="background: #ffc107;">‚ö†Ô∏è –¢–∞–±–µ–ª—å</a>', timesheet_url))
            else:
                buttons.append(format_html('<a class="button" href="{}">üìä –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞–±–µ–ª—å</a>', timesheet_url))

            return format_html(' | '.join(buttons))
        except Exception as e:
            logger.error(f"Error in actions_column for contract {obj.pk}: {str(e)}", exc_info=True)
            return format_html('<span style="color: red;">–ü–æ–º–∏–ª–∫–∞</span>')
    actions_column.short_description = '–î—ñ—ó'

    list_display = (
        'employee',
        'position',
        'contract_type',
        'start_date',
        'salary_display',
        'status_badge',
        'actions_column'
    )

    list_filter = ('contract_type', 'start_date')
    search_fields = ('employee__full_name', 'position')

    readonly_fields = ('generated_at', 'pdf_file', 'timesheet_pdf')

    fieldsets = (
        ('–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫', {
            'fields': ('employee',)
        }),
        ('–£–º–æ–≤–∏ –ø—Ä–∞—Ü—ñ', {
            'fields': ('position', 'contract_type', 'start_date', 'weekly_hours')
        }),
        ('–ó–∞—Ä–ø–ª–∞—Ç–∞', {
            'fields': ('hourly_rate_brutto', 'salary_netto', 'salary_brutto')
        }),
        ('–î–æ–≥–æ–≤—ñ—Ä', {
            'fields': ('generated_at', 'pdf_file'),
            'classes': ('collapse',)
        }),
        ('–¢–∞–±–µ–ª—å —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É', {
            'fields': ('timesheet_pdf',),
            'classes': ('collapse',)
        }),
    )

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                '<int:contract_id>/generate/',
                self.admin_site.admin_view(self.generate_contract_view),
                name='hr_contract_generate',
            ),
            path(
                '<int:contract_id>/generate-timesheet/',
                self.admin_site.admin_view(self.generate_timesheet_view),
                name='hr_contract_timesheet',
            ),
        ]
        return custom_urls + urls
    
    def generate_contract_view(self, request, contract_id):
        """View –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–≥–æ–≤–æ—Ä—É"""
        from django.shortcuts import get_object_or_404
        import traceback
        
        contract = get_object_or_404(Contract, id=contract_id)
        
        try:
            logger.info(f"Starting contract PDF generation for contract {contract_id}, employee: {contract.employee.full_name}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ CompanyInfo –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é
            from contacts.models import CompanyInfo
            company = CompanyInfo.objects.filter(is_active=True).first()
            if not company:
                error_msg = "–î–∞–Ω—ñ –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ CompanyInfo –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ (contacts)."
                logger.error(f"CompanyInfo not found for contract {contract_id}")
                messages.error(request, error_msg)
                return HttpResponseRedirect(reverse('admin:hr_contract_change', args=[contract_id]))
            
            generate_contract_pdf(contract)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ email (–¥–æ–¥–∞–º–æ –¥–∞–ª—ñ)
            # send_contract_email(contract)
            
            messages.success(request, f"–î–æ–≥–æ–≤—ñ—Ä –¥–ª—è {contract.employee.full_name} –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        except ValueError as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {str(e)}"
            logger.error(f"ValueError during PDF generation for contract {contract_id}: {error_msg}", exc_info=True)
            messages.error(request, error_msg)
        except NotImplementedError as e:
            error_msg = f"–§—É–Ω–∫—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}"
            logger.warning(f"NotImplementedError during PDF generation for contract {contract_id}: {error_msg}")
            messages.warning(request, error_msg)
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {str(e)}"
            logger.error(f"Exception during PDF generation for contract {contract_id}: {traceback.format_exc()}", exc_info=True)
            messages.error(request, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
        
        return HttpResponseRedirect(reverse('admin:hr_contract_change', args=[contract_id]))
    
    def generate_timesheet_view(self, request, contract_id):
        """View –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞–±–µ–ª—é"""
        from django.shortcuts import get_object_or_404
        import traceback
        
        contract = get_object_or_404(Contract, id=contract_id)
        
        try:
            logger.info(f"Starting timesheet PDF generation for contract {contract_id}, employee: {contract.employee.full_name}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ CompanyInfo –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é
            from contacts.models import CompanyInfo
            company = CompanyInfo.objects.filter(is_active=True).first()
            if not company:
                error_msg = "–î–∞–Ω—ñ –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ CompanyInfo –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ (contacts)."
                logger.error(f"CompanyInfo not found for timesheet generation contract {contract_id}")
                messages.error(request, error_msg)
                return HttpResponseRedirect(reverse('admin:hr_contract_change', args=[contract_id]))
            
            generate_timesheet_pdf(contract)
            messages.success(request, f"–¢–∞–±–µ–ª—å –¥–ª—è {contract.employee.full_name} –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
        except ValueError as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {str(e)}"
            logger.error(f"ValueError during timesheet generation for contract {contract_id}: {error_msg}", exc_info=True)
            messages.error(request, error_msg)
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞–±–µ–ª—é: {str(e)}"
            logger.error(f"Exception during timesheet generation for contract {contract_id}: {traceback.format_exc()}", exc_info=True)
            messages.error(request, error_msg)
        
        return HttpResponseRedirect(reverse('admin:hr_contract_change', args=[contract_id]))
    


@admin.register(WorkLog)
class WorkLogAdmin(admin.ModelAdmin):
    list_display = ('employee', 'date', 'hours_worked', 'comment')
    list_filter = ('date', 'employee')
    search_fields = ('employee__full_name',)
    date_hierarchy = 'date'
