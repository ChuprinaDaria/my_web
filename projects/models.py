from django.db import models
from django import forms 
from ckeditor.fields import RichTextField
from services.models import ServiceCategory
from django.utils.text import slugify  


class Project(models.Model):
    slug = models.SlugField(max_length=255, unique=True)
    
    # –ó–≤'—è–∑–æ–∫ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é —Å–µ—Ä–≤—ñ—Å—ñ–≤
    category = models.ForeignKey(
        ServiceCategory,
        on_delete=models.CASCADE,
        related_name='projects',
        null=True,
        blank=True,
        help_text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å–µ—Ä–≤—ñ—Å—É, –¥–æ —è–∫–æ—ó –Ω–∞–ª–µ–∂–∏—Ç—å –ø—Ä–æ—î–∫—Ç"
    )
    
    # üè∑Ô∏è –ù–û–í–ê –°–ò–°–¢–ï–ú–ê –í–ù–£–¢–†–Ü–®–ù–Ü–• –¢–ï–ì–Ü–í –¥–ª—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
    tags = models.ManyToManyField(
        'core.Tag',
        blank=True,
        related_name='projects',
        help_text="–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ–≥–∏ –¥–ª—è –∫—Ä–æ—Å-–≤–∏–¥–∞—á—ñ –∑ –Ω–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∞–º–∏"
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ—î–∫—Ç—É (–±–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ—Å—Ç—å)
    title_en = models.CharField(max_length=255)
    title_uk = models.CharField(max_length=255)
    title_pl = models.CharField(max_length=255)
    
    # –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –¥–ª—è –∫–∞—Ä—Ç–æ–∫
    short_description_en = RichTextField(blank=True, null=True, help_text="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∫–∞—Ä—Ç–∫–∞—Ö")
    short_description_uk = RichTextField(blank=True, null=True)
    short_description_pl = RichTextField(blank=True, null=True)

    # üè∑Ô∏è –°–¢–ê–†–Ü –í–Ü–ó–£–ê–õ–¨–ù–Ü –¢–ï–ì–ò (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, –∞–ª–µ deprecated)
    # –¢–∏–ø –ø—Ä–æ—î–∫—Ç—É (–≥–æ–ª–æ–≤–Ω–∏–π —Ç–µ–≥) - DEPRECATED: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤
    project_type_en = models.CharField(
        max_length=100, 
        blank=True, 
        null=True,
        help_text="DEPRECATED: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤. Fintech Automation, E-commerce, AI Chat Bot, —Ç–æ—â–æ"
    )
    project_type_uk = models.CharField(
        max_length=100, 
        blank=True, 
        null=True,
        help_text="DEPRECATED: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤. –§—ñ–Ω—Ç–µ—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è, –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∫–æ–º–µ—Ä—Ü—ñ—è, –®–Ü —á–∞—Ç-–±–æ—Ç, —Ç–æ—â–æ"
    )
    project_type_pl = models.CharField(
        max_length=100, 
        blank=True, 
        null=True,
        help_text="DEPRECATED: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤"
    )
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –±–µ–π–¥–∂—ñ (–±—É–ª–µ–≤—ñ –ø–æ–ª—è) - –ó–ê–õ–ò–®–ê–Ñ–ú–û –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    is_top_project = models.BooleanField(
        default=False, 
        help_text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∑–æ–ª–æ—Ç–∏–π –±–µ–π–¥–∂ 'TOP'"
    )
    is_innovative = models.BooleanField(
        default=False, 
        help_text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–∏–Ω—ñ–π –±–µ–π–¥–∂ 'INNOVATIVE'"
    )
    is_ai_powered = models.BooleanField(
        default=False, 
        help_text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π –±–µ–π–¥–∂ 'AI POWERED'"
    )
    is_enterprise = models.BooleanField(
        default=False, 
        help_text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ 'ENTERPRISE'"
    )
    is_complex = models.BooleanField(
        default=False, 
        help_text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ 'COMPLEX'"
    )
    
    # –ö–∞—Å—Ç–æ–º–Ω–∏–π –±–µ–π–¥–∂ (–±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∏–π) - –ó–ê–õ–ò–®–ê–Ñ–ú–û
    custom_badge_en = models.CharField(
        max_length=50, 
        blank=True, 
        null=True,
        help_text="–ö–∞—Å—Ç–æ–º–Ω–∏–π –±–µ–π–¥–∂ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: EXCLUSIVE, PREMIUM, —Ç–æ—â–æ)"
    )
    custom_badge_uk = models.CharField(max_length=50, blank=True, null=True)
    custom_badge_pl = models.CharField(max_length=50, blank=True, null=True)
    
    # –ö–æ–ª—ñ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–µ–π–¥–∂–∞
    BADGE_COLOR_CHOICES = [
        ('green', '–ó–µ–ª–µ–Ω–∏–π üü¢'),
        ('blue', '–°–∏–Ω—ñ–π üîµ'),
        ('purple', '–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π üü£'),
        ('orange', '–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π üü†'),
        ('red', '–ß–µ—Ä–≤–æ–Ω–∏–π üî¥'),
        ('gold', '–ó–æ–ª–æ—Ç–∏–π üü°'),
        ('pink', '–†–æ–∂–µ–≤–∏–π ü©∑'),
        ('cyan', '–ë—ñ—Ä—é–∑–æ–≤–∏–π üî∑'),
    ]
    custom_badge_color = models.CharField(
        max_length=20,
        choices=BADGE_COLOR_CHOICES,
        default='green',
        help_text="–ö–æ–ª—ñ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–µ–π–¥–∂–∞"
    )
    
    # –†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—Ä–æ—î–∫—Ç—É (–≤–ø–ª–∏–≤–∞—î –Ω–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –µ—Ñ–µ–∫—Ç—ñ–≤)
    COMPLEXITY_CHOICES = [
        (1, '‚≠ê Simple - –ü—Ä–æ—Å—Ç–∏–π'),
        (2, '‚≠ê‚≠ê Medium - –°–µ—Ä–µ–¥–Ω—ñ–π'),
        (3, '‚≠ê‚≠ê‚≠ê Complex - –°–∫–ª–∞–¥–Ω–∏–π'),
        (4, '‚≠ê‚≠ê‚≠ê‚≠ê Enterprise - –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π'),
        (5, '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Cutting Edge - –ü–µ—Ä–µ–¥–æ–≤–∏–π')
    ]
    complexity_level = models.PositiveIntegerField(
        choices=COMPLEXITY_CHOICES,
        default=2,
        help_text="–†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—Ä–æ—î–∫—Ç—É (–≤–ø–ª–∏–≤–∞—î –Ω–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –µ—Ñ–µ–∫—Ç—ñ–≤ —Ç–∞ —Å–≤—ñ—á–µ–Ω–Ω—è)"
    )
    
    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—î–∫—Ç—É (–¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è)
    PRIORITY_CHOICES = [
        (1, '–ù–∏–∑—å–∫–∏–π'),
        (2, '–ó–≤–∏—á–∞–π–Ω–∏–π'),
        (3, '–í–∏—Å–æ–∫–∏–π'),
        (4, '–ö—Ä–∏—Ç–∏—á–Ω–∏–π'),
        (5, '–¢–æ–ø –ø—Ä–æ—î–∫—Ç'),
    ]
    priority = models.PositiveIntegerField(
        choices=PRIORITY_CHOICES,
        default=2,
        help_text="–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—î–∫—Ç—É (–≤–ø–ª–∏–≤–∞—î –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Ç–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)"
    )
    
    # –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É
    PROJECT_STATUS_CHOICES = [
        ('completed', '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
        ('ongoing', 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—ñ'),
        ('maintenance', 'üîß –ü—ñ–¥—Ç—Ä–∏–º–∫–∞'),
        ('paused', '‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ'),
        ('archived', 'üì¶ –ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ'),
    ]
    project_status = models.CharField(
        max_length=20,
        choices=PROJECT_STATUS_CHOICES,
        default='completed',
        help_text="–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—î–∫—Ç—É"
    )
    
    # –ó–∞–ø–∏—Ç –∫–ª—ñ—î–Ω—Ç–∞
    client_request_en = RichTextField(help_text="–©–æ —Ö–æ—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç, —è–∫–∞ –±—É–ª–∞ –∑–∞–¥–∞—á–∞")
    client_request_uk = RichTextField()
    client_request_pl = RichTextField()
    
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è - —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ
    implementation_en = RichTextField(help_text="–Ø–∫ –±—É–ª–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, —è–∫—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏")
    implementation_uk = RichTextField()
    implementation_pl = RichTextField()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç - —â–æ –ø—Ä–∏–Ω–µ—Å–ª–æ –∫–ª—ñ—î–Ω—Ç—É  
    results_en = RichTextField(help_text="–Ø–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–æ—Å—è–≥ –∫–ª—ñ—î–Ω—Ç, –µ–∫–æ–Ω–æ–º—ñ—è —á–∞—Å—É/–≥—Ä–æ—à–µ–π")
    results_uk = RichTextField()
    results_pl = RichTextField()

    client_request_extended_en = RichTextField(
        blank=True, 
        null=True,
        help_text="–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ—î–∫—Ç—É (–º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, –¥—ñ–∞–≥—Ä–∞–º–∏)"
    )
    client_request_extended_uk = RichTextField(blank=True, null=True)
    client_request_extended_pl = RichTextField(blank=True, null=True)

    # –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏)
    implementation_extended_en = RichTextField(
        blank=True, 
        null=True,
        help_text="–î–µ—Ç–∞–ª—å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏, –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é, –ø—Ä–æ—Ü–µ—Å–æ–º —Ä–æ–∑—Ä–æ–±–∫–∏"
    )
    implementation_extended_uk = RichTextField(blank=True, null=True)
    implementation_extended_pl = RichTextField(blank=True, null=True)

    # –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏)
    results_extended_en = RichTextField(
        blank=True, 
        null=True,
        help_text="–î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏, –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"
    )
    results_extended_uk = RichTextField(blank=True, null=True)
    results_extended_pl = RichTextField(blank=True, null=True)

    # –í–∏–∫–ª–∏–∫–∏ —Ç–∞ —Ä—ñ—à–µ–Ω–Ω—è (–Ω–æ–≤–∞ —Å–µ–∫—Ü—ñ—è)
    challenges_and_solutions_en = RichTextField(
        blank=True, 
        null=True,
        help_text="–Ø–∫—ñ –±—É–ª–∏ –≤–∏–∫–ª–∏–∫–∏ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Ä–æ–±–∫–∏ —ñ —è–∫ —ó—Ö –≤–∏—Ä—ñ—à–∏–ª–∏"
    )
    challenges_and_solutions_uk = RichTextField(blank=True, null=True)
    challenges_and_solutions_pl = RichTextField(blank=True, null=True)

    # –£—Ä–æ–∫–∏ —Ç–∞ –≤–∏—Å–Ω–æ–≤–∫–∏ (–Ω–æ–≤–∞ —Å–µ–∫—Ü—ñ—è)
    lessons_learned_en = RichTextField(
        blank=True, 
        null=True,
        help_text="–©–æ –≤–∏–≤—á–∏–ª–∏ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ—î–∫—Ç—É, –ø–æ—Ä–∞–¥–∏ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤"
    )
    lessons_learned_uk = RichTextField(blank=True, null=True)
    lessons_learned_pl = RichTextField(blank=True, null=True)
    
    # –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –¥–ª—è –ø—Ä–æ—î–∫—Ç—É
    featured_image = models.ImageField(
        upload_to="projects/images/", 
        blank=True, 
        null=True,
        help_text="–û—Å–Ω–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É"
    )
    
    gallery_image_1 = models.ImageField(upload_to="projects/gallery/", blank=True, null=True)
    gallery_image_2 = models.ImageField(upload_to="projects/gallery/", blank=True, null=True)
    gallery_image_3 = models.ImageField(upload_to="projects/gallery/", blank=True, null=True)
    
    # –í—ñ–¥–µ–æ (–º–æ–∂–µ –±—É—Ç–∏ YouTube URL –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª)
    video_url = models.URLField(blank=True, null=True, help_text="YouTube, Vimeo –∞–±–æ —ñ–Ω—à–∏–π URL")
    video_file = models.FileField(upload_to="projects/videos/", blank=True, null=True, help_text="–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª")
    
    # –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å
    technologies_used = models.CharField(
        max_length=500, 
        blank=True, 
        null=True,
        help_text="–°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —á–µ—Ä–µ–∑ –∫–æ–º—É: Python, Django, React, OpenAI"
    )
    
    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—î–∫—Ç (—è–∫—â–æ –ø—É–±–ª—ñ—á–Ω–∏–π)
    project_url = models.URLField(blank=True, null=True, help_text="–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç")
    
    # üìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–Ñ–ö–¢–£
    
    # –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    development_duration_weeks = models.PositiveIntegerField(
        blank=True, 
        null=True,
        help_text="–°–∫—ñ–ª—å–∫–∏ —Ç–∏–∂–Ω—ñ–≤ —Ç—Ä–∏–≤–∞–ª–∞ —Ä–æ–∑—Ä–æ–±–∫–∞"
    )
    
    # –ï–∫–æ–Ω–æ–º—ñ—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
    client_time_saved_hours = models.PositiveIntegerField(
        blank=True, 
        null=True,
        help_text="–°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –µ–∫–æ–Ω–æ–º–∏—Ç—å –∫–ª—ñ—î–Ω—Ç"
    )
    
    # –ë—é–¥–∂–µ—Ç –ø—Ä–æ—î–∫—Ç—É (–ø—Ä–∏–±–ª–∏–∑–Ω–∏–π)
    BUDGET_RANGE_CHOICES = [
        ('small', 'üí∞ $1k-5k'),
        ('medium', 'üí∞üí∞ $5k-15k'),
        ('large', 'üí∞üí∞üí∞ $15k-50k'),
        ('enterprise', 'üí∞üí∞üí∞üí∞ $50k+'),
        ('custom', 'ü§ù Custom'),
    ]
    budget_range = models.CharField(
        max_length=20,
        choices=BUDGET_RANGE_CHOICES,
        blank=True,
        null=True,
        help_text="–ü—Ä–∏–±–ª–∏–∑–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –±—é–¥–∂–µ—Ç—É –ø—Ä–æ—î–∫—Ç—É"
    )
    
    # SEO –ø–æ–ª—è
    seo_title_en = models.CharField(max_length=255)
    seo_title_uk = models.CharField(max_length=255, blank=True, null=True)
    seo_title_pl = models.CharField(max_length=255, blank=True, null=True)
    
    seo_description_en = models.TextField(max_length=300)
    seo_description_uk = models.TextField(max_length=300, blank=True, null=True)
    seo_description_pl = models.TextField(max_length=300, blank=True, null=True)
    
    # –°—Ç–∞—Ç—É—Å —Ç–∞ –ø–æ—Ä—è–¥–æ–∫
    is_active = models.BooleanField(default=True)
    is_featured = models.BooleanField(default=False, help_text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
    order = models.PositiveIntegerField(default=0, help_text="–ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    
    # –î–∞—Ç–∏
    project_date = models.DateField(help_text="–ö–æ–ª–∏ –±—É–≤ –≤–∏–∫–æ–Ω–∞–Ω–∏–π –ø—Ä–æ—î–∫—Ç")
    date_created = models.DateTimeField(auto_now_add=True)
    date_updated = models.DateTimeField(auto_now=True)
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title_en)
        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name = "Project"
        verbose_name_plural = "Projects"
        ordering = ['-priority', '-order', '-project_date']
    
    def __str__(self):
        return self.title_en
    
    # üõ†Ô∏è –ù–û–í–Ü –ú–ï–¢–û–î–ò –¥–ª—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó –∑ –Ω–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é —Ç–µ–≥—ñ–≤
    
    def get_related_articles(self, limit=3):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–Ω–∏ –∑ —Ç–∞–∫–∏–º–∏ –∂ —Ç–µ–≥–∞–º–∏"""
        if self.tags.exists():
            try:
                from news.models import ProcessedArticle
                return ProcessedArticle.objects.filter(
                    tags__in=self.tags.all(),
                    status='published'
                ).distinct().order_by('-published_at')[:limit]
            except ImportError:
                return []
        return []
    
    def get_related_services(self, limit=3):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–≤—ñ—Å–∏ –∑ —Ç–∞–∫–∏–º–∏ –∂ —Ç–µ–≥–∞–º–∏"""
        if self.tags.exists():
            try:
                from services.models import Service
                return Service.objects.filter(
                    tags__in=self.tags.all(),
                    is_active=True
                ).distinct().order_by('-date_created')[:limit]
            except ImportError:
                return []
        return []
    
    def get_cross_promotion_content(self, limit=6):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–º—ñ—à–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤'—è–∑–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        """
        content = []
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        related_articles = self.get_related_articles(limit=3)
        for article in related_articles:
            content.append({
                'type': 'article',
                'title': article.get_title('uk'),
                'summary': article.get_summary('uk')[:150] + '...',
                'url': article.get_absolute_url(),
                'image': article.ai_image_url,
                'date': article.published_at,
                'source_domain': article.source_domain,
                'object': article
            })
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏  
        related_services = self.get_related_services(limit=3)
        for service in related_services:
            content.append({
                'type': 'service',
                'title': service.title_uk,
                'summary': getattr(service, 'short_description_uk', '') or '–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Å–µ—Ä–≤—ñ—Å—É...',
                'url': f'/services/{service.slug}/',
                'image': service.icon.url if service.icon else None,
                'object': service
            })
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é/–¥–∞—Ç–æ—é
        content.sort(key=lambda x: x.get('date', x['object'].date_created), reverse=True)
        return content[:limit]
    
    def get_tag_names(self, language='uk'):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤–∏ —Ç–µ–≥—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        return [tag.get_name(language) for tag in self.tags.filter(is_active=True)]
    
    def get_main_tags(self, limit=3):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–≥–∏ –ø—Ä–æ—î–∫—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∫–∞—Ä—Ç–∫–∞—Ö"""
        return self.tags.filter(is_active=True)[:limit]
    
    def auto_assign_tags_from_legacy(self):
        """
        ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–µ–≥—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ä–∏—Ö –ø–æ–ª—ñ–≤
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ data migration –∞–±–æ management command
        """
        tags_to_assign = []
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–ª—è —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ç–µ–≥–∏
        if self.is_ai_powered:
            tags_to_assign.append('ai_ml')
        
        if 'automation' in (self.project_type_en or '').lower():
            tags_to_assign.append('process_automation')
        
        if 'chatbot' in (self.project_type_en or '').lower() or 'chat bot' in (self.project_type_en or '').lower():
            tags_to_assign.append('chatbots')
        
        if self.is_enterprise or 'enterprise' in (self.project_type_en or '').lower():
            tags_to_assign.append('business_optimization')
        
        if 'digital' in (self.project_type_en or '').lower() or 'transformation' in (self.project_type_en or '').lower():
            tags_to_assign.append('digital_transformation')
        
        if 'development' in (self.project_type_en or '').lower() or 'software' in (self.project_type_en or '').lower():
            tags_to_assign.append('software_development')
        
        # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–≥–∏
        try:
            from core.models import Tag
            for tag_key in tags_to_assign:
                tag = Tag.objects.filter(slug=tag_key, is_active=True).first()
                if tag:
                    self.tags.add(tag)
        except ImportError:
            pass
        
        return tags_to_assign
    
    # üõ†Ô∏è –ó–ê–õ–ò–®–ï–ù–Ü –°–¢–ê–†–Ü –ú–ï–¢–û–î–ò –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    
    def get_technologies_list(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —è–∫ –º–∞—Å–∏–≤"""
        if self.technologies_used:
            return [tech.strip() for tech in self.technologies_used.split(',')]
        return []
    
    def get_project_type(self, lang='uk'):
        """DEPRECATED: –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–∏–ø –ø—Ä–æ—î–∫—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤"""
        return getattr(self, f'project_type_{lang}', self.project_type_en) or ''
    
    def get_custom_badge(self, lang='uk'):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–∞—Å—Ç–æ–º–Ω–∏–π –±–µ–π–¥–∂ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'custom_badge_{lang}', self.custom_badge_en) or ''
    
    def get_complexity_display_uk(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
        complexity_map = {
            1: '–ü—Ä–æ—Å—Ç–∏–π',
            2: '–°–µ—Ä–µ–¥–Ω—ñ–π', 
            3: '–°–∫–ª–∞–¥–Ω–∏–π',
            4: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π',
            5: '–ü–µ—Ä–µ–¥–æ–≤–∏–π'
        }
        return complexity_map.get(self.complexity_level, '–°–µ—Ä–µ–¥–Ω—ñ–π')
    
    def get_status_emoji(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ—î–∫—Ç—É"""
        status_emojis = {
            'completed': '‚úÖ',
            'ongoing': 'üîÑ',
            'maintenance': 'üîß',
            'paused': '‚è∏Ô∏è',
            'archived': 'üì¶',
        }
        return status_emojis.get(self.project_status, '‚úÖ')
    
    def get_priority_level(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"""
        if self.priority >= 5:
            return 'top'
        elif self.priority >= 4:
            return 'critical'
        elif self.priority >= 3:
            return 'high'
        else:
            return 'normal'
    
    def get_glow_intensity(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å —Å–≤—ñ—á–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"""
        base_intensity = self.complexity_level * 0.2
        priority_bonus = self.priority * 0.1
        return min(base_intensity + priority_bonus, 1.0)  # –ú–∞–∫—Å–∏–º—É–º 1.0
    
    def has_special_badges(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –±–µ–π–¥–∂—ñ"""
        return (self.is_top_project or self.is_innovative or 
                self.is_ai_powered or self.is_enterprise or 
                self.is_complex or self.get_custom_badge())
    
    def get_all_badges(self, lang='uk'):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –±–µ–π–¥–∂—ñ –ø—Ä–æ—î–∫—Ç—É
        –û–ù–û–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—î –Ω–æ–≤—ñ —Ç–µ–≥–∏ + —Å—Ç–∞—Ä—ñ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –±–µ–π–¥–∂—ñ
        """
        badges = []
        
        # –ù–û–í–Ü –¢–ï–ì–ò (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ)
        for tag in self.tags.filter(is_active=True):
            badges.append({
                'type': 'tag',
                'text': tag.get_name(lang),
                'icon': getattr(tag, 'icon', 'Ô∏è'),
                'color': tag.color,
                'key': getattr(tag, 'slug', None)
            })
        
        # –°–¢–ê–†–Ü –í–Ü–ó–£–ê–õ–¨–ù–Ü –ë–ï–ô–î–ñ–Ü (fallback –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
        if self.get_project_type(lang) and not self.tags.exists():
            badges.append({
                'type': 'primary',
                'text': self.get_project_type(lang),
                'icon': 'üè¢'
            })
        
        if self.is_top_project:
            badges.append({
                'type': 'top',
                'text': '–¢–û–ü' if lang == 'uk' else 'TOP',
                'icon': 'üëë'
            })
        
        if self.is_innovative:
            badges.append({
                'type': 'innovation',
                'text': '–Ü–ù–ù–û–í–ê–¶–Ü–ô–ù–ò–ô' if lang == 'uk' else 'INNOVATIVE',
                'icon': '‚ö°'
            })
        
        if self.is_ai_powered:
            badges.append({
                'type': 'ai',
                'text': '–®–Ü –¢–ï–•–ù–û–õ–û–ì–Ü–á' if lang == 'uk' else 'AI POWERED',
                'icon': 'ü§ñ'
            })
        
        if self.is_enterprise:
            badges.append({
                'type': 'enterprise',
                'text': '–ö–û–†–ü–û–†–ê–¢–ò–í–ù–ò–ô' if lang == 'uk' else 'ENTERPRISE',
                'icon': 'üè≠'
            })
        
        if self.is_complex:
            badges.append({
                'type': 'complex',
                'text': '–°–ö–õ–ê–î–ù–ò–ô' if lang == 'uk' else 'COMPLEX',
                'icon': 'üß©'
            })
        
        if self.get_custom_badge(lang):
            badges.append({
                'type': 'custom',
                'text': self.get_custom_badge(lang),
                'icon': '‚ú®',
                'color': self.custom_badge_color
            })
        
        return badges


class ProjectReview(models.Model):
    """–í—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –ø—Ä–æ—î–∫—Ç–∏"""
    project = models.OneToOneField(
        Project,
        on_delete=models.CASCADE,
        related_name='review'
    )
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
    client_name = models.CharField(max_length=255, help_text="–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞ (–º–æ–∂–µ –±—É—Ç–∏ –ø—Å–µ–≤–¥–æ–Ω—ñ–º)")
    client_position = models.CharField(max_length=255, blank=True, null=True, help_text="–ü–æ—Å–∞–¥–∞ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó")
    client_company = models.CharField(max_length=255, blank=True, null=True, help_text="–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó")
    client_avatar = models.ImageField(upload_to="projects/reviews/", blank=True, null=True)
    
    # –í—ñ–¥–≥—É–∫ (–±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∏–π)
    review_text_en = RichTextField()
    review_text_uk = RichTextField()
    review_text_pl = RichTextField()
    
    # –†–µ–π—Ç–∏–Ω–≥
    rating = models.PositiveIntegerField(
        choices=[(i, i) for i in range(1, 6)],
        default=5,
        help_text="–†–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥ 1 –¥–æ 5 –∑—ñ—Ä–æ–∫"
    )
    
    # –°—Ç–∞—Ç—É—Å
    is_active = models.BooleanField(default=True)
    date_created = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "Project Review"
        verbose_name_plural = "Project Reviews"
    
    def __str__(self):
        return f"Review for {self.project.title_en} by {self.client_name}"


class ProjectContactSubmission(models.Model):
    """–§–æ—Ä–º–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—Ä–æ—î–∫—Ç—É"""
    project = models.ForeignKey(
        Project,
        on_delete=models.CASCADE,
        related_name='contact_submissions'
    )
    
    name = models.CharField(max_length=255)
    email = models.EmailField()
    phone = models.CharField(max_length=50, blank=True, null=True)
    company = models.CharField(max_length=255, blank=True, null=True)
    message = models.TextField()
    
    # –ú–µ—Ç–∞ –¥–∞–Ω—ñ
    created_at = models.DateTimeField(auto_now_add=True)
    ip_address = models.GenericIPAddressField(blank=True, null=True)
    user_agent = models.TextField(blank=True, null=True)
    
    # –°—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏
    is_processed = models.BooleanField(default=False)
    admin_notes = models.TextField(blank=True, null=True)
    
    class Meta:
        verbose_name = "Project Contact Submission"
        verbose_name_plural = "Project Contact Submissions"
        ordering = ['-created_at']
    
    def __str__(self):
        return f"Contact from {self.name} for {self.project.title_en}"