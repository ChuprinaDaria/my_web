from django.contrib import admin
from django import forms
from django.utils.html import format_html
from ckeditor_uploader.widgets import CKEditorUploadingWidget
from .models import Project, ProjectReview, ProjectContactSubmission


# --- –§–æ—Ä–º–∏ –∑ CKEditor ---
class ProjectAdminForm(forms.ModelForm):
    client_request_en = forms.CharField(widget=CKEditorUploadingWidget())
    client_request_uk = forms.CharField(widget=CKEditorUploadingWidget())
    client_request_pl = forms.CharField(widget=CKEditorUploadingWidget())
    
    implementation_en = forms.CharField(widget=CKEditorUploadingWidget())
    implementation_uk = forms.CharField(widget=CKEditorUploadingWidget())
    implementation_pl = forms.CharField(widget=CKEditorUploadingWidget())
    
    results_en = forms.CharField(widget=CKEditorUploadingWidget())
    results_uk = forms.CharField(widget=CKEditorUploadingWidget())
    results_pl = forms.CharField(widget=CKEditorUploadingWidget())
    
    short_description_en = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    short_description_uk = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    short_description_pl = forms.CharField(widget=CKEditorUploadingWidget(), required=False)

    client_request_extended_en = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    client_request_extended_uk = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    client_request_extended_pl = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    
    implementation_extended_en = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    implementation_extended_uk = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    implementation_extended_pl = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    
    results_extended_en = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    results_extended_uk = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    results_extended_pl = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    
    challenges_and_solutions_en = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    challenges_and_solutions_uk = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    challenges_and_solutions_pl = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    
    lessons_learned_en = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    lessons_learned_uk = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    lessons_learned_pl = forms.CharField(widget=CKEditorUploadingWidget(), required=False)

    class Meta:
        model = Project
        fields = '__all__'


class ProjectReviewAdminForm(forms.ModelForm):
    review_text_en = forms.CharField(widget=CKEditorUploadingWidget())
    review_text_uk = forms.CharField(widget=CKEditorUploadingWidget())
    review_text_pl = forms.CharField(widget=CKEditorUploadingWidget())

    class Meta:
        model = ProjectReview
        fields = '__all__'


# --- Inline –¥–ª—è –≤—ñ–¥–≥—É–∫—ñ–≤ ---
class ProjectReviewInline(admin.StackedInline):
    model = ProjectReview
    form = ProjectReviewAdminForm
    extra = 0
    max_num = 1  # –û–¥–∏–Ω –≤—ñ–¥–≥—É–∫ –Ω–∞ –ø—Ä–æ—î–∫—Ç
    fieldsets = (
        ("Client Information", {
            "fields": ("client_name", "client_position", "client_company", "client_avatar", "rating")
        }),
        ("Review Text", {
            "fields": ("review_text_en", "review_text_uk", "review_text_pl")
        }),
        ("Status", {
            "fields": ("is_active",)
        }),
    )


# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–¥–µ–ª–µ–π ---

@admin.register(Project)
class ProjectAdmin(admin.ModelAdmin):
    form = ProjectAdminForm
    inlines = [ProjectReviewInline]
    
    # üè∑Ô∏è –û–ù–û–í–õ–ï–ù–ò–ô —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ù–û–í–ò–ú–ò –¢–ï–ì–ê–ú–ò
    list_display = (
        "title_en", 
        "category", 
        "get_tags_display",  # üÜï –ù–û–í–Ü –¢–ï–ì–ò
        "priority",
        "get_complexity_display", 
        "get_visual_badges_display",  # üÜï –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
        "project_status",
        "is_featured", 
        "is_active", 
        "project_date", 
        "order"
    )
    
    list_editable = ("is_featured", "is_active", "order", "project_status", "priority")
    
    # üîç –û–ù–û–í–õ–ï–ù–Ü —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ –ù–û–í–ò–ú–ò –¢–ï–ì–ê–ú–ò
    list_filter = (
        "category",  # üéØ –ö–ê–¢–ï–ì–û–†–Ü–Ø - –≥–æ–ª–æ–≤–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä
        "priority",
        "complexity_level",
        "project_status",
        "is_featured", 
        "is_active", 
        "tags",  # üè∑Ô∏è –¢–ï–ì–ò - –Ω–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        "is_top_project",
        "is_innovative",
        "is_ai_powered",
        "is_enterprise",
        "is_complex",
        "budget_range",
        "project_date"
    )
    
    # üîç –û–ù–û–í–õ–ï–ù–ò–ô –ø–æ—à—É–∫
    search_fields = (
        "title_en", "title_uk", "title_pl", 
        "technologies_used",
        "tags__name_en", "tags__name_uk", "tags__name_pl",  # üÜï –ü–û–®–£–ö –ü–û –¢–ï–ì–ê–ú
        "project_type_en", "project_type_uk", "project_type_pl",  # —Å—Ç–∞—Ä—ñ –ø–æ–ª—è (deprecated)
        "custom_badge_en", "custom_badge_uk", "custom_badge_pl"
    )
    
    prepopulated_fields = {"slug": ("title_en",)}
    date_hierarchy = "project_date"
    
    # üè∑Ô∏è –û–ù–û–í–õ–ï–ù–ê —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—ñ–≤ –∑ –ù–û–í–û–Æ –°–ò–°–¢–ï–ú–û–Æ –¢–ï–ì–Ü–í
    fieldsets = (
        ("üìù Basic Information", {
            "fields": ("title_en", "title_uk", "title_pl", "slug", "category")
        }),
        
        ("üìä –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è", {
            "fields": (("priority", "is_featured"), "order")
        }),
        
        ("üè∑Ô∏è –¢–µ–≥–∏ (–æ–ø—Ü—ñ–π–Ω–æ)", {
            "fields": ("tags",),
            "description": "üéØ –û–±–µ—Ä—ñ—Ç—å —Ç–µ–≥–∏ –¥–ª—è –ø—ñ–¥—Å–∏–ª–µ–Ω–Ω—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"
        }),
        
        ("üé® –í—ñ–∑—É–∞–ª—å–Ω—ñ –±–µ–π–¥–∂—ñ (legacy)", {
            "fields": (
                # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –±–µ–π–¥–∂—ñ (–≤ —Ä—è–¥–æ–∫)
                ("is_top_project", "is_innovative", "is_ai_powered"),
                ("is_enterprise", "is_complex"),
                
                # –ö–∞—Å—Ç–æ–º–Ω–∏–π –±–µ–π–¥–∂
                ("custom_badge_en", "custom_badge_uk", "custom_badge_pl"),
                "custom_badge_color",
            ),
            "classes": ("collapse",),
            "description": "üé® –°—Ç–∞—Ä—ñ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –±–µ–π–¥–∂—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤ –≤–∏—â–µ!"
        }),
        
        ("üóÇÔ∏è DEPRECATED: –°—Ç–∞—Ä—ñ —Ç–∏–ø–∏ –ø—Ä–æ—î–∫—Ç—ñ–≤", {
            "fields": (
                ("project_type_en", "project_type_uk", "project_type_pl"),
            ),
            "classes": ("collapse",),
            "description": "‚ö†Ô∏è DEPRECATED: –¶—ñ –ø–æ–ª—è –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ—ó –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó!"
        }),
        
        ("üìä Project Metrics & Status", {
            "fields": (
                ("complexity_level", "project_status"),
                ("budget_range", "development_duration_weeks"),
                "client_time_saved_hours",
            ),
            "classes": ("wide",),
            "description": "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—î–∫—Ç—É —Ç–∞ –π–æ–≥–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å"
        }),
        
        ("üìÑ Project Content", {
            "fields": (
                ("short_description_en", "short_description_uk", "short_description_pl"),
                ("client_request_en", "client_request_uk", "client_request_pl"),
                ("implementation_en", "implementation_uk", "implementation_pl"),
                ("results_en", "results_uk", "results_pl")
            ),
            "classes": ("collapse",)
        }),

        ("üìÑ Extended Project Content (Detail Page Only)", {
            "fields": (
                ("client_request_extended_en", "client_request_extended_uk", "client_request_extended_pl"),
                ("implementation_extended_en", "implementation_extended_uk", "implementation_extended_pl"),
                ("results_extended_en", "results_extended_uk", "results_extended_pl"),
                ("challenges_and_solutions_en", "challenges_and_solutions_uk", "challenges_and_solutions_pl"),
                ("lessons_learned_en", "lessons_learned_uk", "lessons_learned_pl")
            ),
            "classes": ("collapse",),
            "description": "–î–µ—Ç–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ—î–∫—Ç—É (–Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π)"
        }),
        
        ("üñºÔ∏è Media Files", {
            "fields": (
                "featured_image",
                ("gallery_image_1", "gallery_image_2", "gallery_image_3"),
                ("video_url", "video_file")
            ),
            "classes": ("collapse",)
        }),
        
        ("üíª Technical Details", {
            "fields": (
                "technologies_used", 
                "project_url", 
                "project_date"
            ),
            "classes": ("collapse",)
        }),
        
        ("üîç SEO", {
            "fields": (
                ("seo_title_en", "seo_title_uk", "seo_title_pl"),
                ("seo_description_en", "seo_description_uk", "seo_description_pl")
            ),
            "classes": ("collapse",)
        }),
        
        ("‚öôÔ∏è Status & Display", {
            "fields": ("is_active",),
            "classes": ("wide",)
        }),
    )
    
    # üÜï –ù–û–í–Ü –º–µ—Ç–æ–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    def get_tags_display(self, obj):
        """üè∑Ô∏è –ü–æ–∫–∞–∑—É—î –ù–û–í–Ü –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ–≥–∏ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏"""
        tags = obj.tags.filter(is_active=True)
        if not tags.exists():
            return format_html('<span style="color: #6c757d;">‚ö™ –ù–µ–º–∞—î —Ç–µ–≥—ñ–≤</span>')
        
        tag_html = []
        for tag in tags[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 3 —Ç–µ–≥–∏
            tag_html.append(format_html(
                '<span style="background: {}; color: white; padding: 2px 6px; '
                'border-radius: 8px; font-size: 11px; margin-right: 4px;">'
                '{} {}</span>',
                tag.color, getattr(tag, 'icon', ''), tag.get_name('uk')
            ))
        
        if tags.count() > 3:
            tag_html.append(format_html('<span style="color: #6c757d;">+{}</span>', tags.count() - 3))
        
        return format_html(''.join(tag_html))
    get_tags_display.short_description = "üè∑Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ–≥–∏"
    
    def get_visual_badges_display(self, obj):
        """üé® –ü–æ–∫–∞–∑—É—î –°–¢–ê–†–Ü –≤—ñ–∑—É–∞–ª—å–Ω—ñ –±–µ–π–¥–∂—ñ (legacy)"""
        badges = []
        if obj.is_top_project:
            badges.append("üëëTOP")
        if obj.is_innovative:
            badges.append("‚ö°INNO")
        if obj.is_ai_powered:
            badges.append("ü§ñAI")
        if obj.is_enterprise:
            badges.append("üè≠ENT")
        if obj.is_complex:
            badges.append("üß©COMPLEX")
        if obj.custom_badge_uk:
            badges.append(f"‚ú®{obj.custom_badge_uk[:8]}")
        
        if badges:
            return format_html(
                '<span style="color: #6c757d; font-size: 11px;">{}</span>',
                " | ".join(badges)
            )
        return format_html('<span style="color: #6c757d;">‚Äî</span>')
    get_visual_badges_display.short_description = "üé® –í—ñ–∑—É–∞–ª—å–Ω—ñ –±–µ–π–¥–∂—ñ"
    
    def get_priority_display(self, obj):
        """–ü–æ–∫–∞–∑—É—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑ –µ–º–æ–¥–∑—ñ"""
        priority_icons = {
            1: "‚ö™ –ù–∏–∑—å–∫–∏–π",
            2: "üîµ –ó–≤–∏—á–∞–π–Ω–∏–π", 
            3: "üü° –í–∏—Å–æ–∫–∏–π",
            4: "üü† –ö—Ä–∏—Ç–∏—á–Ω–∏–π",
            5: "üî¥ –¢–æ–ø –ø—Ä–æ—î–∫—Ç"
        }
        return priority_icons.get(obj.priority, "üîµ –ó–≤–∏—á–∞–π–Ω–∏–π")
    get_priority_display.short_description = "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
    
    def get_complexity_display(self, obj):
        """–ü–æ–∫–∞–∑—É—î —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∑ –∑—ñ—Ä–æ—á–∫–∞–º–∏"""
        stars = "‚≠ê" * obj.complexity_level
        return f"{stars} ({obj.get_complexity_display_uk()})"
    get_complexity_display.short_description = "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å"
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('category').prefetch_related('tags')
    
    # üéØ –û–ù–û–í–õ–ï–ù–Ü –¥—ñ—ó –≤ –∞–¥–º—ñ–Ω—Ü—ñ + –ù–û–í–Ü –¥—ñ—ó –¥–ª—è —Ç–µ–≥—ñ–≤
    actions = [
        'mark_as_featured', 
        'mark_as_top', 
        'set_high_priority',
        'auto_assign_tags_from_legacy',  # üÜï –ù–û–í–ê –î–Ü–Ø
        'show_cross_promotion_stats'     # üÜï –ù–û–í–ê –î–Ü–Ø
    ]
    
    def mark_as_featured(self, request, queryset):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ"""
        updated = queryset.update(is_featured=True)
        self.message_user(request, f'{updated} –ø—Ä–æ—î–∫—Ç—ñ–≤ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ.')
    mark_as_featured.short_description = "‚ú® –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ"
    
    def mark_as_top(self, request, queryset):
        """–î–æ–¥–∞—Ç–∏ –±–µ–π–¥–∂ TOP"""
        updated = queryset.update(is_top_project=True)
        self.message_user(request, f'{updated} –ø—Ä–æ—î–∫—Ç—ñ–≤ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–µ–π–¥–∂ TOP.')
    mark_as_top.short_description = "üëë –î–æ–¥–∞—Ç–∏ –±–µ–π–¥–∂ TOP"
    
    def set_high_priority(self, request, queryset):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"""
        updated = queryset.update(priority=4)
        self.message_user(request, f'{updated} –ø—Ä–æ—î–∫—Ç—ñ–≤ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç.')
    set_high_priority.short_description = "üî• –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
    
    # üÜï –ù–û–í–Ü –¥—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ–≥–∞–º–∏
    def auto_assign_tags_from_legacy(self, request, queryset):
        """ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ä–∏—Ö –ø–æ–ª—ñ–≤"""
        updated_count = 0
        for project in queryset:
            assigned_tags = project.auto_assign_tags_from_legacy()
            if assigned_tags:
                updated_count += 1
        
        self.message_user(
            request, 
            f"üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ —Ç–µ–≥–∏ –¥–ª—è {updated_count} –ø—Ä–æ—î–∫—Ç—ñ–≤"
        )
    auto_assign_tags_from_legacy.short_description = "ü§ñ –ê–≤—Ç–æ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤ –∑ legacy –ø–æ–ª—ñ–≤"
    
    def show_cross_promotion_stats(self, request, queryset):
        """üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"""
        stats = []
        for project in queryset:
            related_articles = project.get_related_articles()
            related_services = project.get_related_services()
            tags_count = project.tags.count()
            
            stats.append(f"'{project.title_en}': {tags_count} —Ç–µ–≥—ñ–≤, "
                        f"{related_articles.count()} –Ω–æ–≤–∏–Ω, "
                        f"{related_services.count()} —Å–µ—Ä–≤—ñ—Å—ñ–≤")
        
        stats_text = "<br>".join(stats[:10])  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
        
        self.message_user(
            request,
            format_html(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó:<br>{stats_text}"),
        )
    show_cross_promotion_stats.short_description = "üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"


@admin.register(ProjectReview) 
class ProjectReviewAdmin(admin.ModelAdmin):
    form = ProjectReviewAdminForm
    list_display = ("project", "client_name", "rating", "is_active")
    list_filter = ("rating", "is_active")
    search_fields = ("client_name", "client_company", "project__title_en")


@admin.register(ProjectContactSubmission)
class ProjectContactSubmissionAdmin(admin.ModelAdmin):
    list_display = ("name", "email", "project", "created_at", "is_processed")
    list_filter = ("is_processed", "created_at", "project")
    search_fields = ("name", "email", "company", "message")
    readonly_fields = ("created_at", "ip_address", "user_agent")
    list_editable = ("is_processed",)
    date_hierarchy = "created_at"
    
    fieldsets = (
        ("Contact Information", {
            "fields": ("project", "name", "email", "phone", "company")
        }),
        ("Message", {
            "fields": ("message",)
        }),
        ("Meta Data", {
            "fields": ("created_at", "ip_address", "user_agent"),
            "classes": ("collapse",)
        }),
        ("Admin", {
            "fields": ("is_processed", "admin_notes")
        }),
    )
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('project')