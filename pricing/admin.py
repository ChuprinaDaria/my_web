# pricing/admin.py
from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import PricingTier, ServicePricing, QuoteRequest


@admin.register(PricingTier)
class PricingTierAdmin(admin.ModelAdmin):
    list_display = ('name', 'display_name_uk', 'is_popular', 'order')
    list_editable = ('is_popular', 'order')
    list_filter = ('is_popular',)
    ordering = ['order']
    
    fieldsets = (
        ("–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", {
            'fields': ('name', 'is_popular', 'order')
        }),
        ("–ù–∞–∑–≤–∏ (–±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–æ)", {
            'fields': (
                'display_name_uk',
                'display_name_en', 
                'display_name_pl'
            )
        }),
        ("–û–ø–∏—Å–∏ (–±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–æ)", {
            'fields': (
                'description_uk',
                'description_en',
                'description_pl'
            ),
            'classes': ('collapse',)
        })
    )


class ServicePricingInline(admin.TabularInline):
    """Inline –¥–ª—è –ø–æ–∫–∞–∑—É —Ü—ñ–Ω –ø—Ä—è–º–æ –≤ ServiceCategory"""
    model = ServicePricing
    fields = ('tier', 'price_from', 'price_to', 'timeline_weeks_from', 'complexity_level', 'is_active')
    extra = 0
    show_change_link = True


@admin.register(ServicePricing)
class ServicePricingAdmin(admin.ModelAdmin):
    list_display = (
        'service_category_link', 
        'tier_badge',
        'price_display', 
        'timeline_display',
        'complexity_badge',
        'is_active'
    )
    list_editable = ('is_active',)
    list_filter = (
        'service_category',
        'tier', 
        'complexity_level',
        'is_active'
    )
    search_fields = ('service_category__title_en', 'service_category__title_uk')
    ordering = ['service_category__title_en', 'tier__order']
    
    fieldsets = (
        ("üéØ –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", {
            'fields': (
                ('service_category', 'tier'),
                ('is_active', 'order', 'complexity_level')
            )
        }),
        ("üí∞ –¶—ñ–Ω–∞ —Ç–∞ —á–∞—Å", {
            'fields': (
                ('price_from', 'price_to'),
                ('timeline_weeks_from', 'timeline_weeks_to')
            ),
            'description': "–ó–∞–ª–∏—à price_to —Ç–∞ timeline_weeks_to –ø—É—Å—Ç–∏–º–∏ –¥–ª—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó —Ü—ñ–Ω–∏/—á–∞—Å—É"
        }),
        ("‚úÖ –©–æ –≤–∫–ª—é—á–µ–Ω–æ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é)", {
            'fields': ('features_included_uk',),
            'description': "–ö–æ–∂–Ω–∞ –ª—ñ–Ω—ñ—è = –æ–∫—Ä–µ–º–∞ —Ñ—ñ—á–∞. –ü—Ä–∏–∫–ª–∞–¥:\n‚Ä¢ –î–∏–∑–∞–π–Ω 5 —Å—Ç–æ—Ä—ñ–Ω–æ–∫\n‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å—Ç–∫–∞\n‚Ä¢ –ë–∞–∑–æ–≤–µ SEO"
        }),
        ("‚úÖ What's included (English)", {
            'fields': ('features_included_en',),
            'classes': ('collapse',)
        }),
        ("‚úÖ Co jest w≈ÇƒÖczone (Polish)", {
            'fields': ('features_included_pl',),
            'classes': ('collapse',)
        }),
        ("üéØ –î–ª—è –∫–æ–≥–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å", {
            'fields': (
                'suitable_for_uk',
                'suitable_for_en', 
                'suitable_for_pl'
            ),
            'classes': ('collapse',)
        })
    )
    
    def service_category_link(self, obj):
        """–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Å–µ—Ä–≤—ñ—Å—É"""
        url = reverse('admin:services_servicecategory_change', args=[obj.service_category.pk])
        return format_html('<a href="{}">{}</a>', url, obj.service_category.title_en)
    service_category_link.short_description = 'üóÇÔ∏è –°–µ—Ä–≤—ñ—Å'
    service_category_link.admin_order_field = 'service_category__title_en'
    
    def tier_badge(self, obj):
        """–ö—Ä–∞—Å–∏–≤–∏–π –±–µ–π–¥–∂ –¥–ª—è tier"""
        colors = {
            'basic': '#6c757d',      # —Å—ñ—Ä–∏–π
            'standard': '#0d6efd',   # —Å–∏–Ω—ñ–π  
            'premium': '#198754',    # –∑–µ–ª–µ–Ω–∏–π
            'enterprise': '#dc3545'  # —á–µ—Ä–≤–æ–Ω–∏–π
        }
        color = colors.get(obj.tier.name, '#6c757d')
        return format_html(
            '<span style="background: {}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">{}</span>',
            color, obj.tier.get_name_display()
        )
    tier_badge.short_description = 'üè∑Ô∏è –†—ñ–≤–µ–Ω—å'
    tier_badge.admin_order_field = 'tier__order'
    
    def price_display(self, obj):
        """–í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞"""
        return obj.get_price_display()
    price_display.short_description = 'üí∞ –¶—ñ–Ω–∞'
    price_display.admin_order_field = 'price_from'
    
    def timeline_display(self, obj):
        """–í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —á–∞—Å"""
        return obj.get_timeline_display() 
    timeline_display.short_description = '‚è∞ –ß–∞—Å'
    timeline_display.admin_order_field = 'timeline_weeks_from'
    
    def complexity_badge(self, obj):
        """–ë–µ–π–¥–∂ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ"""
        colors = {
            'simple': '#28a745',   # –∑–µ–ª–µ–Ω–∏–π
            'medium': '#ffc107',   # –∂–æ–≤—Ç–∏–π
            'complex': '#fd7e14',  # –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π  
            'enterprise': '#dc3545' # —á–µ—Ä–≤–æ–Ω–∏–π
        }
        color = colors.get(obj.complexity_level, '#6c757d')
        return format_html(
            '<span style="background: {}; color: white; padding: 2px 6px; border-radius: 8px; font-size: 10px;">{}</span>',
            color, obj.get_complexity_level_display()
        )
    complexity_badge.short_description = '‚ö° –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å'
    complexity_badge.admin_order_field = 'complexity_level'


@admin.register(QuoteRequest)  
class QuoteRequestAdmin(admin.ModelAdmin):
    list_display = (
        'client_name',
        'client_email', 
        'service_category',
        'status_badge',
        'date_created',
        'actions_column'
    )
    list_filter = (
        'status',
        'service_category',
        'wants_consultation', 
        'pdf_generated',
        'email_sent',
        'date_created'
    )
    search_fields = ('client_name', 'client_email', 'original_query')
    readonly_fields = ('date_created', 'date_updated', 'session_id', 'ip_address')
    ordering = ['-date_created']
    
    fieldsets = (
        ("üë§ –ö–ª—ñ—î–Ω—Ç", {
            'fields': (
                ('client_name', 'client_email'),
                ('client_phone', 'client_company')
            )
        }),
        ("üí¨ –ó–∞–ø–∏—Ç", {
            'fields': (
                'original_query',
                'service_category',
                'ai_analysis'
            )
        }),
        ("üí∞ –ü—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫", {
            'fields': (
                'suggested_pricing',
                ('pdf_generated', 'pdf_file'),
                'email_sent'
            )
        }),
        ("üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", {
            'fields': (
                'wants_consultation',
                'consultation_scheduled', 
                'google_event_id'
            )
        }),
        ("üìä –°—Ç–∞—Ç—É—Å —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω—ñ", {
            'fields': (
                'status',
                ('session_id', 'ip_address'),
                'user_agent',
                ('date_created', 'date_updated')
            ),
            'classes': ('collapse',)
        })
    )
    
    def status_badge(self, obj):
        """–ö–æ–ª—å–æ—Ä–æ–≤–∏–π –±–µ–π–¥–∂ —Å—Ç–∞—Ç—É—Å—É"""
        colors = {
            'new': '#6c757d',        # —Å—ñ—Ä–∏–π
            'analyzed': '#0d6efd',   # —Å–∏–Ω—ñ–π
            'quoted': '#198754',     # –∑–µ–ª–µ–Ω–∏–π
            'consulted': '#fd7e14',  # –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
            'converted': '#28a745',  # —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∏–π
            'closed': '#dc3545'      # —á–µ—Ä–≤–æ–Ω–∏–π
        }
        color = colors.get(obj.status, '#6c757d')
        return format_html(
            '<span style="background: {}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">{}</span>',
            color, obj.get_status_display()
        )
    status_badge.short_description = 'üìä –°—Ç–∞—Ç—É—Å'
    status_badge.admin_order_field = 'status'
    
    def actions_column(self, obj):
        """–®–≤–∏–¥–∫—ñ –¥—ñ—ó"""
        actions = []
        
        if not obj.pdf_generated and obj.suggested_pricing:
            actions.append('<a href="#" onclick="generatePdf({})" style="color: #0d6efd;">üìÑ –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF</a>'.format(obj.pk))
            
        if not obj.email_sent and obj.pdf_generated:
            actions.append('<a href="#" onclick="sendEmail({})" style="color: #198754;">üìß –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</a>'.format(obj.pk))
            
        if obj.wants_consultation and not obj.consultation_scheduled:
            actions.append('<a href="#" onclick="scheduleConsultation({})" style="color: #fd7e14;">üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏</a>'.format(obj.pk))
        
        return mark_safe(' | '.join(actions)) if actions else '-'
    actions_column.short_description = '‚ö° –î—ñ—ó'