# pricing/models.py
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from services.models import ServiceCategory


class PricingTier(models.Model):
    """–†—ñ–≤–Ω—ñ —Ü—ñ–Ω - –±–∞–∑–æ–≤–∏–π, —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –ø—Ä–µ–º—ñ—É–º"""
    
    TIER_CHOICES = [
        ('basic', 'ü•â –ë–∞–∑–æ–≤–∏–π'),
        ('standard', 'ü•à –°—Ç–∞–Ω–¥–∞—Ä—Ç'), 
        ('premium', 'ü•á –ü—Ä–µ–º—ñ—É–º'),
        ('enterprise', 'üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π'),
    ]
    
    name = models.CharField(max_length=50, choices=TIER_CHOICES, unique=True)
    display_name_uk = models.CharField(max_length=100)
    display_name_en = models.CharField(max_length=100)
    display_name_pl = models.CharField(max_length=100)
    
    description_uk = models.TextField(blank=True)
    description_en = models.TextField(blank=True)
    description_pl = models.TextField(blank=True)
    
    order = models.PositiveIntegerField(default=0)
    is_popular = models.BooleanField(default=False, help_text="–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ '–ü–æ–ø—É–ª—è—Ä–Ω–∏–π'")
    
    class Meta:
        ordering = ['order']
        verbose_name = "–†—ñ–≤–µ–Ω—å —Ü—ñ–Ω"
        verbose_name_plural = "–†—ñ–≤–Ω—ñ —Ü—ñ–Ω"
    
    def __str__(self):
        return f"{self.get_name_display()}"


class ServicePricing(models.Model):
    """–¶—ñ–Ω–∏ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
    
    service_category = models.ForeignKey(
        ServiceCategory, 
        on_delete=models.CASCADE,
        related_name='pricing_options',
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å–µ—Ä–≤—ñ—Å—É"
    )
    
    tier = models.ForeignKey(
        PricingTier,
        on_delete=models.CASCADE,
        verbose_name="–†—ñ–≤–µ–Ω—å"
    )
    
    # –¶—ñ–Ω–∞
    price_from = models.DecimalField(
        max_digits=10, 
        decimal_places=2,
        validators=[MinValueValidator(0)],
        help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –≤ USD"
    )
    
    price_to = models.DecimalField(
        max_digits=10, 
        decimal_places=2, 
        null=True, 
        blank=True,
        validators=[MinValueValidator(0)],
        help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ (—è–∫—â–æ –¥—ñ–∞–ø–∞–∑–æ–Ω). –ó–∞–ª–∏—à–∏—Ç–∏ –ø—É—Å—Ç–∏–º –¥–ª—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó —Ü—ñ–Ω–∏"
    )
    
    # –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    timeline_weeks_from = models.PositiveIntegerField(
        help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å –≤ —Ç–∏–∂–Ω—è—Ö"
    )
    
    timeline_weeks_to = models.PositiveIntegerField(
        null=True, 
        blank=True,
        help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –≤ —Ç–∏–∂–Ω—è—Ö (—è–∫—â–æ –¥—ñ–∞–ø–∞–∑–æ–Ω)"
    )
    
    # –©–æ –≤–∫–ª—é—á–µ–Ω–æ (–±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–æ)
    features_included_uk = models.TextField(
        help_text="–©–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Ü—é —Ü—ñ–Ω—É (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é). –ö–æ–∂–Ω–∞ –ª—ñ–Ω—ñ—è = –æ–¥–Ω–∞ —Ñ—ñ—á–∞"
    )
    features_included_en = models.TextField(
        help_text="What's included (English). Each line = one feature"
    )
    features_included_pl = models.TextField(
        help_text="Co jest w≈ÇƒÖczone (Polish). Ka≈ºda linia = jedna funkcja"
    )
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–∞ –¥–ª—è RAG
    complexity_level = models.CharField(
        max_length=20,
        choices=[
            ('simple', '–ü—Ä–æ—Å—Ç–∏–π'),
            ('medium', '–°–µ—Ä–µ–¥–Ω—ñ–π'),
            ('complex', '–°–∫–ª–∞–¥–Ω–∏–π'),
            ('enterprise', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π'),
        ],
        default='medium'
    )
    
    # –î–ª—è –∫–æ–≥–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å
    suitable_for_uk = models.TextField(
        blank=True,
        help_text="–î–ª—è –∫–æ–≥–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å —Ü–µ–π –ø–∞–∫–µ—Ç (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é)"
    )
    suitable_for_en = models.TextField(
        blank=True, 
        help_text="Who this package is suitable for (English)"
    )
    suitable_for_pl = models.TextField(
        blank=True,
        help_text="Dla kogo odpowiedni jest ten pakiet (Polish)"
    )
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ
    is_active = models.BooleanField(default=True)
    order = models.PositiveIntegerField(default=0)
    date_created = models.DateTimeField(auto_now_add=True)
    date_updated = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['service_category__title_en', 'tier__order', 'order']
        unique_together = ['service_category', 'tier']  # –û–¥–∏–Ω tier –Ω–∞ —Å–µ—Ä–≤—ñ—Å
        verbose_name = "–¶—ñ–Ω–∞ —Å–µ—Ä–≤—ñ—Å—É"
        verbose_name_plural = "–¶—ñ–Ω–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤"
        indexes = [
            models.Index(fields=['service_category', 'tier']),
            models.Index(fields=['is_active']),
        ]
    
    def __str__(self):
        return f"{self.service_category.title_en} - {self.tier.get_name_display()}"
    
    def get_price_display(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—É —Ü—ñ–Ω—É"""
        if self.price_to and self.price_to != self.price_from:
            return f"${int(self.price_from):,} - ${int(self.price_to):,}"
        return f"${int(self.price_from):,}"
    
    def get_timeline_display(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —á–∞—Å"""
        if self.timeline_weeks_to and self.timeline_weeks_to != self.timeline_weeks_from:
            return f"{self.timeline_weeks_from}-{self.timeline_weeks_to} —Ç–∏–∂–Ω—ñ–≤"
        return f"{self.timeline_weeks_from} —Ç–∏–∂–Ω—ñ–≤"
    
    def get_features_list(self, lang='uk'):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ñ—ñ—á —è–∫ –º–∞—Å–∏–≤"""
        features_field = getattr(self, f'features_included_{lang}', self.features_included_uk)
        if features_field:
            return [f.strip() for f in features_field.split('\n') if f.strip()]
        return []
    
    def get_suitable_for(self, lang='uk'):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ–ø–∏—Å –¥–ª—è –∫–æ–≥–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å"""
        return getattr(self, f'suitable_for_{lang}', self.suitable_for_uk)


class QuoteRequest(models.Model):
    """–ó–∞–ø–∏—Ç–∏ –Ω–∞ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
    client_name = models.CharField(max_length=100)
    client_email = models.EmailField()
    client_phone = models.CharField(max_length=20, blank=True)
    client_company = models.CharField(max_length=100, blank=True)
    
    # –î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç—É
    service_category = models.ForeignKey(
        ServiceCategory,
        on_delete=models.CASCADE,
        null=True, blank=True,
        help_text="–Ø–∫—â–æ AI –∑–º—ñ–≥ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"
    )
    
    original_query = models.TextField(
        help_text="–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∫–ª—ñ—î–Ω—Ç–∞"
    )
    
    ai_analysis = models.TextField(
        blank=True,
        help_text="–ê–Ω–∞–ª—ñ–∑ AI –ø—Ä–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç–∞ –≤–∏–º–æ–≥–∏"
    )
    
    suggested_pricing = models.ForeignKey(
        ServicePricing,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        help_text="–ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—ñ AI —Ü—ñ–Ω–∏"
    )
    
    # PDF —Ç–∞ —Å—Ç–∞—Ç—É—Å
    pdf_generated = models.BooleanField(default=False)
    pdf_file = models.FileField(upload_to='quotes/', blank=True, null=True)
    email_sent = models.BooleanField(default=False)
    
    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è
    wants_consultation = models.BooleanField(default=False)
    consultation_scheduled = models.BooleanField(default=False)
    google_event_id = models.CharField(max_length=255, blank=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ  
    session_id = models.CharField(max_length=255, blank=True)
    ip_address = models.GenericIPAddressField(blank=True, null=True)
    user_agent = models.TextField(blank=True)
    
    status = models.CharField(
        max_length=20,
        choices=[
            ('new', '–ù–æ–≤–∏–π'),
            ('analyzed', '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π'),
            ('quoted', '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫'),
            ('consulted', '–ó–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é'),
            ('converted', '–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π'),
            ('closed', '–ó–∞–∫—Ä–∏—Ç–∏–π'),
        ],
        default='new'
    )
    
    date_created = models.DateTimeField(auto_now_add=True)
    date_updated = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-date_created']
        verbose_name = "–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫"
        verbose_name_plural = "–ó–∞–ø–∏—Ç–∏ –Ω–∞ –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫–∏"
    
    def __str__(self):
        return f"{self.client_name} - {self.service_category or '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'} - {self.get_status_display()}"