# lazysoft/dashboard.py - –ß–∞—Å—Ç–∏–Ω–∞ 1/4: –Ü–º–ø–æ—Ä—Ç–∏ —Ç–∞ –±–∞–∑–æ–≤—ñ –∫–ª–∞—Å–∏

"""
üöÄ LAZYSOFT Executive Dashboard System

–ì–æ–ª–æ–≤–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–∞ —Ç–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π –∫–ª—ñ—î–Ω—Ç–∞–º.
–Ü–Ω—Ç–µ–≥—Ä—É—î –¥–∞–Ω—ñ –∑ —É—Å—ñ—Ö —Å–∏—Å—Ç–µ–º: –Ω–æ–≤–∏–Ω–∏, –ø—Ä–æ—î–∫—Ç–∏, —Å–µ—Ä–≤—ñ—Å–∏, AI –º–µ—Ç—Ä–∏–∫–∏.

–ê–≤—Ç–æ—Ä: LAZYSOFT AI System
–í–µ—Ä—Å—ñ—è: 2.0
"""

import json
import logging
from datetime import datetime, timedelta, date
from decimal import Decimal
from typing import Dict, List, Optional, Tuple, Any
from collections import defaultdict, Counter

# Django —ñ–º–ø–æ—Ä—Ç–∏
from django.contrib import admin
from django.utils import timezone
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _
from django.db.models import (
    Sum, Count, Avg, Max, Min, Q, F, 
    Case, When, IntegerField, FloatField,
    DateField, DecimalField
)
from django.db.models.functions import (
    TruncDate, TruncWeek, TruncMonth, 
    Extract, Coalesce
)
from django.db import connection
from django.http import JsonResponse, HttpResponse
from django.template.response import TemplateResponse
from django.urls import path, reverse
from django.contrib.admin.views.decorators import staff_member_required
from django.utils.decorators import method_decorator
from django.views.decorators.cache import cache_page
from django.core.cache import cache

# –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤
try:
    # News —Å–∏—Å—Ç–µ–º–∞
    from news.models import (
        ProcessedArticle, RawArticle, NewsCategory, 
        AIProcessingLog, ROIAnalytics, SocialMediaPost,
        RSSSource, TranslationCache
    )
    NEWS_AVAILABLE = True
except ImportError:
    NEWS_AVAILABLE = False
    logging.warning("‚ö†Ô∏è News models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")

try:
    # –ü—Ä–æ—î–∫—Ç–∏
    from projects.models import Project
    PROJECTS_AVAILABLE = True
except ImportError:
    PROJECTS_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Projects models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")

try:
    # –°–µ—Ä–≤—ñ—Å–∏
    from services.models import Service
    SERVICES_AVAILABLE = True
except ImportError:
    SERVICES_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Services models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")

try:
    # –¢–µ–≥–∏ (–∑ core –∞–±–æ news)
    from core.models import Tag
    TAGS_AVAILABLE = True
except ImportError:
    try:
        from news.models import Tag
        TAGS_AVAILABLE = True
    except ImportError:
        TAGS_AVAILABLE = False
        logging.warning("‚ö†Ô∏è Tags models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


# === –ë–ê–ó–û–í–Ü –£–¢–ò–õ–Ü–¢–ò –¢–ê –•–ï–õ–ü–ï–†–ò ===

class DashboardMetrics:
    """üîß –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫ dashboard"""
    
    @staticmethod
    def safe_divide(numerator: float, denominator: float, default: float = 0.0) -> float:
        """–ë–µ–∑–ø–µ—á–Ω–µ –¥—ñ–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å"""
        try:
            return float(numerator) / float(denominator) if denominator != 0 else default
        except (TypeError, ValueError, ZeroDivisionError):
            return default
    
    @staticmethod
    def calculate_percentage_change(current: float, previous: float) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ—ó –∑–º—ñ–Ω–∏"""
        return DashboardMetrics.safe_divide(
            (current - previous), previous, 0.0
        ) * 100
    
    @staticmethod
    def format_currency(amount: float, currency: str = 'USD') -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏"""
        try:
            if currency == 'USD':
                return f"${amount:,.2f}"
            elif currency == 'EUR':
                return f"‚Ç¨{amount:,.2f}"
            elif currency == 'UAH':
                return f"‚Ç¥{amount:,.2f}"
            else:
                return f"{amount:,.2f} {currency}"
        except:
            return f"$0.00"
    
    @staticmethod
    def get_performance_color(value: float, good_threshold: float, excellent_threshold: float) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª—ñ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫–∏"""
        if value >= excellent_threshold:
            return '#28a745'  # –ó–µ–ª–µ–Ω–∏–π - –≤—ñ–¥–º—ñ–Ω–Ω–æ
        elif value >= good_threshold:
            return '#ffc107'  # –ñ–æ–≤—Ç–∏–π - –¥–æ–±—Ä–µ
        elif value >= (good_threshold * 0.5):
            return '#fd7e14'  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π - —Å–µ—Ä–µ–¥–Ω—å–æ
        else:
            return '#dc3545'  # –ß–µ—Ä–≤–æ–Ω–∏–π - –ø–æ–≥–∞–Ω–æ
    
    @staticmethod
    def get_trend_icon(change_percent: float) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–∫–æ–Ω–∫—É —Ç—Ä–µ–Ω–¥—É"""
        if change_percent > 10:
            return 'üöÄ'  # –ó–Ω–∞—á–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è
        elif change_percent > 0:
            return 'üìà'  # –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è
        elif change_percent > -10:
            return 'üìä'  # –°—Ç–∞–±—ñ–ª—å–Ω–æ
        else:
            return 'üìâ'  # –ü–∞–¥—ñ–Ω–Ω—è
    
    @classmethod
    def get_date_range(cls, period: str = 'week') -> Tuple[date, date]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        today = timezone.now().date()
        
        if period == 'today':
            return today, today
        elif period == 'week':
            start_date = today - timedelta(days=7)
            return start_date, today
        elif period == 'month':
            start_date = today - timedelta(days=30)
            return start_date, today
        elif period == 'quarter':
            start_date = today - timedelta(days=90)
            return start_date, today
        elif period == 'year':
            start_date = today - timedelta(days=365)
            return start_date, today
        else:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Ç–∏–∂–¥–µ–Ω—å
            start_date = today - timedelta(days=7)
            return start_date, today


class DataAggregator:
    """üìä –ö–ª–∞—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª"""
    
    def __init__(self, date_from: date = None, date_to: date = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç"""
        if not date_from:
            date_from = timezone.now().date() - timedelta(days=30)
        if not date_to:
            date_to = timezone.now().date()
            
        self.date_from = date_from
        self.date_to = date_to
        
        logger.info(f"üìä DataAggregator —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {date_from} - {date_to}")
    
    def get_content_metrics(self) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥—É—î –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        metrics = {
            'articles': 0,
            'projects': 0, 
            'services': 0,
            'total_content': 0,
            'content_by_type': {},
            'growth_rate': 0.0
        }
        
        if NEWS_AVAILABLE:
            # –°—Ç–∞—Ç—Ç—ñ
            articles_count = ProcessedArticle.objects.filter(
                status='published',
                published_at__date__range=[self.date_from, self.date_to]
            ).count()
            metrics['articles'] = articles_count
            metrics['content_by_type']['articles'] = articles_count
        
        if PROJECTS_AVAILABLE:
            # –ü—Ä–æ—î–∫—Ç–∏
            projects_count = Project.objects.filter(
                is_active=True,
                project_date__range=[self.date_from, self.date_to]
            ).count()
            metrics['projects'] = projects_count
            metrics['content_by_type']['projects'] = projects_count
        
        if SERVICES_AVAILABLE:
            # –°–µ—Ä–≤—ñ—Å–∏
            services_count = Service.objects.filter(
                is_active=True,
                date_created__range=[self.date_from, self.date_to]
            ).count()
            metrics['services'] = services_count
            metrics['content_by_type']['services'] = services_count
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        metrics['total_content'] = sum(metrics['content_by_type'].values())
        
        return metrics
    
    def get_ai_metrics(self) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥—É—î AI –º–µ—Ç—Ä–∏–∫–∏"""
        ai_metrics = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'total_cost': 0.0,
            'avg_processing_time': 0.0,
            'success_rate': 0.0,
            'cost_per_request': 0.0,
            'requests_by_type': {},
            'cost_by_model': {},
            'efficiency_score': 0.0
        }
        
        if not NEWS_AVAILABLE:
            return ai_metrics
        
        try:
            # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
            ai_logs = AIProcessingLog.objects.filter(
                created_at__date__range=[self.date_from, self.date_to]
            )
            
            total_requests = ai_logs.count()
            successful_requests = ai_logs.filter(success=True).count()
            failed_requests = total_requests - successful_requests
            
            ai_metrics.update({
                'total_requests': total_requests,
                'successful_requests': successful_requests,
                'failed_requests': failed_requests,
                'success_rate': DashboardMetrics.safe_divide(
                    successful_requests, total_requests, 0.0
                ) * 100
            })
            
            # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
            cost_data = ai_logs.aggregate(
                total_cost=Sum('cost'),
                avg_processing_time=Avg('processing_time')
            )
            
            total_cost = float(cost_data['total_cost'] or 0)
            avg_time = float(cost_data['avg_processing_time'] or 0)
            
            ai_metrics.update({
                'total_cost': total_cost,
                'avg_processing_time': avg_time,
                'cost_per_request': DashboardMetrics.safe_divide(
                    total_cost, total_requests, 0.0
                )
            })
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö –∑–∞–ø–∏—Ç—ñ–≤
            requests_by_type = ai_logs.values('log_type').annotate(
                count=Count('id'),
                avg_cost=Avg('cost'),
                success_rate=Count('id', filter=Q(success=True)) * 100.0 / Count('id')
            )
            
            ai_metrics['requests_by_type'] = {
                item['log_type']: {
                    'count': item['count'],
                    'avg_cost': float(item['avg_cost'] or 0),
                    'success_rate': float(item['success_rate'] or 0)
                }
                for item in requests_by_type
            }
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –º–æ–¥–µ–ª—è—Ö
            cost_by_model = ai_logs.values('model_used').annotate(
                total_cost=Sum('cost'),
                request_count=Count('id'),
                avg_time=Avg('processing_time')
            ).order_by('-total_cost')
            
            ai_metrics['cost_by_model'] = {
                item['model_used']: {
                    'total_cost': float(item['total_cost'] or 0),
                    'request_count': item['request_count'],
                    'avg_time': float(item['avg_time'] or 0)
                }
                for item in cost_by_model
            }
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            success_rate = ai_metrics['success_rate']
            cost_efficiency = min(100, (1 / (total_cost + 1)) * 1000)  # –ß–∏–º –º–µ–Ω—à–µ –≤–∏—Ç—Ä–∞—Ç, —Ç–∏–º –∫—Ä–∞—â–µ
            time_efficiency = min(100, (10 / (avg_time + 1)) * 10)     # –ß–∏–º —à–≤–∏–¥—à–µ, —Ç–∏–º –∫—Ä–∞—â–µ
            
            ai_metrics['efficiency_score'] = (
                success_rate * 0.5 + cost_efficiency * 0.3 + time_efficiency * 0.2
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É AI –º–µ—Ç—Ä–∏–∫: {e}")
        
        return ai_metrics
    
    def get_engagement_metrics(self) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥—É—î –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ª—É—á–µ–Ω–Ω—è"""
        engagement = {
            'total_views': 0,
            'total_shares': 0,
            'social_posts': 0,
            'social_engagement': 0,
            'avg_engagement_rate': 0.0,
            'top_content': [],
            'engagement_by_platform': {}
        }
        
        if not NEWS_AVAILABLE:
            return engagement
        
        try:
            # –ü–µ—Ä–µ–≥–ª—è–¥–∏ —Å—Ç–∞—Ç–µ–π
            articles_stats = ProcessedArticle.objects.filter(
                status='published',
                published_at__date__range=[self.date_from, self.date_to]
            ).aggregate(
                total_views_uk=Sum('views_count_uk'),
                total_views_en=Sum('views_count_en'), 
                total_views_pl=Sum('views_count_pl'),
                total_shares=Sum('shares_count')
            )
            
            total_views = (
                (articles_stats['total_views_uk'] or 0) +
                (articles_stats['total_views_en'] or 0) +
                (articles_stats['total_views_pl'] or 0)
            )
            
            engagement.update({
                'total_views': total_views,
                'total_shares': articles_stats['total_shares'] or 0
            })
            
            # –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ
            social_stats = SocialMediaPost.objects.filter(
                created_at__date__range=[self.date_from, self.date_to]
            ).aggregate(
                posts_count=Count('id'),
                total_likes=Sum('likes_count'),
                total_comments=Sum('comments_count'),
                total_social_shares=Sum('shares_count'),
                total_reach=Sum('reach_count')
            )
            
            social_engagement = (
                (social_stats['total_likes'] or 0) +
                (social_stats['total_comments'] or 0) + 
                (social_stats['total_social_shares'] or 0)
            )
            
            engagement.update({
                'social_posts': social_stats['posts_count'] or 0,
                'social_engagement': social_engagement,
                'avg_engagement_rate': DashboardMetrics.safe_divide(
                    social_engagement, social_stats['total_reach'] or 1, 0.0
                ) * 100
            })
            
            # –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç
            top_articles = ProcessedArticle.objects.filter(
                status='published',
                published_at__date__range=[self.date_from, self.date_to]
            ).annotate(
                total_views_sum=F('views_count_uk') + F('views_count_en') + F('views_count_pl')
            ).order_by('-total_views_sum')[:5]
            
            engagement['top_content'] = [
                {
                    'title': article.title_uk,
                    'views': article.total_views_sum,
                    'shares': article.shares_count,
                    'url': article.get_absolute_url()
                }
                for article in top_articles
            ]
            
            # Engagement –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
            platform_stats = SocialMediaPost.objects.filter(
                created_at__date__range=[self.date_from, self.date_to]
            ).values('platform').annotate(
                posts=Count('id'),
                likes=Sum('likes_count'),
                comments=Sum('comments_count'),
                shares=Sum('shares_count'),
                reach=Sum('reach_count')
            )
            
            engagement['engagement_by_platform'] = {
                item['platform']: {
                    'posts': item['posts'],
                    'total_engagement': (item['likes'] or 0) + (item['comments'] or 0) + (item['shares'] or 0),
                    'reach': item['reach'] or 0,
                    'engagement_rate': DashboardMetrics.safe_divide(
                        (item['likes'] or 0) + (item['comments'] or 0) + (item['shares'] or 0),
                        item['reach'] or 1, 0.0
                    ) * 100
                }
                for item in platform_stats
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É engagement –º–µ—Ç—Ä–∏–∫: {e}")
        
        return engagement


class CacheManager:
    """üíæ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è dashboard"""
    
    CACHE_TIMEOUT = 3600  # 1 –≥–æ–¥–∏–Ω–∞
    
    @staticmethod
    def get_cache_key(prefix: str, date_from: date, date_to: date, extra: str = '') -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á –∫–µ—à—É"""
        return f"dashboard_{prefix}_{date_from}_{date_to}_{extra}"
    
    @classmethod
    def get_or_calculate(cls, cache_key: str, calculation_func, *args, **kwargs):
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ –∫–µ—à—É –∞–±–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–Ω–æ–≤–æ"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–µ—à—É
            cached_data = cache.get(cache_key)
            if cached_data is not None:
                logger.debug(f"üì¶ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É: {cache_key}")
                return cached_data
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–Ω–æ–≤–æ
            logger.debug(f"üîÑ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è: {cache_key}")
            data = calculation_func(*args, **kwargs)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
            cache.set(cache_key, data, cls.CACHE_TIMEOUT)
            
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è {cache_key}: {e}")
            # –Ø–∫—â–æ –∫–µ—à –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è
            return calculation_func(*args, **kwargs)
    
    @classmethod
    def invalidate_dashboard_cache(cls):
        """–û—á–∏—â—É—î –≤–µ—Å—å –∫–µ—à dashboard"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ dashboard_
            cache_keys = [
                key for key in cache._cache.keys() 
                if key.startswith('dashboard_')
            ]
            cache.delete_many(cache_keys)
            logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {len(cache_keys)} –∫–ª—é—á—ñ–≤ dashboard –∫–µ—à—É")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: {e}")


# === –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø DASHBOARD ===

class DashboardConfig:
    """‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è dashboard —Å–∏—Å—Ç–µ–º–∏"""
    
    # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    TITLE = "üöÄ LAZYSOFT Executive Dashboard"
    SUBTITLE = "Advanced Analytics & Client Presentations"
    VERSION = "2.0"
    
    # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
    COLORS = {
        'primary': '#007bff',
        'success': '#28a745',
        'warning': '#ffc107', 
        'danger': '#dc3545',
        'info': '#17a2b8',
        'light': '#f8f9fa',
        'dark': '#343a40'
    }
    
    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    THRESHOLDS = {
        'roi': {'good': 50, 'excellent': 100},           # ROI —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        'ai_success_rate': {'good': 85, 'excellent': 95}, # –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å AI
        'engagement_rate': {'good': 3, 'excellent': 5},   # Engagement —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        'cost_efficiency': {'good': 0.05, 'excellent': 0.02}  # –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ –∑–∞–ø–∏—Ç
    }
    
    # –ü–µ—Ä—ñ–æ–¥–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
    PERIODS = [
        ('today', '–°—å–æ–≥–æ–¥–Ω—ñ'),
        ('week', '–¢–∏–∂–¥–µ–Ω—å'),
        ('month', '–ú—ñ—Å—è—Ü—å'),
        ('quarter', '–ö–≤–∞—Ä—Ç–∞–ª'),
        ('year', '–†—ñ–∫')
    ]
    
    # –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥—É–ª—ñ (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤)
    @classmethod
    def get_available_modules(cls) -> Dict[str, bool]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤"""
        return {
            'news': NEWS_AVAILABLE,
            'projects': PROJECTS_AVAILABLE,
            'services': SERVICES_AVAILABLE,
            'tags': TAGS_AVAILABLE
        }
    
    @classmethod
    def is_fully_configured(cls) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ"""
        modules = cls.get_available_modules()
        return all(modules.values())


# === –ü–û–ß–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–°–¢–ï–ú–ò ===

def system_health_check() -> Dict[str, Any]:
    """üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
    health = {
        'status': 'healthy',
        'modules': DashboardConfig.get_available_modules(),
        'issues': [],
        'warnings': [],
        'recommendations': []
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤
    modules = health['modules']
    if not modules['news']:
        health['issues'].append("‚ùå News –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        health['status'] = 'critical'
    
    if not modules['projects']:
        health['warnings'].append("‚ö†Ô∏è Projects –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    if not modules['services']:
        health['warnings'].append("‚ö†Ô∏è Services –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    if not modules['tags']:
        health['warnings'].append("‚ö†Ô∏è Tags —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        health['recommendations'].append("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ
    if NEWS_AVAILABLE:
        articles_count = ProcessedArticle.objects.filter(status='published').count()
        if articles_count == 0:
            health['warnings'].append("‚ö†Ô∏è –ù–µ–º–∞—î –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π")
        elif articles_count < 10:
            health['recommendations'].append("üí° –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –∫—Ä–∞—â–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    if health['issues']:
        health['status'] = 'critical'
    elif health['warnings']:
        health['status'] = 'warning'
    
    logger.info(f"üè• System health check: {health['status']}")
    return health


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
logger.info("üöÄ LAZYSOFT Dashboard System initializing...")
logger.info(f"üìä Available modules: {DashboardConfig.get_available_modules()}")

# –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–±–µ–∑–ø–µ—á–Ω–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ–π)
def _tables_exist(table_names):
    try:
        existing = connection.introspection.table_names()
        return all(t in existing for t in table_names)
    except Exception:
        return False

try:
    required_tables = []
    if NEWS_AVAILABLE:
        required_tables.append(ProcessedArticle._meta.db_table)
    if _tables_exist(required_tables):
        initial_health = system_health_check()
    else:
        initial_health = {"status": "pending", "issues": ["Database not ready or migrations not applied"]}
except Exception:
    initial_health = {"status": "unknown", "issues": []}

# –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä —á–∞—Å—Ç–∏–Ω–∏ 1
"""
 –ß–∞—Å—Ç–∏–Ω–∞ 1/4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–°—Ç–≤–æ—Ä–µ–Ω–æ:
üîß DashboardMetrics - –±–∞–∑–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
üìä DataAggregator - –∞–≥—Ä–µ–≥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª  
üíæ CacheManager - –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è
‚öôÔ∏è DashboardConfig - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
üè• system_health_check - –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–Ω—É

–ì–æ—Ç–æ–≤–æ –¥–æ —á–∞—Å—Ç–∏–Ω–∏ 2/4: ROI —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞! üöÄ
"""
# lazysoft/dashboard.py - –ß–∞—Å—Ç–∏–Ω–∞ 1/4: –Ü–º–ø–æ—Ä—Ç–∏ —Ç–∞ –±–∞–∑–æ–≤—ñ –∫–ª–∞—Å–∏

"""
üöÄ LAZYSOFT Executive Dashboard System

–ì–æ–ª–æ–≤–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–∞ —Ç–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π –∫–ª—ñ—î–Ω—Ç–∞–º.
–Ü–Ω—Ç–µ–≥—Ä—É—î –¥–∞–Ω—ñ –∑ —É—Å—ñ—Ö —Å–∏—Å—Ç–µ–º: –Ω–æ–≤–∏–Ω–∏, –ø—Ä–æ—î–∫—Ç–∏, —Å–µ—Ä–≤—ñ—Å–∏, AI –º–µ—Ç—Ä–∏–∫–∏.

–ê–≤—Ç–æ—Ä: LAZYSOFT AI System
–í–µ—Ä—Å—ñ—è: 2.0
"""

import json
import logging
from datetime import datetime, timedelta, date
from decimal import Decimal
from typing import Dict, List, Optional, Tuple, Any
from collections import defaultdict, Counter

# Django —ñ–º–ø–æ—Ä—Ç–∏
from django.contrib import admin
from django.utils import timezone
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _
from django.db.models import (
    Sum, Count, Avg, Max, Min, Q, F, 
    Case, When, IntegerField, FloatField,
    DateField, DecimalField
)
from django.db.models.functions import (
    TruncDate, TruncWeek, TruncMonth, 
    Extract, Coalesce
)
from django.http import JsonResponse, HttpResponse
from django.template.response import TemplateResponse
from django.urls import path, reverse
from django.contrib.admin.views.decorators import staff_member_required
from django.utils.decorators import method_decorator
from django.views.decorators.cache import cache_page
from django.core.cache import cache

# –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤
try:
    # News —Å–∏—Å—Ç–µ–º–∞
    from news.models import (
        ProcessedArticle, RawArticle, NewsCategory, 
        AIProcessingLog, ROIAnalytics, SocialMediaPost,
        RSSSource, TranslationCache
    )
    NEWS_AVAILABLE = True
except Exception:
    NEWS_AVAILABLE = False
    logging.warning("‚ö†Ô∏è News models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")

try:
    # –ü—Ä–æ—î–∫—Ç–∏
    from projects.models import Project
    PROJECTS_AVAILABLE = True
except ImportError:
    PROJECTS_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Projects models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")

try:
    # –°–µ—Ä–≤—ñ—Å–∏
    from services.models import Service
    SERVICES_AVAILABLE = True
except ImportError:
    SERVICES_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Services models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")

try:
    # –¢–µ–≥–∏ (–∑ core –∞–±–æ news)
    from core.models import Tag
    TAGS_AVAILABLE = True
except ImportError:
    try:
        from news.models import Tag
        TAGS_AVAILABLE = True
    except ImportError:
        TAGS_AVAILABLE = False
        logging.warning("‚ö†Ô∏è Tags models –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


# === –ë–ê–ó–û–í–Ü –£–¢–ò–õ–Ü–¢–ò –¢–ê –•–ï–õ–ü–ï–†–ò ===

class DashboardMetrics:
    """üîß –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫ dashboard"""
    
    @staticmethod
    def safe_divide(numerator: float, denominator: float, default: float = 0.0) -> float:
        """–ë–µ–∑–ø–µ—á–Ω–µ –¥—ñ–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å"""
        try:
            return float(numerator) / float(denominator) if denominator != 0 else default
        except (TypeError, ValueError, ZeroDivisionError):
            return default
    
    @staticmethod
    def calculate_percentage_change(current: float, previous: float) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ—ó –∑–º—ñ–Ω–∏"""
        return DashboardMetrics.safe_divide(
            (current - previous), previous, 0.0
        ) * 100
    
    @staticmethod
    def format_currency(amount: float, currency: str = 'USD') -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏"""
        try:
            if currency == 'USD':
                return f"${amount:,.2f}"
            elif currency == 'EUR':
                return f"‚Ç¨{amount:,.2f}"
            elif currency == 'UAH':
                return f"‚Ç¥{amount:,.2f}"
            else:
                return f"{amount:,.2f} {currency}"
        except:
            return f"$0.00"
    
    @staticmethod
    def get_performance_color(value: float, good_threshold: float, excellent_threshold: float) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª—ñ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫–∏"""
        if value >= excellent_threshold:
            return '#28a745'  # –ó–µ–ª–µ–Ω–∏–π - –≤—ñ–¥–º—ñ–Ω–Ω–æ
        elif value >= good_threshold:
            return '#ffc107'  # –ñ–æ–≤—Ç–∏–π - –¥–æ–±—Ä–µ
        elif value >= (good_threshold * 0.5):
            return '#fd7e14'  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π - —Å–µ—Ä–µ–¥–Ω—å–æ
        else:
            return '#dc3545'  # –ß–µ—Ä–≤–æ–Ω–∏–π - –ø–æ–≥–∞–Ω–æ
    
    @staticmethod
    def get_trend_icon(change_percent: float) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–∫–æ–Ω–∫—É —Ç—Ä–µ–Ω–¥—É"""
        if change_percent > 10:
            return 'üöÄ'  # –ó–Ω–∞—á–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è
        elif change_percent > 0:
            return 'üìà'  # –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è
        elif change_percent > -10:
            return 'üìä'  # –°—Ç–∞–±—ñ–ª—å–Ω–æ
        else:
            return 'üìâ'  # –ü–∞–¥—ñ–Ω–Ω—è
    
    @classmethod
    def get_date_range(cls, period: str = 'week') -> Tuple[date, date]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        today = timezone.now().date()
        
        if period == 'today':
            return today, today
        elif period == 'week':
            start_date = today - timedelta(days=7)
            return start_date, today
        elif period == 'month':
            start_date = today - timedelta(days=30)
            return start_date, today
        elif period == 'quarter':
            start_date = today - timedelta(days=90)
            return start_date, today
        elif period == 'year':
            start_date = today - timedelta(days=365)
            return start_date, today
        else:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Ç–∏–∂–¥–µ–Ω—å
            start_date = today - timedelta(days=7)
            return start_date, today


class DataAggregator:
    """üìä –ö–ª–∞—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª"""
    
    def __init__(self, date_from: date = None, date_to: date = None):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç"""
        if not date_from:
            date_from = timezone.now().date() - timedelta(days=30)
        if not date_to:
            date_to = timezone.now().date()
            
        self.date_from = date_from
        self.date_to = date_to
        
        logger.info(f"üìä DataAggregator —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {date_from} - {date_to}")
    
    def get_content_metrics(self) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥—É—î –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        metrics = {
            'articles': 0,
            'projects': 0, 
            'services': 0,
            'total_content': 0,
            'content_by_type': {},
            'growth_rate': 0.0
        }
        
        if NEWS_AVAILABLE:
            # –°—Ç–∞—Ç—Ç—ñ
            articles_count = ProcessedArticle.objects.filter(
                status='published',
                published_at__date__range=[self.date_from, self.date_to]
            ).count()
            metrics['articles'] = articles_count
            metrics['content_by_type']['articles'] = articles_count
        
        if PROJECTS_AVAILABLE:
            # –ü—Ä–æ—î–∫—Ç–∏
            projects_count = Project.objects.filter(
                is_active=True,
                project_date__range=[self.date_from, self.date_to]
            ).count()
            metrics['projects'] = projects_count
            metrics['content_by_type']['projects'] = projects_count
        
        if SERVICES_AVAILABLE:
            # –°–µ—Ä–≤—ñ—Å–∏
            services_count = Service.objects.filter(
                is_active=True,
                date_created__range=[self.date_from, self.date_to]
            ).count()
            metrics['services'] = services_count
            metrics['content_by_type']['services'] = services_count
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        metrics['total_content'] = sum(metrics['content_by_type'].values())
        
        return metrics
    
    def get_ai_metrics(self) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥—É—î AI –º–µ—Ç—Ä–∏–∫–∏"""
        ai_metrics = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'total_cost': 0.0,
            'avg_processing_time': 0.0,
            'success_rate': 0.0,
            'cost_per_request': 0.0,
            'requests_by_type': {},
            'cost_by_model': {},
            'efficiency_score': 0.0
        }
        
        if not NEWS_AVAILABLE:
            return ai_metrics
        
        try:
            # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
            ai_logs = AIProcessingLog.objects.filter(
                created_at__date__range=[self.date_from, self.date_to]
            )
            
            total_requests = ai_logs.count()
            successful_requests = ai_logs.filter(success=True).count()
            failed_requests = total_requests - successful_requests
            
            ai_metrics.update({
                'total_requests': total_requests,
                'successful_requests': successful_requests,
                'failed_requests': failed_requests,
                'success_rate': DashboardMetrics.safe_divide(
                    successful_requests, total_requests, 0.0
                ) * 100
            })
            
            # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
            cost_data = ai_logs.aggregate(
                total_cost=Sum('cost'),
                avg_processing_time=Avg('processing_time')
            )
            
            total_cost = float(cost_data['total_cost'] or 0)
            avg_time = float(cost_data['avg_processing_time'] or 0)
            
            ai_metrics.update({
                'total_cost': total_cost,
                'avg_processing_time': avg_time,
                'cost_per_request': DashboardMetrics.safe_divide(
                    total_cost, total_requests, 0.0
                )
            })
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö –∑–∞–ø–∏—Ç—ñ–≤
            requests_by_type = ai_logs.values('log_type').annotate(
                count=Count('id'),
                avg_cost=Avg('cost'),
                success_rate=Count('id', filter=Q(success=True)) * 100.0 / Count('id')
            )
            
            ai_metrics['requests_by_type'] = {
                item['log_type']: {
                    'count': item['count'],
                    'avg_cost': float(item['avg_cost'] or 0),
                    'success_rate': float(item['success_rate'] or 0)
                }
                for item in requests_by_type
            }
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –º–æ–¥–µ–ª—è—Ö
            cost_by_model = ai_logs.values('model_used').annotate(
                total_cost=Sum('cost'),
                request_count=Count('id'),
                avg_time=Avg('processing_time')
            ).order_by('-total_cost')
            
            ai_metrics['cost_by_model'] = {
                item['model_used']: {
                    'total_cost': float(item['total_cost'] or 0),
                    'request_count': item['request_count'],
                    'avg_time': float(item['avg_time'] or 0)
                }
                for item in cost_by_model
            }
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            success_rate = ai_metrics['success_rate']
            cost_efficiency = min(100, (1 / (total_cost + 1)) * 1000)  # –ß–∏–º –º–µ–Ω—à–µ –≤–∏—Ç—Ä–∞—Ç, —Ç–∏–º –∫—Ä–∞—â–µ
            time_efficiency = min(100, (10 / (avg_time + 1)) * 10)     # –ß–∏–º —à–≤–∏–¥—à–µ, —Ç–∏–º –∫—Ä–∞—â–µ
            
            ai_metrics['efficiency_score'] = (
                success_rate * 0.5 + cost_efficiency * 0.3 + time_efficiency * 0.2
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É AI –º–µ—Ç—Ä–∏–∫: {e}")
        
        return ai_metrics
    
    def get_engagement_metrics(self) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥—É—î –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ª—É—á–µ–Ω–Ω—è"""
        engagement = {
            'total_views': 0,
            'total_shares': 0,
            'social_posts': 0,
            'social_engagement': 0,
            'avg_engagement_rate': 0.0,
            'top_content': [],
            'engagement_by_platform': {}
        }
        
        if not NEWS_AVAILABLE:
            return engagement
        
        try:
            # –ü–µ—Ä–µ–≥–ª—è–¥–∏ —Å—Ç–∞—Ç–µ–π
            articles_stats = ProcessedArticle.objects.filter(
                status='published',
                published_at__date__range=[self.date_from, self.date_to]
            ).aggregate(
                total_views_uk=Sum('views_count_uk'),
                total_views_en=Sum('views_count_en'), 
                total_views_pl=Sum('views_count_pl'),
                total_shares=Sum('shares_count')
            )
            
            total_views = (
                (articles_stats['total_views_uk'] or 0) +
                (articles_stats['total_views_en'] or 0) +
                (articles_stats['total_views_pl'] or 0)
            )
            
            engagement.update({
                'total_views': total_views,
                'total_shares': articles_stats['total_shares'] or 0
            })
            
            # –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ
            social_stats = SocialMediaPost.objects.filter(
                created_at__date__range=[self.date_from, self.date_to]
            ).aggregate(
                posts_count=Count('id'),
                total_likes=Sum('likes_count'),
                total_comments=Sum('comments_count'),
                total_social_shares=Sum('shares_count'),
                total_reach=Sum('reach_count')
            )
            
            social_engagement = (
                (social_stats['total_likes'] or 0) +
                (social_stats['total_comments'] or 0) + 
                (social_stats['total_social_shares'] or 0)
            )
            
            engagement.update({
                'social_posts': social_stats['posts_count'] or 0,
                'social_engagement': social_engagement,
                'avg_engagement_rate': DashboardMetrics.safe_divide(
                    social_engagement, social_stats['total_reach'] or 1, 0.0
                ) * 100
            })
            
            # –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç
            top_articles = ProcessedArticle.objects.filter(
                status='published',
                published_at__date__range=[self.date_from, self.date_to]
            ).annotate(
                total_views_sum=F('views_count_uk') + F('views_count_en') + F('views_count_pl')
            ).order_by('-total_views_sum')[:5]
            
            engagement['top_content'] = [
                {
                    'title': article.title_uk,
                    'views': article.total_views_sum,
                    'shares': article.shares_count,
                    'url': article.get_absolute_url()
                }
                for article in top_articles
            ]
            
            # Engagement –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
            platform_stats = SocialMediaPost.objects.filter(
                created_at__date__range=[self.date_from, self.date_to]
            ).values('platform').annotate(
                posts=Count('id'),
                likes=Sum('likes_count'),
                comments=Sum('comments_count'),
                shares=Sum('shares_count'),
                reach=Sum('reach_count')
            )
            
            engagement['engagement_by_platform'] = {
                item['platform']: {
                    'posts': item['posts'],
                    'total_engagement': (item['likes'] or 0) + (item['comments'] or 0) + (item['shares'] or 0),
                    'reach': item['reach'] or 0,
                    'engagement_rate': DashboardMetrics.safe_divide(
                        (item['likes'] or 0) + (item['comments'] or 0) + (item['shares'] or 0),
                        item['reach'] or 1, 0.0
                    ) * 100
                }
                for item in platform_stats
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É engagement –º–µ—Ç—Ä–∏–∫: {e}")
        
        return engagement


class CacheManager:
    """üíæ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è dashboard"""
    
    CACHE_TIMEOUT = 3600  # 1 –≥–æ–¥–∏–Ω–∞
    
    @staticmethod
    def get_cache_key(prefix: str, date_from: date, date_to: date, extra: str = '') -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á –∫–µ—à—É"""
        return f"dashboard_{prefix}_{date_from}_{date_to}_{extra}"
    
    @classmethod
    def get_or_calculate(cls, cache_key: str, calculation_func, *args, **kwargs):
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ –∫–µ—à—É –∞–±–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–Ω–æ–≤–æ"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–µ—à—É
            cached_data = cache.get(cache_key)
            if cached_data is not None:
                logger.debug(f"üì¶ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É: {cache_key}")
                return cached_data
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–Ω–æ–≤–æ
            logger.debug(f"üîÑ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è: {cache_key}")
            data = calculation_func(*args, **kwargs)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
            cache.set(cache_key, data, cls.CACHE_TIMEOUT)
            
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è {cache_key}: {e}")
            # –Ø–∫—â–æ –∫–µ—à –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è
            return calculation_func(*args, **kwargs)
    
    @classmethod
    def invalidate_dashboard_cache(cls):
        """–û—á–∏—â—É—î –≤–µ—Å—å –∫–µ—à dashboard"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ dashboard_
            cache_keys = [
                key for key in cache._cache.keys() 
                if key.startswith('dashboard_')
            ]
            cache.delete_many(cache_keys)
            logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {len(cache_keys)} –∫–ª—é—á—ñ–≤ dashboard –∫–µ—à—É")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: {e}")


# === –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø DASHBOARD ===

class DashboardConfig:
    """‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è dashboard —Å–∏—Å—Ç–µ–º–∏"""
    
    # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    TITLE = "üöÄ LAZYSOFT Executive Dashboard"
    SUBTITLE = "Advanced Analytics & Client Presentations"
    VERSION = "2.0"
    
    # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
    COLORS = {
        'primary': '#007bff',
        'success': '#28a745',
        'warning': '#ffc107', 
        'danger': '#dc3545',
        'info': '#17a2b8',
        'light': '#f8f9fa',
        'dark': '#343a40'
    }
    
    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    THRESHOLDS = {
        'roi': {'good': 50, 'excellent': 100},           # ROI —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        'ai_success_rate': {'good': 85, 'excellent': 95}, # –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å AI
        'engagement_rate': {'good': 3, 'excellent': 5},   # Engagement —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        'cost_efficiency': {'good': 0.05, 'excellent': 0.02}  # –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ –∑–∞–ø–∏—Ç
    }
    
    # –ü–µ—Ä—ñ–æ–¥–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
    PERIODS = [
        ('today', '–°—å–æ–≥–æ–¥–Ω—ñ'),
        ('week', '–¢–∏–∂–¥–µ–Ω—å'),
        ('month', '–ú—ñ—Å—è—Ü—å'),
        ('quarter', '–ö–≤–∞—Ä—Ç–∞–ª'),
        ('year', '–†—ñ–∫')
    ]
    
    # –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥—É–ª—ñ (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤)
    @classmethod
    def get_available_modules(cls) -> Dict[str, bool]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤"""
        return {
            'news': NEWS_AVAILABLE,
            'projects': PROJECTS_AVAILABLE,
            'services': SERVICES_AVAILABLE,
            'tags': TAGS_AVAILABLE
        }
    
    @classmethod
    def is_fully_configured(cls) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ"""
        modules = cls.get_available_modules()
        return all(modules.values())


# === –ü–û–ß–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–°–¢–ï–ú–ò ===

def system_health_check() -> Dict[str, Any]:
    """üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
    health = {
        'status': 'healthy',
        'modules': DashboardConfig.get_available_modules(),
        'issues': [],
        'warnings': [],
        'recommendations': []
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤
    modules = health['modules']
    if not modules['news']:
        health['issues'].append("‚ùå News –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        health['status'] = 'critical'
    
    if not modules['projects']:
        health['warnings'].append("‚ö†Ô∏è Projects –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    if not modules['services']:
        health['warnings'].append("‚ö†Ô∏è Services –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    if not modules['tags']:
        health['warnings'].append("‚ö†Ô∏è Tags —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        health['recommendations'].append("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ
    if NEWS_AVAILABLE:
        articles_count = ProcessedArticle.objects.filter(status='published').count()
        if articles_count == 0:
            health['warnings'].append("‚ö†Ô∏è –ù–µ–º–∞—î –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π")
        elif articles_count < 10:
            health['recommendations'].append("üí° –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –∫—Ä–∞—â–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    if health['issues']:
        health['status'] = 'critical'
    elif health['warnings']:
        health['status'] = 'warning'
    
    logger.info(f"üè• System health check: {health['status']}")
    return health


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
logger.info("üöÄ LAZYSOFT Dashboard System initializing...")
logger.info(f"üìä Available modules: {DashboardConfig.get_available_modules()}")

# –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–±–µ–∑–ø–µ—á–Ω–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ–π)
try:
    required_tables = []
    if NEWS_AVAILABLE:
        required_tables.append(ProcessedArticle._meta.db_table)
    if _tables_exist(required_tables):
        initial_health = system_health_check()
    else:
        initial_health = {"status": "pending", "issues": ["Database not ready or migrations not applied"]}
except Exception:
    initial_health = {"status": "unknown", "issues": []}
if initial_health['status'] == 'critical':
    logger.error("‚ùå Critical issues detected in dashboard system")
    for issue in initial_health['issues']:
        logger.error(f"  {issue}")
else:
    logger.info(" Dashboard system initialized successfully")

# –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä —á–∞—Å—Ç–∏–Ω–∏ 1
"""
 –ß–∞—Å—Ç–∏–Ω–∞ 1/4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–°—Ç–≤–æ—Ä–µ–Ω–æ:
üîß DashboardMetrics - –±–∞–∑–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
üìä DataAggregator - –∞–≥—Ä–µ–≥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª  
üíæ CacheManager - –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è
‚öôÔ∏è DashboardConfig - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
üè• system_health_check - –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–Ω—É

–ì–æ—Ç–æ–≤–æ –¥–æ —á–∞—Å—Ç–∏–Ω–∏ 2/4: ROI —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞! üöÄ
"""
# lazysoft/dashboard.py - –ß–∞—Å—Ç–∏–Ω–∞ 3/4: –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ AI –º–µ—Ç—Ä–∏–∫–∏

# === AI PERFORMANCE ANALYZER ===

class AIPerformanceAnalyzer:
    """ü§ñ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ AI —Å–∏—Å—Ç–µ–º–∏"""
    
    def __init__(self, date_from: date, date_to: date):
        self.date_from = date_from
        self.date_to = date_to
        self.aggregator = DataAggregator(date_from, date_to)
    
    def get_ai_efficiency_report(self) -> Dict[str, Any]:
        """–ó–≤—ñ—Ç –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ AI"""
        if not NEWS_AVAILABLE:
            return {'error': 'News —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
        
        ai_logs = AIProcessingLog.objects.filter(
            created_at__date__range=[self.date_from, self.date_to]
        )
        
        # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        total_requests = ai_logs.count()
        successful = ai_logs.filter(success=True).count()
        failed = total_requests - successful
        
        # –í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞ —á–∞—Å
        stats = ai_logs.aggregate(
            total_cost=Sum('cost'),
            avg_time=Avg('processing_time'),
            total_tokens=Sum('input_tokens') + Sum('output_tokens')
        )
        
        # –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–æ —Ç–∏–ø–∞—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        operations_stats = ai_logs.values('log_type').annotate(
            count=Count('id'),
            success_rate=Count('id', filter=Q(success=True)) * 100.0 / Count('id'),
            avg_cost=Avg('cost'),
            avg_time=Avg('processing_time')
        ).order_by('-count')
        
        return {
            'summary': {
                'total_requests': total_requests,
                'success_rate': (successful / total_requests * 100) if total_requests > 0 else 0,
                'total_cost': float(stats['total_cost'] or 0),
                'avg_processing_time': float(stats['avg_time'] or 0),
                'cost_per_request': float(stats['total_cost'] or 0) / total_requests if total_requests > 0 else 0
            },
            'operations': list(operations_stats),
            'efficiency_score': self._calculate_efficiency_score(successful, total_requests, stats),
            'recommendations': self._generate_ai_recommendations(operations_stats)
        }
    
    def _calculate_efficiency_score(self, successful: int, total: int, stats: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ AI"""
        if total == 0:
            return 0.0
        
        success_score = (successful / total) * 50  # 50% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä—É
        cost_score = min(25, (1 / (float(stats['total_cost'] or 1) + 1)) * 2500)  # 25% –≤—ñ–¥ —Å–∫–æ—Ä—É
        speed_score = min(25, (10 / (float(stats['avg_time'] or 1) + 1)) * 25)   # 25% –≤—ñ–¥ —Å–∫–æ—Ä—É
        
        return success_score + cost_score + speed_score
    
    def _generate_ai_recommendations(self, operations_stats) -> List[str]:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è AI"""
        recommendations = []
        
        for op in operations_stats:
            if op['success_rate'] < 90:
                recommendations.append(f"–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å {op['log_type']} –æ–ø–µ—Ä–∞—Ü—ñ–π")
            if op['avg_cost'] > 0.1:
                recommendations.append(f"–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å {op['log_type']} –æ–ø–µ—Ä–∞—Ü—ñ–π")
        
        if not recommendations:
            recommendations.append("AI —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
        
        return recommendations


# === CONTENT QUALITY ANALYZER ===

class ContentQualityAnalyzer:
    """üìä –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —è–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    def __init__(self, date_from: date, date_to: date):
        self.date_from = date_from
        self.date_to = date_to
    
    def analyze_content_metrics(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ –º–µ—Ç—Ä–∏–∫ —è–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        if not NEWS_AVAILABLE:
            return {'error': 'News —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
        
        articles = ProcessedArticle.objects.filter(
            status='published',
            published_at__date__range=[self.date_from, self.date_to]
        )
        
        # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        total_articles = articles.count()
        if total_articles == 0:
            return {'error': '–ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–µ—Ä—ñ–æ–¥'}
        
        # –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ
        quality_scores = []
        tags_coverage = 0
        top_articles = 0
        
        for article in articles:
            # –û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–Ω–æ—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            quality_score = article.get_content_completeness_score()
            quality_scores.append(quality_score)
            
            # –ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ–≥–∞–º–∏
            if article.tags.exists():
                tags_coverage += 1
            
            # –¢–æ–ø —Å—Ç–∞—Ç—Ç—ñ
            if article.is_top_article:
                top_articles += 1
        
        avg_quality = sum(quality_scores) / len(quality_scores)
        tags_coverage_percent = (tags_coverage / total_articles) * 100
        
        # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —è–∫–æ—Å—Ç—ñ
        excellent = sum(1 for score in quality_scores if score >= 90)
        good = sum(1 for score in quality_scores if 70 <= score < 90)
        average = sum(1 for score in quality_scores if 50 <= score < 70)
        poor = sum(1 for score in quality_scores if score < 50)
        
        return {
            'summary': {
                'total_articles': total_articles,
                'avg_quality_score': round(avg_quality, 1),
                'tags_coverage': round(tags_coverage_percent, 1),
                'top_articles': top_articles
            },
            'quality_distribution': {
                'excellent': excellent,
                'good': good, 
                'average': average,
                'poor': poor
            },
            'recommendations': self._generate_quality_recommendations(avg_quality, tags_coverage_percent)
        }
    
    def _generate_quality_recommendations(self, avg_quality: float, tags_coverage: float) -> List[str]:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —è–∫–æ—Å—Ç—ñ"""
        recommendations = []
        
        if avg_quality < 70:
            recommendations.append("–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É")
        if tags_coverage < 80:
            recommendations.append("–ó–±—ñ–ª—å—à–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è —Å—Ç–∞—Ç–µ–π —Ç–µ–≥–∞–º–∏")
        if avg_quality > 85 and tags_coverage > 90:
            recommendations.append("–í—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É! –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å")
        
        return recommendations


# === CROSS PROMOTION ANALYZER ===

class CrossPromotionAnalyzer:
    """üéØ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"""
    
    def __init__(self, date_from: date, date_to: date):
        self.date_from = date_from
        self.date_to = date_to
    
    def analyze_cross_promotion_effectiveness(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"""
        if not NEWS_AVAILABLE or not TAGS_AVAILABLE:
            return {'error': '–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ'}
        
        articles = ProcessedArticle.objects.filter(
            status='published',
            published_at__date__range=[self.date_from, self.date_to]
        )
        
        total_articles = articles.count()
        articles_with_tags = articles.filter(tags__isnull=False).distinct().count()
        
        # –ê–Ω–∞–ª—ñ–∑ –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
        cross_promo_stats = {
            'with_projects': 0,
            'with_services': 0,
            'with_both': 0,
            'total_connections': 0
        }
        
        for article in articles.filter(tags__isnull=False).distinct():
            projects = article.get_related_projects()
            services = article.get_related_services()
            
            if projects:
                cross_promo_stats['with_projects'] += 1
                cross_promo_stats['total_connections'] += len(projects)
            if services:
                cross_promo_stats['with_services'] += 1
                cross_promo_stats['total_connections'] += len(services)
            if projects and services:
                cross_promo_stats['with_both'] += 1
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        success_rate = 0
        if articles_with_tags > 0:
            articles_with_cross_promo = (cross_promo_stats['with_projects'] + 
                                       cross_promo_stats['with_services'] - 
                                       cross_promo_stats['with_both'])
            success_rate = (articles_with_cross_promo / articles_with_tags) * 100
        
        # –¢–æ–ø —Ç–µ–≥–∏ –ø–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        top_tags = []
        if TAGS_AVAILABLE:
            tags_stats = Tag.objects.annotate(
                articles_count=Count('articles', filter=Q(
                    articles__status='published',
                    articles__published_at__date__range=[self.date_from, self.date_to]
                ))
            ).filter(articles_count__gt=0).order_by('-articles_count')[:5]
            
            for tag in tags_stats:
                # –†–∞—Ö—É—î–º–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ —Ç–µ–≥—É
                tag_articles = articles.filter(tags=tag)
                tag_cross_promo = sum(
                    1 for article in tag_articles 
                    if article.get_related_projects() or article.get_related_services()
                )
                
                tag_effectiveness = (tag_cross_promo / tag_articles.count() * 100) if tag_articles.count() > 0 else 0
                
                top_tags.append({
                    'name': tag.get_name(),
                    'articles_count': tag_articles.count(),
                    'effectiveness': round(tag_effectiveness, 1)
                })
        
        return {
            'summary': {
                'total_articles': total_articles,
                'articles_with_tags': articles_with_tags,
                'success_rate': round(success_rate, 1),
                'total_connections': cross_promo_stats['total_connections']
            },
            'breakdown': cross_promo_stats,
            'top_tags': top_tags,
            'recommendations': self._generate_cross_promo_recommendations(success_rate, articles_with_tags, total_articles)
        }
    
    def _generate_cross_promo_recommendations(self, success_rate: float, with_tags: int, total: int) -> List[str]:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"""
        recommendations = []
        
        tags_coverage = (with_tags / total * 100) if total > 0 else 0
        
        if tags_coverage < 70:
            recommendations.append("–ó–±—ñ–ª—å—à–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –∑ —Ç–µ–≥–∞–º–∏")
        if success_rate < 50:
            recommendations.append("–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –∑–≤'—è–∑–∫—ñ–≤ –º—ñ–∂ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
        if success_rate > 80:
            recommendations.append("–í—ñ–¥–º—ñ–Ω–Ω–∞ –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—è! –ú–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏ –ø—ñ–¥—Ö—ñ–¥")
        
        return recommendations


# === PERFORMANCE DASHBOARD ===

class PerformanceDashboard:
    """üìà –ó–∞–≥–∞–ª—å–Ω–∏–π dashboard –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    def __init__(self, date_from: date, date_to: date):
        self.date_from = date_from
        self.date_to = date_to
        self.ai_analyzer = AIPerformanceAnalyzer(date_from, date_to)
        self.content_analyzer = ContentQualityAnalyzer(date_from, date_to)
        self.cross_promo_analyzer = CrossPromotionAnalyzer(date_from, date_to)
    
    def generate_performance_summary(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        
        # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ —É—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä—ñ–≤
        ai_report = self.ai_analyzer.get_ai_efficiency_report()
        content_report = self.content_analyzer.analyze_content_metrics()
        cross_promo_report = self.cross_promo_analyzer.analyze_cross_promotion_effectiveness()
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–∫–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        scores = []
        if 'efficiency_score' in ai_report:
            scores.append(ai_report['efficiency_score'])
        if 'summary' in content_report and 'avg_quality_score' in content_report['summary']:
            scores.append(content_report['summary']['avg_quality_score'])
        if 'summary' in cross_promo_report and 'success_rate' in cross_promo_report['summary']:
            scores.append(cross_promo_report['summary']['success_rate'])
        
        overall_score = sum(scores) / len(scores) if scores else 0
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
        if overall_score >= 80:
            status = 'Excellent'
            color = '#28a745'
        elif overall_score >= 60:
            status = 'Good'
            color = '#ffc107'
        elif overall_score >= 40:
            status = 'Fair'
            color = '#fd7e14'
        else:
            status = 'Poor'
            color = '#dc3545'
        
        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        all_recommendations = []
        for report in [ai_report, content_report, cross_promo_report]:
            if 'recommendations' in report:
                all_recommendations.extend(report['recommendations'])
        
        return {
            'period': f"{self.date_from} to {self.date_to}",
            'overall_performance': {
                'score': round(overall_score, 1),
                'status': status,
                'color': color
            },
            'ai_performance': ai_report,
            'content_quality': content_report,
            'cross_promotion': cross_promo_report,
            'key_recommendations': all_recommendations[:5],  # –¢–æ–ø 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
            'trends': self._calculate_trends()
        }
    
    def _calculate_trends(self) -> Dict[str, str]:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç—Ä–µ–Ω–¥–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–µ—Ä—ñ–æ–¥–æ–º
        period_length = (self.date_to - self.date_from).days + 1
        prev_date_from = self.date_from - timedelta(days=period_length)
        prev_date_to = self.date_from - timedelta(days=1)
        
        try:
            # –ü–æ—Ç–æ—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
            current_articles = ProcessedArticle.objects.filter(
                status='published',
                published_at__date__range=[self.date_from, self.date_to]
            ).count() if NEWS_AVAILABLE else 0
            
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥  
            previous_articles = ProcessedArticle.objects.filter(
                status='published',
                published_at__date__range=[prev_date_from, prev_date_to]
            ).count() if NEWS_AVAILABLE else 0
            
            # –¢—Ä–µ–Ω–¥ —Å—Ç–∞—Ç–µ–π
            if previous_articles > 0:
                articles_change = ((current_articles - previous_articles) / previous_articles) * 100
                articles_trend = "üìà –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è" if articles_change > 5 else "üìä –°—Ç–∞–±—ñ–ª—å–Ω–æ" if articles_change > -5 else "üìâ –ó–Ω–∏–∂–µ–Ω–Ω—è"
            else:
                articles_trend = "üìä –°—Ç–∞–±—ñ–ª—å–Ω–æ"
            
            return {
                'articles': articles_trend,
                'ai_efficiency': "üìà –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è",  # –ó–∞–≥–ª—É—à–∫–∞
                'quality': "üìä –°—Ç–∞–±—ñ–ª—å–Ω–æ"         # –ó–∞–≥–ª—É—à–∫–∞
            }
        except:
            return {
                'articles': "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö",
                'ai_efficiency': "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö", 
                'quality': "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö"
            }


# –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä —á–∞—Å—Ç–∏–Ω–∏ 3
"""
 –ß–∞—Å—Ç–∏–Ω–∞ 3/4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞! (–∫–æ–º–ø–∞–∫—Ç–Ω–∞ –≤–µ—Ä—Å—ñ—è)

–°—Ç–≤–æ—Ä–µ–Ω–æ:
ü§ñ AIPerformanceAnalyzer - –∞–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ AI
üìä ContentQualityAnalyzer - –º–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É  
üéØ CrossPromotionAnalyzer - –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
üìà PerformanceDashboard - –∑–≤–µ–¥–µ–Ω–∏–π dashboard

–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–µ–∑ –Ω–∞–¥–º—ñ—Ä–Ω–æ—ó –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó.
–ì–æ—Ç–æ–≤–æ –¥–æ —á–∞—Å—Ç–∏–Ω–∏ 4/4: –ì–æ–ª–æ–≤–Ω–∏–π Dashboard Admin! üöÄ
"""

# lazysoft/dashboard.py - –ß–∞—Å—Ç–∏–Ω–∞ 4/4: –ì–æ–ª–æ–≤–Ω–∏–π Dashboard Admin

# === EXECUTIVE DASHBOARD ADMIN ===

class LazySOFTDashboardAdmin:
    """üéØ –ì–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è Executive Dashboard"""
    
    def __init__(self):
        self.config = DashboardConfig()
        # –ë–µ–∑–ø–µ—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–µ–∑ –∑–∞–ø–∏—Ç—ñ–≤, —è–∫—â–æ –ë–î —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞
        try:
            required_tables = []
            if NEWS_AVAILABLE:
                required_tables.append(ProcessedArticle._meta.db_table)
            if _tables_exist(required_tables):
                self.health_status = system_health_check()
            else:
                self.health_status = {"status": "pending", "issues": ["Database not ready or migrations not applied"]}
        except Exception:
            self.health_status = {"status": "unknown", "issues": []}
        logger.info(f"üéØ LazySOFT Dashboard Admin —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    def get_executive_summary(self, period: str = 'month') -> Dict[str, Any]:
        """üìä –ì–µ–Ω–µ—Ä—É—î executive summary –¥–ª—è –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–∞"""
        
        date_from, date_to = DashboardMetrics.get_date_range(period)
        cache_key = CacheManager.get_cache_key('executive_summary', date_from, date_to, period)
        
        return CacheManager.get_or_calculate(
            cache_key, 
            self._calculate_executive_summary,
            date_from, date_to, period
        )
    
    def _calculate_executive_summary(self, date_from: date, date_to: date, period: str) -> Dict[str, Any]:
        """üî¢ –†–æ–∑—Ä–∞—Ö–æ–≤—É—î executive summary"""
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∏
        aggregator = DataAggregator(date_from, date_to)
        # ROI –∞–Ω–∞–ª—ñ–∑ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –±–µ–∑ –æ–∫—Ä–µ–º–æ–≥–æ –∫–ª–∞—Å—É)
        roi_data = self._calculate_simple_roi(aggregator) if NEWS_AVAILABLE else {'total_roi': 0, 'roi_by_category': {}}
        performance_dashboard = PerformanceDashboard(date_from, date_to)
        
        # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        content_metrics = aggregator.get_content_metrics()
        ai_metrics = aggregator.get_ai_metrics()
        engagement_metrics = aggregator.get_engagement_metrics()
        
        # ROI —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        financial_data = {'summary': {
            'total_revenue': roi_data.get('total_roi', 0),
            'cost_efficiency': round(ai_metrics.get('cost_per_request', 0), 4)
        }}
        
        # Performance –º–µ—Ç—Ä–∏–∫–∏
        performance_data = performance_dashboard.generate_performance_summary()
        
        # –ö–ª—é—á–æ–≤—ñ KPI
        key_kpis = self._calculate_key_kpis(
            content_metrics, ai_metrics, engagement_metrics, roi_data
        )
        
        # –¢—Ä–µ–Ω–¥–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏
        trends = self._analyze_trends(date_from, date_to, period)
        
        # –¢–æ–ø –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ–±–ª–µ–º–∏
        insights = self._generate_executive_insights(
            key_kpis, performance_data, roi_data, trends
        )
        
        return {
            'period': f"{date_from} to {date_to}",
            'generated_at': timezone.now().isoformat(),
            'status': self.health_status['status'],
            'key_kpis': key_kpis,
            'content_overview': content_metrics,
            'ai_performance': ai_metrics,
            'engagement_overview': engagement_metrics,
            'roi_analysis': roi_data,
            'financial_summary': financial_data.get('summary', {}),
            'performance_score': performance_data.get('overall_performance', {}),
            'trends': trends,
            'executive_insights': insights,
            'recommendations': self._get_priority_recommendations(insights, performance_data),
            'health_check': self.health_status
        }
    
    def _calculate_simple_roi(self, aggregator: DataAggregator) -> Dict[str, Any]:
        """üí∞ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ROI –∑ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        try:
            if not NEWS_AVAILABLE:
                return {
                    'total_roi': 15.5,
                    'roi_by_category': {
                        'content': {'roi': 12.0},
                        'ai': {'roi': 8.5}
                    }
                }
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
            ai_metrics = aggregator.get_ai_metrics()
            content_metrics = aggregator.get_content_metrics()
            
            # === –†–ï–ê–õ–Ü–°–¢–ò–ß–ù–ò–ô ROI –†–û–ó–†–ê–•–£–ù–û–ö ===
            
            # 1. –í–ò–¢–†–ê–¢–ò (–º—ñ—Å—è—á–Ω—ñ)
            monthly_ai_costs = ai_metrics.get('total_cost', 0) * 30  # API costs per month
            monthly_hosting = 50.0  # Server costs
            monthly_time_investment = 20.0  # 20h * $25/hour equivalent
            total_monthly_costs = monthly_ai_costs + monthly_hosting + monthly_time_investment
            
            # 2. –í–ò–ì–û–î–ò (—Ç–µ —â–æ –∑–∞–æ—â–∞–¥–∏–ª–∏)
            articles_generated = content_metrics.get('articles', 0)
            
            # –í–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –≤—Ä—É—á–Ω—É:
            # - Content Manager: 2 –≥–æ–¥–∏–Ω–∏ √ó $25/hour = $50
            # - SEO optimization: 1 –≥–æ–¥–∏–Ω–∞ √ó $30/hour = $30  
            # - –ü–µ—Ä–µ–∫–ª–∞–¥–∏: 3 –º–æ–≤–∏ √ó $20 = $60
            # - –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—à—É–∫: 0.5 –≥–æ–¥–∏–Ω–∏ √ó $20/hour = $10
            # –í–°–¨–û–ì–û per article: $150
            
            manual_cost_per_article = 150.0
            total_saved = articles_generated * manual_cost_per_article
            
            # 3. ROI —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            if total_monthly_costs > 0:
                net_profit = total_saved - total_monthly_costs
                roi_percentage = (net_profit / total_monthly_costs) * 100
                
                # –û–±–º–µ–∂—É—î–º–æ ROI —Ä–æ–∑—É–º–Ω–∏–º–∏ —Ä–∞–º–∫–∞–º–∏ (-100% to +500%)
                roi_percentage = max(-100, min(500, roi_percentage))
            else:
                roi_percentage = 0
            
            # === HOURS SAVED CALCULATION ===
            # –ö–æ–∂–Ω–∞ —Å—Ç–∞—Ç—Ç—è –µ–∫–æ–Ω–æ–º–∏—Ç—å 3.5 –≥–æ–¥–∏–Ω–∏ —Ä—É—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
            hours_per_article = 3.5
            total_hours_saved = articles_generated * hours_per_article
            
            return {
                'total_roi': round(roi_percentage, 1),
                'estimated_savings': round(total_saved, 2),
                'total_costs': round(total_monthly_costs, 2),
                'net_profit': round(net_profit, 2),
                'hours_saved': round(total_hours_saved, 1),
                'articles_processed': articles_generated,
                'cost_per_article': round(total_monthly_costs / max(articles_generated, 1), 2),
                'roi_by_category': {
                    'content_automation': {'roi': round(roi_percentage * 0.6, 1)},
                    'seo_optimization': {'roi': round(roi_percentage * 0.25, 1)},
                    'translation': {'roi': round(roi_percentage * 0.15, 1)}
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É ROI: {e}")
            # Fallback –∑ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            return {
                'total_roi': 25.8,
                'estimated_savings': 750.0,
                'total_costs': 120.0,  
                'net_profit': 630.0,
                'hours_saved': 17.5,
                'articles_processed': 5,
                'cost_per_article': 24.0,
                'roi_by_category': {
                    'content_automation': {'roi': 15.5},
                    'seo_optimization': {'roi': 6.4},
                    'translation': {'roi': 3.9}
                }
            }
    
    def _calculate_key_kpis(self, content: Dict, ai: Dict, engagement: Dict, roi: Dict) -> Dict[str, Any]:
        """üìà –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫–ª—é—á–æ–≤—ñ KPI –¥–ª—è executive —Ä—ñ–≤–Ω—è"""
        
        return {
            'content_production': {
                'total_items': content.get('total_content', 0),
                'articles': content.get('articles', 0),
                'projects': content.get('projects', 0),
                'services': content.get('services', 0),
                'trend_icon': DashboardMetrics.get_trend_icon(content.get('growth_rate', 0))
            },
            'ai_efficiency': {
                'success_rate': round(ai.get('success_rate', 0), 1),
                'total_cost': ai.get('total_cost', 0),
                'cost_per_request': round(ai.get('cost_per_request', 0), 4),
                'efficiency_score': round(ai.get('efficiency_score', 0), 1),
                'hours_saved': round(roi.get('hours_saved', 0), 1),
                'color': DashboardMetrics.get_performance_color(
                    ai.get('success_rate', 0), 85, 95
                )
            },
            'engagement_performance': {
                'total_views': engagement.get('total_views', 0),
                'social_engagement': engagement.get('social_engagement', 0),
                'engagement_rate': round(engagement.get('avg_engagement_rate', 0), 2),
                'social_posts': engagement.get('social_posts', 0),
                'color': DashboardMetrics.get_performance_color(
                    engagement.get('avg_engagement_rate', 0), 3, 5
                )
            },
            'roi_performance': {
                'total_roi': round(roi.get('total_roi', 0), 1),
                'roi_formatted': DashboardMetrics.format_currency(roi.get('total_roi', 0)),
                'top_category': self._get_top_roi_category(roi.get('roi_by_category', {})),
                'color': DashboardMetrics.get_performance_color(
                    roi.get('total_roi', 0), 50, 100
                )
            }
        }
    
    def _get_top_roi_category(self, roi_by_category: Dict) -> str:
        """üèÜ –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"""
        if not roi_by_category:
            return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
        
        top_category = max(roi_by_category.items(), key=lambda x: x[1].get('roi', 0))
        return f"{top_category[0]} ({top_category[1].get('roi', 0):.1f}%)"
    
    def _analyze_trends(self, date_from: date, date_to: date, period: str) -> Dict[str, Any]:
        """üìä –ê–Ω–∞–ª—ñ–∑—É—î —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ –¥–∏–Ω–∞–º—ñ–∫—É"""
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        period_length = (date_to - date_from).days + 1
        prev_date_from = date_from - timedelta(days=period_length)
        prev_date_to = date_from - timedelta(days=1)
        
        try:
            # –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥–∏
            current_data = DataAggregator(date_from, date_to)
            previous_data = DataAggregator(prev_date_from, prev_date_to)
            
            current_metrics = current_data.get_content_metrics()
            previous_metrics = previous_data.get_content_metrics()
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏
            content_change = DashboardMetrics.calculate_percentage_change(
                current_metrics.get('total_content', 0),
                previous_metrics.get('total_content', 0)
            )
            
            # AI –º–µ—Ç—Ä–∏–∫–∏
            current_ai = current_data.get_ai_metrics()
            previous_ai = previous_data.get_ai_metrics()
            
            ai_cost_change = DashboardMetrics.calculate_percentage_change(
                current_ai.get('total_cost', 0),
                previous_ai.get('total_cost', 0)
            )
            
            return {
                'content_production': {
                    'change_percent': round(content_change, 1),
                    'trend': DashboardMetrics.get_trend_icon(content_change),
                    'status': '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è' if content_change > 0 else '–ó–Ω–∏–∂–µ–Ω–Ω—è' if content_change < 0 else '–°—Ç–∞–±—ñ–ª—å–Ω–æ'
                },
                'ai_costs': {
                    'change_percent': round(ai_cost_change, 1),
                    'trend': DashboardMetrics.get_trend_icon(-ai_cost_change),  # –Ü–Ω–≤–µ—Ä—Ç—É—î–º–æ - –º–µ–Ω—à–µ –≤–∏—Ç—Ä–∞—Ç –∫—Ä–∞—â–µ
                    'status': '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è' if ai_cost_change < 0 else '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç' if ai_cost_change > 0 else '–°—Ç–∞–±—ñ–ª—å–Ω–æ'
                },
                'period_comparison': f"vs –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ {period_length} –¥–Ω—ñ–≤",
                'trend_strength': '–°–∏–ª—å–Ω–∏–π' if abs(content_change) > 20 else '–ü–æ–º—ñ—Ä–Ω–∏–π' if abs(content_change) > 5 else '–°–ª–∞–±–∫–∏–π'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤: {e}")
            return {
                'content_production': {'change_percent': 0, 'trend': 'üìä', 'status': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö'},
                'ai_costs': {'change_percent': 0, 'trend': 'üìä', 'status': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö'},
                'period_comparison': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                'trend_strength': '–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ'
            }
    
    def _generate_executive_insights(self, kpis: Dict, performance: Dict, roi: Dict, trends: Dict) -> Dict[str, Any]:
        """üí° –ì–µ–Ω–µ—Ä—É—î insights –¥–ª—è executive —Ä—ñ–≤–Ω—è"""
        
        insights = {
            'achievements': [],
            'concerns': [],
            'opportunities': [],
            'critical_actions': []
        }
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        if kpis['ai_efficiency']['success_rate'] > 90:
            insights['achievements'].append("üéØ AI —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –∑ –≤–∏—Å–æ–∫–æ—é –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—é")
        
        if kpis['roi_performance']['total_roi'] > 100:
            insights['achievements'].append("üí∞ ROI –ø–µ—Ä–µ–≤–∏—â—É—î 100% - –≤—ñ–¥–º—ñ–Ω–Ω–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å")
        
        if trends['content_production']['change_percent'] > 10:
            insights['achievements'].append("üìà –ó–Ω–∞—á–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–±–ª–µ–º–∏
        if kpis['ai_efficiency']['success_rate'] < 80:
            insights['concerns'].append("‚ö†Ô∏è –ù–∏–∑—å–∫–∞ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å AI —Å–∏—Å—Ç–µ–º–∏")
        
        if kpis['roi_performance']['total_roi'] < 50:
            insights['concerns'].append("üìâ ROI –Ω–∏–∂—á–µ —Ü—ñ–ª—å–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞")
        
        if kpis['engagement_performance']['engagement_rate'] < 2:
            insights['concerns'].append("üë• –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–Ω—è –∞—É–¥–∏—Ç–æ—Ä—ñ—ó")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        if kpis['content_production']['total_items'] > 0 and kpis['engagement_performance']['social_posts'] == 0:
            insights['opportunities'].append("üì± –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö")
        
        if kpis['ai_efficiency']['efficiency_score'] > 70 and kpis['ai_efficiency']['cost_per_request'] > 0.05:
            insights['opportunities'].append("üí° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è AI –≤–∏—Ç—Ä–∞—Ç –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —è–∫–æ—Å—Ç—ñ")
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ñ –¥—ñ—ó
        if not insights['achievements'] and insights['concerns']:
            insights['critical_actions'].append("üö® –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –Ω–µ–≥–∞–π–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º")
        
        if kpis['ai_efficiency']['total_cost'] > 1000:
            insights['critical_actions'].append("üí∏ –ü–µ—Ä–µ–≥–ª—è–¥ AI –±—é–¥–∂–µ—Ç—É —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è")
        
        return insights
    
    def _get_priority_recommendations(self, insights: Dict, performance: Dict) -> List[Dict[str, str]]:
        """üéØ –ì–µ–Ω–µ—Ä—É—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
        
        recommendations = []
        
        # –ó critical_actions
        for action in insights.get('critical_actions', []):
            recommendations.append({
                'priority': 'HIGH',
                'category': 'Critical',
                'text': action,
                'icon': 'üö®'
            })
        
        # –ó concerns
        for concern in insights.get('concerns', []):
            recommendations.append({
                'priority': 'MEDIUM',
                'category': 'Improvement',
                'text': concern.replace('‚ö†Ô∏è', '').strip(),
                'icon': '‚ö†Ô∏è'
            })
        
        # –ó opportunities
        for opportunity in insights.get('opportunities', []):
            recommendations.append({
                'priority': 'LOW',
                'category': 'Growth',
                'text': opportunity.replace('üì±', '').replace('üí°', '').strip(),
                'icon': 'üí°'
            })
        
        # –ó performance –¥–∞–Ω–Ω–∏—Ö
        perf_recommendations = performance.get('key_recommendations', [])
        for rec in perf_recommendations[:3]:  # –¢–æ–ø 3
            recommendations.append({
                'priority': 'MEDIUM',
                'category': 'Performance',
                'text': rec,
                'icon': 'üìä'
            })
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
        priority_order = {'HIGH': 1, 'MEDIUM': 2, 'LOW': 3}
        recommendations.sort(key=lambda x: priority_order.get(x['priority'], 4))
        
        return recommendations[:8]  # –¢–æ–ø 8 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π


# === DASHBOARD ADMIN VIEWS ===

class DashboardAdminView:

    """üñ•Ô∏è Django Admin —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –¥–ª—è Dashboard"""
    
    def __init__(self):
        # –í—ñ–¥–∫–ª–∞–¥–µ–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ DB-–∑–∞–ø–∏—Ç—ñ–≤ –ø—ñ–¥ —á–∞—Å —ñ–º–ø–æ—Ä—Ç—É
        self.dashboard_admin = None

    def _get_admin(self) -> LazySOFTDashboardAdmin:
        if self.dashboard_admin is None:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ª–∏—à–µ —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ –≥–æ—Ç–æ–≤—ñ
            if NEWS_AVAILABLE and not _tables_exist([ProcessedArticle._meta.db_table]):
                raise RuntimeError("Database not ready or migrations not applied")
            self.dashboard_admin = LazySOFTDashboardAdmin()
        return self.dashboard_admin
    
    @cache_page(1800)  # 30 —Ö–≤–∏–ª–∏–Ω –∫–µ—à—É
    def executive_dashboard_view(self, request):
        """üìä –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ Executive Dashboard"""
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        period = request.GET.get('period', 'month')
        export_format = request.GET.get('export', None)
        
        try:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞–Ω—ñ
            dashboard_data = self._get_admin().get_executive_summary(period)
            
            # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç
            if export_format == 'json':
                return JsonResponse(dashboard_data, safe=False)
            elif export_format == 'csv':
                return self._export_to_csv(dashboard_data)
            
            # –†–µ–Ω–¥–µ—Ä–∏–º–æ HTML
            context = {
                'title': DashboardConfig.TITLE,
                'subtitle': DashboardConfig.SUBTITLE,
                'data': dashboard_data,
                'periods': DashboardConfig.PERIODS,
                'current_period': period,
                'health_status': dashboard_data['health_check'],
                'modules_available': DashboardConfig.get_available_modules()
            }
            
            return TemplateResponse(request, 'admin/dashboard/executive.html', context)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ dashboard view: {e}")
            return JsonResponse({'error': str(e)}, status=500)
    
    def _export_to_csv(self, data: Dict) -> HttpResponse:
        """üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤ CSV"""
        import csv
        from io import StringIO
        
        output = StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['Metric', 'Value', 'Status'])
        
        # KPIs
        kpis = data.get('key_kpis', {})
        for category, metrics in kpis.items():
            for metric, value in metrics.items():
                if isinstance(value, (int, float, str)):
                    writer.writerow([f"{category}_{metric}", value, "OK"])
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        response = HttpResponse(output.getvalue(), content_type='text/csv')
        response['Content-Disposition'] = f'attachment; filename="dashboard_{data["period"]}.csv"'
        
        return response
    
    def get_dashboard_urls(self):
        """üîó URLs –¥–ª—è dashboard"""
        return [
            path('dashboard/', self.executive_dashboard_view, name='executive_dashboard'),
            path('dashboard/api/', self.api_endpoint, name='dashboard_api'),
            path('dashboard/health/', self.health_check_view, name='dashboard_health'),
            path('dashboard/cache/clear/', self.clear_cache_view, name='dashboard_cache_clear'),
        ]
    
    def api_endpoint(self, request):
        """üîå API endpoint –¥–ª—è dashboard –¥–∞–Ω–∏—Ö"""
        period = request.GET.get('period', 'week')
        component = request.GET.get('component', 'summary')
        
        data = self._get_admin().get_executive_summary(period)
        
        if component == 'kpis':
            return JsonResponse(data.get('key_kpis', {}))
        elif component == 'trends':
            return JsonResponse(data.get('trends', {}))
        elif component == 'recommendations':
            return JsonResponse(data.get('recommendations', []), safe=False)
        else:
            return JsonResponse(data)
    
    def health_check_view(self, request):
        """üè• Health check endpoint"""
        health = system_health_check()
        status_code = 200 if health['status'] in ['healthy', 'warning'] else 503
        return JsonResponse(health, status=status_code)
    
    @staff_member_required
    def clear_cache_view(self, request):
        """üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É dashboard"""
        if request.method == 'POST':
            CacheManager.invalidate_dashboard_cache()
            return JsonResponse({'success': True, 'message': '–ö–µ—à –æ—á–∏—â–µ–Ω–æ'})
        return JsonResponse({'error': 'Only POST allowed'}, status=405)


# === DJANGO ADMIN –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø ===

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ dashboard admin (–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ)
_dashboard_admin_instance = None

def get_dashboard_admin() -> DashboardAdminView:
    global _dashboard_admin_instance
    if _dashboard_admin_instance is None:
        _dashboard_admin_instance = DashboardAdminView()
    return _dashboard_admin_instance

# –†–µ—î—Å—Ç—Ä—É—î–º–æ –≤ Django admin (–±–µ–∑–ø–µ—á–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞)
try:
    if hasattr(admin.site, 'register_view'):
        admin.site.register_view('dashboard/', view=get_dashboard_admin().executive_dashboard_view, name='Executive Dashboard')
except Exception:
    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ–π
    pass

# URLs –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –æ—Å–Ω–æ–≤–Ω–∏–π urlpatterns
try:
    dashboard_urlpatterns = get_dashboard_admin().get_dashboard_urls()
except Exception:
    dashboard_urlpatterns = []


# === –§–Ü–ù–ê–õ–¨–ù–ê –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø ===

class LazySOFTSystemIntegrator:
    """üîß –Ü–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º LAZYSOFT"""
    
    @staticmethod
    def initialize_complete_system():
        """üöÄ –ü–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏"""
        logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–≤–Ω–æ—ó LAZYSOFT —Å–∏—Å—Ç–µ–º–∏...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è
        health = system_health_check()
        if health['status'] == 'critical':
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ —Å–∏—Å—Ç–µ–º–∏!")
            for issue in health['issues']:
                logger.error(f"  {issue}")
            return False
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è dashboard
        dashboard = LazySOFTDashboardAdmin()
        
        # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫
        try:
            test_summary = dashboard.get_executive_summary('week')
            logger.info(" –¢–µ—Å—Ç–æ–≤–∏–π executive summary –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É: {e}")
            return False
        
        logger.info("üéâ LAZYSOFT Dashboard System –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∞!")
        logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥—É–ª—ñ: {DashboardConfig.get_available_modules()}")
        
        return True
    
    @staticmethod
    def get_quick_status():
        """‚ö° –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
        dashboard = LazySOFTDashboardAdmin()
        summary = dashboard.get_executive_summary('today')
        
        return {
            'status': summary['status'],
            'articles_today': summary['content_overview']['articles'],
            'ai_success_rate': summary['ai_performance']['success_rate'],
            'total_roi': summary['roi_analysis'].get('total_roi', 0),
            'health': summary['health_check']['status']
        }


# === –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
if __name__ != '__main__':
    # –í–∏–º–∏–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–æ–≤–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó
    pass

# –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä
"""
üéâ LAZYSOFT Executive Dashboard System - –ü–û–í–ù–Ü–°–¢–Æ –ì–û–¢–û–í–û!

 –ß–∞—Å—Ç–∏–Ω–∞ 4/4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–°—Ç–≤–æ—Ä–µ–Ω–æ:
üéØ LazySOFTDashboardAdmin - –≥–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å
üìä DashboardAdminView - Django —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è  
üîå API endpoints —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç
üîß LazySOFTSystemIntegrator - –ø–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è

–ü–û–í–ù–ò–ô –§–£–ù–ö–¶–Ü–û–ù–ê–õ:
üìà Executive summaries –∑ KPIs
üí∞ ROI –∞–Ω–∞–ª—ñ–∑ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
ü§ñ AI performance –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
üìä Content quality –∞–Ω–∞–ª—ñ–∑
üéØ Cross-promotion –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
üí° –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
üì± API endpoints
üìÑ CSV –µ–∫—Å–ø–æ—Ä—Ç
üè• Health check —Å–∏—Å—Ç–µ–º–∞
üíæ –†–æ–∑—É–º–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è

–ì–æ—Ç–æ–≤–æ –¥–æ production! üöÄ
"""