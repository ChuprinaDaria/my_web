import os
import requests
import logging
from typing import Optional, Dict, Any
from django.conf import settings
from datetime import datetime

logger = logging.getLogger(__name__)

class AsanaService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Asana API"""
    
    def __init__(self):
        self.token = settings.ASANA_TOKEN or os.getenv('ASANA_TOKEN')
        self.workspace_id = settings.ASANA_WORKSPACE_ID or os.getenv('ASANA_WORKSPACE_ID')
        self.project_id = settings.ASANA_PROJECT_ID or os.getenv('ASANA_PROJECT_ID')
        
        if not all([self.token, self.workspace_id, self.project_id]):
            logger.error("Asana credentials not configured properly")
            raise ValueError("Missing Asana credentials in settings")
        
        self.headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json',
        }
        self.base_url = 'https://app.asana.com/api/1.0'
    
    def create_lead_task(self, submission) -> Optional[str]:
        """
        –°—Ç–≤–æ—Ä—é—î —Ç–∞—Å–∫ –≤ Asana –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞
        
        Args:
            submission: ContactSubmission instance
            
        Returns:
            str: Asana task ID –∞–±–æ None —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        try:
            # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞—Å–∫–∞
            task_name = f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞: {submission.name} - {submission.subject}"
            
            # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏
            task_description = self._build_task_description(submission)
            
            # –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞—Å–∫–∞
            task_data = {
                "data": {
                    "name": task_name,
                    "notes": task_description,
                    "projects": [self.project_id],
                    "workspace": self.workspace_id,
                    # –î–æ–¥–∞—î–º–æ –¥–µ–¥–ª–∞–π–Ω - 7 –¥–Ω—ñ–≤ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    "due_on": (submission.created_at.date() + 
                              __import__('datetime').timedelta(days=7)).isoformat(),
                    # –î–æ–¥–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
                    "priority": self._get_priority_based_on_company(submission.company),
                    # "tags": self._get_tags_for_submission(submission)  # –í–∏–¥–∞–ª—è—î–º–æ —Ü—é –ª—ñ–Ω—ñ—é
                }
            }
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Asana API
            response = requests.post(
                f'{self.base_url}/tasks',
                headers=self.headers,
                json=task_data,
                timeout=10
            )
            
            if response.status_code == 201:
                task_id = response.json()['data']['gid']
                logger.info(f"Asana task created successfully: {task_id}")
                return task_id
            else:
                logger.error(f"Asana API error: {response.status_code} - {response.text}")
                return None
                
        except requests.RequestException as e:
            logger.error(f"Network error creating Asana task: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error creating Asana task: {e}")
            return None

    def create_quote_task(self, quote_request) -> Optional[str]:
        try:
            task_name = f"–ó–∞–ø–∏—Ç –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫—É: {getattr(quote_request, 'client_name', '–ö–ª—ñ—î–Ω—Ç')}"
            details = []
            details.append(f"‚Ä¢ –Ü–º'—è: {getattr(quote_request, 'client_name', '')}")
            details.append(f"‚Ä¢ Email: {getattr(quote_request, 'client_email', '')}")
            details.append(f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {getattr(quote_request, 'client_phone', '')}")
            details.append(f"‚Ä¢ –ö–æ–º–ø–∞–Ω—ñ—è: {getattr(quote_request, 'client_company', '')}")
            details.append("")
            details.append("üìù –ó–∞–ø–∏—Ç:")
            details.append(getattr(quote_request, 'original_query', ''))
            details.append("")
            details.append("üìä –ú–µ—Ç–∞-–¥–∞–Ω—ñ:")
            details.append(f"‚Ä¢ Session ID: {getattr(quote_request, 'session_id', '')}")
            details.append(f"‚Ä¢ IP: {getattr(quote_request, 'ip_address', '')}")
            details.append(f"‚Ä¢ User Agent: {getattr(quote_request, 'user_agent', '')[:200]}")
            task_description = "\n".join(details)

            task_data = {
                "data": {
                    "name": task_name,
                    "notes": task_description,
                    "projects": [self.project_id],
                    "workspace": self.workspace_id,
                    "due_on": (__import__('datetime').date.today() + __import__('datetime').timedelta(days=3)).isoformat(),
                }
            }

            response = requests.post(
                f'{self.base_url}/tasks',
                headers=self.headers,
                json=task_data,
                timeout=10
            )

            if response.status_code == 201:
                return response.json()['data']['gid']
            else:
                logger.error(f"Asana API error (quote): {response.status_code} - {response.text}")
                return None
        except Exception as e:
            logger.error(f"Error creating Asana quote task: {e}")
            return None

    def create_generic_task(self, name: str, notes: str, due_days: int = 3) -> Optional[str]:
        try:
            task_data = {
                "data": {
                    "name": name,
                    "notes": notes,
                    "projects": [self.project_id],
                    "workspace": self.workspace_id,
                    "due_on": (__import__('datetime').date.today() + __import__('datetime').timedelta(days=due_days)).isoformat(),
                }
            }
            response = requests.post(
                f"{self.base_url}/tasks",
                headers=self.headers,
                json=task_data,
                timeout=10
            )
            if response.status_code == 201:
                return response.json()['data']['gid']
            logger.error(f"Asana API error (generic): {response.status_code} - {response.text}")
            return None
        except Exception as e:
            logger.error(f"Error creating generic Asana task: {e}")
            return None
    
    def update_task_status(self, task_id: str, status: str) -> bool:
        """
        –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Ç–∞—Å–∫–∞ –≤ Asana
        
        Args:
            task_id: ID —Ç–∞—Å–∫–∞ –≤ Asana
            status: –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å (new, contacted, qualified, etc.)
            
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            # –ú–∞–ø–∏–º–æ Django —Å—Ç–∞—Ç—É—Å–∏ –Ω–∞ Asana
            status_mapping = {
                'new': ' –ù–æ–≤–∏–π –ª—ñ–¥',
                'contacted': 'üìû –ó–≤\'—è–∑–∞–ª–∏—Å—å',
                'qualified': '‚úÖ –ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π',
                'proposal_sent': 'üìã –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é',
                'negotiation': 'üí¨ –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∏',
                'closed_won': 'üéâ –ó–∞–∫—Ä–∏—Ç–æ —É—Å–ø—ñ—à–Ω–æ',
                'closed_lost': '‚ùå –ó–∞–∫—Ä–∏—Ç–æ –Ω–µ—É—Å–ø—ñ—à–Ω–æ',
            }
            
            asana_status = status_mapping.get(status, status)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É —Ç–∞—Å–∫–∞ –∑ –Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
            update_data = {
                "data": {
                    "name": f"[{asana_status}] {self._get_original_task_name(task_id)}"
                }
            }
            
            response = requests.put(
                f'{self.base_url}/tasks/{task_id}',
                headers=self.headers,
                json=update_data,
                timeout=10
            )
            
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"Error updating Asana task status: {e}")
            return False
    
    def add_task_comment(self, task_id: str, comment: str) -> bool:
        """–î–æ–¥–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Ç–∞—Å–∫–∞"""
        try:
            comment_data = {
                "data": {
                    "text": comment,
                    "target": task_id
                }
            }
            
            response = requests.post(
                f'{self.base_url}/stories',
                headers=self.headers,
                json=comment_data,
                timeout=10
            )
            
            return response.status_code == 201
            
        except Exception as e:
            logger.error(f"Error adding Asana comment: {e}")
            return False
    
    def _build_task_description(self, submission) -> str:
        """–§–æ—Ä–º—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–∞—Å–∫–∞ –∑ —É—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏"""
        
        # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
        description = f"""
üìß –ö–û–ù–¢–ê–ö–¢–ù–Ü –î–ê–ù–Ü:
‚Ä¢ –Ü–º'—è: {submission.name}
‚Ä¢ Email: {submission.email}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {submission.phone or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ö–æ–º–ø–∞–Ω—ñ—è: {submission.company or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üìù –ó–ê–ü–ò–¢:
‚Ä¢ –¢–µ–º–∞: {submission.subject}
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
{submission.message}

üéØ CTA –¢–†–ï–ö–Ü–ù–ì:
‚Ä¢ CTA –¥–∂–µ—Ä–µ–ª–æ: {submission.cta_source or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –°—Ç–æ—Ä—ñ–Ω–∫–∞: {submission.page_url or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Session ID: {submission.session_id or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üìä –ú–ï–¢–ê-–î–ê–ù–Ü:
‚Ä¢ –î–∂–µ—Ä–µ–ª–æ: {submission.referred_from or 'contact_page'}
‚Ä¢ –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {submission.created_at.strftime('%d.%m.%Y –æ %H:%M')}
‚Ä¢ IP –∞–¥—Ä–µ—Å–∞: {submission.ip_address or '–ù–µ–≤—ñ–¥–æ–º–∞'}
‚Ä¢ User Agent: {submission.user_agent[:100] + '...' if submission.user_agent and len(submission.user_agent) > 100 else submission.user_agent or '–ù–µ–≤—ñ–¥–æ–º–æ'}

üéØ –®–í–ò–î–ö–Ü –î–Ü–á:
‚ñ° –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É
‚ñ° –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ welcome email
‚ñ° –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
‚ñ° –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á
""".encode('utf-8').decode('utf-8')
        
        return description.strip()
    
    def _get_priority_based_on_company(self, company: Optional[str]) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–ø–∞–Ω—ñ—ó"""
        if not company:
            return "medium"
        
        # –Ø–∫—â–æ –∫–æ–º–ø–∞–Ω—ñ—è –≤–µ–ª–∏–∫–∞ –∞–±–æ –≤—ñ–¥–æ–º–∞ - –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        big_companies = ['google', 'microsoft', 'apple', 'amazon', 'facebook', 'meta']
        if any(big_comp in company.lower() for big_comp in big_companies):
            return "high"
        
        return "medium"
    
    def _get_tags_for_submission(self, submission) -> list:
        """–ì–µ–Ω–µ—Ä—É—î —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏"""
        tags = []
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç–µ–≥–∏ - –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å –≤ –ê—Å–∞–Ω—ñ
        # if submission.referred_from:
        #     tags.append(f"source_{submission.referred_from}")
        
        # –¢—ñ–ª—å–∫–∏ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–º–∏ (—è–∫—â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å –≤ –ê—Å–∞–Ω—ñ)
        subject_lower = submission.subject.lower()
        if any(word in subject_lower for word in ['ai', '—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è']):
            # tags.append("ai_services")  # –ö–æ–º–µ–Ω—Ç—É—î–º–æ –ø–æ–∫–∏ –Ω–µ —Å—Ç–≤–æ—Ä–∏—à —Ç–µ–≥ –≤ –ê—Å–∞–Ω—ñ
            pass
        elif any(word in subject_lower for word in ['—Å–∞–π—Ç', 'website', '—Ä–æ–∑—Ä–æ–±–∫–∞']):
            # tags.append("web_development")  # –ö–æ–º–µ–Ω—Ç—É—î–º–æ –ø–æ–∫–∏ –Ω–µ —Å—Ç–≤–æ—Ä–∏—à —Ç–µ–≥ –≤ –ê—Å–∞–Ω—ñ
            pass
        
        return []  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∏ —â–æ
    
    def _get_original_task_name(self, task_id: str) -> str:
        """–û—Ç—Ä–∏–º—É—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É —Ç–∞—Å–∫–∞ –±–µ–∑ —Å—Ç–∞—Ç—É—Å—É"""
        try:
            response = requests.get(
                f'{self.base_url}/tasks/{task_id}',
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                current_name = response.json()['data']['name']
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å —è–∫—â–æ –≤—ñ–Ω —î
                if current_name.startswith('[') and ']' in current_name:
                    return current_name.split('] ', 1)[1]
                return current_name
            
        except Exception as e:
            logger.error(f"Error getting task name: {e}")
        
        return "–ó–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É"  # Fallback


# –ó–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ singleton
try:
    asana_service = AsanaService()
except Exception as e:
    asana_service = None
    logger.warning(f"‚ö†Ô∏è Asana service not initialized: {e}")
