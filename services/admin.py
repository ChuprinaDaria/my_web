from django.contrib import admin
from django import forms
from django.utils.html import format_html
from ckeditor_uploader.widgets import CKEditorUploadingWidget

from .models import (
    Service,
    ServiceCategory,
    ServiceFeature,
    ServiceOverview,
    FAQ
)

# --- –§–æ—Ä–º–∏ –∑ CKEditor ---
class ServiceAdminForm(forms.ModelForm):
    description_en = forms.CharField(widget=CKEditorUploadingWidget())
    description_uk = forms.CharField(widget=CKEditorUploadingWidget())
    description_pl = forms.CharField(widget=CKEditorUploadingWidget())
    
    short_description_en = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    short_description_uk = forms.CharField(widget=CKEditorUploadingWidget(), required=False)
    short_description_pl = forms.CharField(widget=CKEditorUploadingWidget(), required=False)

    # üÜï –ü–û–ö–†–ê–©–ï–ù–ù–Ø –¥–ª—è —Ç–µ–≥—ñ–≤
    tags = forms.ModelMultipleChoiceField(
        queryset=None,  # –í—Å—Ç–∞–Ω–æ–≤–∏–º–æ –≤ __init__
        widget=admin.widgets.FilteredSelectMultiple('–¢–µ–≥–∏', False),
        required=False,
        help_text="–û–±–µ—Ä—ñ—Ç—å —Ç–µ–≥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—ñ —á–µ—Ä–µ–∑ /admin/core/tag/"
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–µ–≥–∏
        try:
            from core.models import Tag
            self.fields['tags'].queryset = Tag.objects.filter(is_active=True).order_by('name')
        except:
            # –Ø–∫—â–æ –º–æ–¥–µ–ª—å Tag –Ω–µ —ñ—Å–Ω—É—î
            pass

    class Meta:
        model = Service
        fields = '__all__'

class FAQAdminForm(forms.ModelForm):
    answer_en = forms.CharField(widget=CKEditorUploadingWidget())
    answer_uk = forms.CharField(widget=CKEditorUploadingWidget())
    answer_pl = forms.CharField(widget=CKEditorUploadingWidget())

    class Meta:
        model = FAQ
        fields = '__all__'

class ServiceOverviewAdminForm(forms.ModelForm):
    description_en = forms.CharField(widget=CKEditorUploadingWidget())
    description_uk = forms.CharField(widget=CKEditorUploadingWidget())
    description_pl = forms.CharField(widget=CKEditorUploadingWidget())

    class Meta:
        model = ServiceOverview
        fields = '__all__'

# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–¥–µ–ª–µ–π ---

@admin.register(Service)
class ServiceAdmin(admin.ModelAdmin):
    form = ServiceAdminForm
    
    # üè∑Ô∏è –û–ù–û–í–õ–ï–ù–ò–ô —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ù–û–í–ò–ú–ò –¢–ï–ì–ê–ú–ò
    list_display = (
        "title_en", 
        "category", 
        "get_tags_display",      # üÜï –ù–û–í–Ü –¢–ï–ì–ò
        "get_priority_display",  # üÜï –ü–†–Ü–û–†–ò–¢–ï–¢
        "is_featured", 
        "is_active",
        "get_cross_stats",       # üÜï –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–†–û–°-–ü–†–û–ú–û–¶–Ü–á
        "date_created"
    )
    
    list_editable = ("is_featured", "is_active")
    
    # üîç –û–ù–û–í–õ–ï–ù–Ü —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ –ù–û–í–ò–ú–ò –¢–ï–ì–ê–ú–ò
    list_filter = (
        "tags",                  # üÜï –§–Ü–õ–¨–¢–† –ü–û –ù–û–í–ò–ú –¢–ï–ì–ê–ú
        "category", 
        "priority",              # üÜï –§–Ü–õ–¨–¢–† –ü–û –ü–†–Ü–û–†–ò–¢–ï–¢–£
        "is_featured",
        "is_active",
        "date_created"
    )
    
    # üîç –û–ù–û–í–õ–ï–ù–ò–ô –ø–æ—à—É–∫
    search_fields = (
        "title_en", "title_uk", "title_pl",
        "tags__name_en", "tags__name_uk", "tags__name_pl",  # üÜï –ü–û–®–£–ö –ü–û –¢–ï–ì–ê–ú
        "description_en", "description_uk", "description_pl"
    )
    
    prepopulated_fields = {"slug": ("title_en",)}
    
    # üè∑Ô∏è –û–ù–û–í–õ–ï–ù–ê —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—ñ–≤ –∑ –ù–û–í–û–Æ –°–ò–°–¢–ï–ú–û–Æ –¢–ï–ì–Ü–í
    fieldsets = (
        ("üìù Basic Information", {
            "fields": ("title_en", "title_uk", "title_pl", "slug", "category", "icon")
        }),
        
        ("üè∑Ô∏è –ù–û–í–ê –°–ò–°–¢–ï–ú–ê –¢–ï–ì–Ü–í - –ö—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—è", {
            "fields": ("tags",),
            "classes": ("wide",),
            "description": "üéØ –û–±–µ—Ä—ñ—Ç—å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∫—Ä–æ—Å-–≤–∏–¥–∞—á—ñ –∑ –Ω–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ –ø—Ä–æ—î–∫—Ç–∞–º–∏!"
        }),
        
        ("üìä –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è", {
            "fields": (
                ("priority", "is_featured"),
                "order"
            ),
            "classes": ("wide",),
            "description": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É —Ç–∞ –ø–æ—Ä—è–¥–∫—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É"
        }),
        
        ("üìÑ Service Content", {
            "fields": (
                ("short_description_en", "short_description_uk", "short_description_pl"),
                ("description_en", "description_uk", "description_pl"),
            ),
            "classes": ("collapse",)
        }),
        
        ("üîç SEO", {
            "fields": (
                ("seo_title_en", "seo_title_uk", "seo_title_pl"),
                ("seo_description_en", "seo_description_uk", "seo_description_pl")
            ),
            "classes": ("collapse",)
        }),
        
        ("‚öôÔ∏è Status", {
            "fields": ("is_active",),
            "classes": ("wide",)
        }),
    )
    
    # üÜï –ù–û–í–Ü –º–µ—Ç–æ–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    def get_tags_display(self, obj):
        """üè∑Ô∏è –ü–æ–∫–∞–∑—É—î –ù–û–í–Ü –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ–≥–∏ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏"""
        tags = obj.tags.filter(is_active=True)
        if not tags.exists():
            return format_html('<span style="color: #6c757d;">‚ö™ –ù–µ–º–∞—î —Ç–µ–≥—ñ–≤</span>')
        
        tag_html = []
        for tag in tags[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 3 —Ç–µ–≥–∏
            tag_html.append(format_html(
                '<span style="background: {}; color: white; padding: 2px 6px; '
                'border-radius: 8px; font-size: 11px; margin-right: 4px;">'
                '{} {}</span>',
                tag.color, tag.emoji, tag.get_name('uk')
            ))
        
        if tags.count() > 3:
            tag_html.append(format_html('<span style="color: #6c757d;">+{}</span>', tags.count() - 3))
        
        return format_html(''.join(tag_html))
    get_tags_display.short_description = "üè∑Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ–≥–∏"
    
    def get_priority_display(self, obj):
        """üìä –ü–æ–∫–∞–∑—É—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑ –µ–º–æ–¥–∑—ñ"""
        emoji = obj.get_priority_emoji()
        priority_colors = {
            1: '#6c757d',  # –°—ñ—Ä–∏–π
            2: '#007bff',  # –°–∏–Ω—ñ–π
            3: '#ffc107',  # –ñ–æ–≤—Ç–∏–π
            4: '#fd7e14',  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
            5: '#dc3545',  # –ß–µ—Ä–≤–æ–Ω–∏–π
        }
        color = priority_colors.get(obj.priority, '#007bff')
        
        return format_html(
            '<span style="color: {}; font-weight: bold; font-size: 14px;">{} {}</span>',
            color, emoji, obj.get_priority_display().title()
        )
    get_priority_display.short_description = "üìä –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
    
    def get_cross_stats(self, obj):
        """üîó –ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"""
        articles_count = obj.get_related_articles().count()
        projects_count = obj.get_related_projects().count()
        
        if articles_count == 0 and projects_count == 0:
            return format_html('<span style="color: #6c757d;">‚Äî</span>')
        
        stats_html = []
        if articles_count > 0:
            stats_html.append(format_html(
                '<span style="color: #007bff;">üì∞{}</span>', articles_count
            ))
        if projects_count > 0:
            stats_html.append(format_html(
                '<span style="color: #28a745;">üöÄ{}</span>', projects_count
            ))
        
        return format_html(' | '.join(stats_html))
    get_cross_stats.short_description = "üîó –ö—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—è"
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('category').prefetch_related('tags')
    
    # üéØ –ù–û–í–Ü –¥—ñ—ó –≤ –∞–¥–º—ñ–Ω—Ü—ñ
    actions = [
        'mark_as_featured', 
        'set_high_priority',
        'auto_assign_tags_from_content',  # üÜï –ù–û–í–ê –î–Ü–Ø
        'show_cross_promotion_stats'      # üÜï –ù–û–í–ê –î–Ü–Ø
    ]
    
    def mark_as_featured(self, request, queryset):
        """‚ú® –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ"""
        updated = queryset.update(is_featured=True)
        self.message_user(request, f'‚ú® {updated} —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ.')
    mark_as_featured.short_description = "‚ú® –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ"
    
    def set_high_priority(self, request, queryset):
        """üî• –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"""
        updated = queryset.update(priority=4)
        self.message_user(request, f'üî• {updated} —Å–µ—Ä–≤—ñ—Å—ñ–≤ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç.')
    set_high_priority.short_description = "üî• –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
    
    # üÜï –ù–û–í–Ü –¥—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ–≥–∞–º–∏
    def auto_assign_tags_from_content(self, request, queryset):
        """ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        updated_count = 0
        for service in queryset:
            assigned_tags = service.auto_assign_tags_from_content()
            if assigned_tags:
                updated_count += 1
        
        self.message_user(
            request, 
            f"üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ —Ç–µ–≥–∏ –¥–ª—è {updated_count} —Å–µ—Ä–≤—ñ—Å—ñ–≤"
        )
    auto_assign_tags_from_content.short_description = "ü§ñ –ê–≤—Ç–æ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É"
    
    def show_cross_promotion_stats(self, request, queryset):
        """üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"""
        stats = []
        for service in queryset:
            related_articles = service.get_related_articles()
            related_projects = service.get_related_projects()
            tags_count = service.tags.count()
            
            stats.append(f"'{service.title_en}': {tags_count} —Ç–µ–≥—ñ–≤, "
                        f"{related_articles.count()} –Ω–æ–≤–∏–Ω, "
                        f"{related_projects.count()} –ø—Ä–æ—î–∫—Ç—ñ–≤")
        
        stats_text = "<br>".join(stats[:10])  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
        
        self.message_user(
            request,
            format_html(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó:<br>{stats_text}"),
        )
    show_cross_promotion_stats.short_description = "üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó"

    def formfield_for_manytomany(self, db_field, request, **kwargs):
        if db_field.name == "tags":
            kwargs["help_text"] = format_html(
                'üè∑Ô∏è –û–±–µ—Ä—ñ—Ç—å —Ç–µ–≥–∏ –∞–±–æ <a href="/admin/core/tag/add/" target="_blank" '
                'style="background: #007bff; color: white; padding: 4px 8px; '
                'border-radius: 4px; text-decoration: none;">+ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–≥</a>'
            )
        return super().formfield_for_manytomany(db_field, request, **kwargs)

@admin.register(ServiceCategory)
class ServiceCategoryAdmin(admin.ModelAdmin):
    list_display = ("slug", "title_en", "services_count", "projects_count")
    prepopulated_fields = {"slug": ("title_en",)}
    
    def services_count(self, obj):
        return format_html(
            '<span style="color: #007bff; font-weight: bold;">üîß {}</span>', 
            obj.services.count()
        )
    services_count.short_description = "Services"
    
    def projects_count(self, obj):
        return format_html(
            '<span style="color: #28a745; font-weight: bold;">üöÄ {}</span>', 
            obj.projects.count()
        )
    projects_count.short_description = "Projects"


@admin.register(FAQ)
class FAQAdmin(admin.ModelAdmin):
    form = FAQAdminForm
    list_display = ("question_en", "order", "is_active")
    list_editable = ("order", "is_active")
    search_fields = ("question_en", "question_uk", "question_pl")
    list_filter = ("is_active",)
    
    fieldsets = (
        ("üìù Question", {
            "fields": ("question_en", "question_uk", "question_pl")
        }),
        ("üí¨ Answer", {
            "fields": ("answer_en", "answer_uk", "answer_pl")
        }),
        ("‚öôÔ∏è Settings", {
            "fields": ("order", "is_active")
        }),
    )


@admin.register(ServiceFeature)
class ServiceFeatureAdmin(admin.ModelAdmin):
    list_display = ("get_icon_display", "title_en", "order", "is_active")
    list_editable = ("order", "is_active")
    search_fields = ("title_en", "title_uk", "title_pl")
    list_filter = ("is_active",)
    
    fieldsets = (
        ("üé® Visual", {
            "fields": ("icon", "order")
        }),
        ("üìù Content", {
            "fields": ("title_en", "title_uk", "title_pl")
        }),
        ("‚öôÔ∏è Status", {
            "fields": ("is_active",)
        }),
    )
    
    def get_icon_display(self, obj):
        """–ü–æ–∫–∞–∑—É—î —ñ–∫–æ–Ω–∫—É –∑ –Ω–∞–∑–≤–æ—é"""
        return format_html(
            '<span style="font-family: monospace; background: #f8f9fa; '
            'padding: 2px 6px; border-radius: 4px;">{}</span>',
            obj.icon or '‚Äî'
        )
    get_icon_display.short_description = "üé® Icon"


@admin.register(ServiceOverview)
class ServiceOverviewAdmin(admin.ModelAdmin):
    form = ServiceOverviewAdminForm
    list_display = ("title_en", "seo_title", "has_og_image")
    
    fieldsets = (
        ("üìù Content", {
            "fields": ("title_en", "title_uk", "title_pl")
        }),
        ("üìÑ Description", {
            "fields": ("description_en", "description_uk", "description_pl"),
            "classes": ("collapse",)
        }),
        ("üîç SEO", {
            "fields": ("seo_title", "seo_description", "og_image"),
            "classes": ("collapse",)
        }),
    )
    
    def has_og_image(self, obj):
        """–ü–æ–∫–∞–∑—É—î —á–∏ —î OG –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if obj.og_image:
            return format_html('<span style="color: #28a745;">‚úÖ –Ñ</span>')
        return format_html('<span style="color: #6c757d;">‚ùå –ù–µ–º–∞—î</span>')
    has_og_image.short_description = "üñºÔ∏è OG Image"