from django.db import models
from ckeditor.fields import RichTextField
from django.utils.text import slugify


class ServiceCategory(models.Model):
    slug = models.SlugField(unique=True)
    title_en = models.CharField(max_length=255)
    title_uk = models.CharField(max_length=255)
    title_pl = models.CharField(max_length=255)

    description_en = RichTextField(blank=True, null=True)
    description_uk = RichTextField(blank=True, null=True)
    description_pl = RichTextField(blank=True, null=True)

    short_description_en = models.TextField(blank=True, null=True)
    short_description_uk = models.TextField(blank=True, null=True)
    short_description_pl = models.TextField(blank=True, null=True)

    seo_title_en = models.CharField(max_length=255, blank=True, null=True)
    seo_title_uk = models.CharField(max_length=255, blank=True, null=True)
    seo_title_pl = models.CharField(max_length=255, blank=True, null=True)
    seo_description_en = models.TextField(blank=True, null=True)
    seo_description_uk = models.TextField(blank=True, null=True)
    seo_description_pl = models.TextField(blank=True, null=True)

    video_url = models.URLField(blank=True, null=True)
    video_file = models.FileField(upload_to="services/videos/", blank=True, null=True)

    gallery_image_1 = models.ImageField(upload_to="services/gallery/", blank=True, null=True)
    gallery_image_2 = models.ImageField(upload_to="services/gallery/", blank=True, null=True)
    gallery_image_3 = models.ImageField(upload_to="services/gallery/", blank=True, null=True)
    gallery_image_4 = models.ImageField(upload_to="services/gallery/", blank=True, null=True)

    target_audience_en = RichTextField(blank=True, null=True)
    target_audience_uk = RichTextField(blank=True, null=True)
    target_audience_pl = RichTextField(blank=True, null=True)

    pricing_en = RichTextField(blank=True, null=True)
    pricing_uk = RichTextField(blank=True, null=True)
    pricing_pl = RichTextField(blank=True, null=True)

    value_proposition_en = RichTextField(blank=True, null=True)
    value_proposition_uk = RichTextField(blank=True, null=True)
    value_proposition_pl = RichTextField(blank=True, null=True)

    icon = models.ImageField(upload_to="services/icons/", blank=True, null=True)
    
    main_image = models.ImageField(
        upload_to='services/main/', 
        null=True, blank=True,
        verbose_name="–ì–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
        help_text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 400x250px"
    )
    
    cta_text_en = models.CharField(max_length=50, default="Learn More")
    cta_text_uk = models.CharField(max_length=50, default="–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ") 
    cta_text_pl = models.CharField(max_length=50, default="Dowiedz siƒô wiƒôcej")
    
    cta_url = models.URLField(blank=True, null=True, help_text="–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è CTA –∫–Ω–æ–ø–∫–∏")
    
    is_featured = models.BooleanField(default=False)
    PRIORITY_CHOICES = [
        (1, '–ù–∏–∑—å–∫–∏–π'),
        (2, '–ó–≤–∏—á–∞–π–Ω–∏–π'),
        (3, '–í–∏—Å–æ–∫–∏–π'),
        (4, '–ö—Ä–∏—Ç–∏—á–Ω–∏–π'),
        (5, '–¢–æ–ø —Å–µ—Ä–≤—ñ—Å')
    ]
    priority = models.PositiveIntegerField(choices=PRIORITY_CHOICES, default=2)
    order = models.PositiveIntegerField(default=0)
    tags = models.ManyToManyField('core.Tag', blank=True, related_name='service_categories')
    date_created = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "Service"
        verbose_name_plural = "Services"
        ordering = ['-priority','-order','-date_created']
        indexes = [
            models.Index(fields=['is_featured', 'priority']),
            models.Index(fields=['slug']),
            models.Index(fields=['date_created']),
        ]

    def __str__(self):
        return self.title_en

    def get_title(self, lang='uk'):
        return getattr(self, f'title_{lang}', self.title_en)

    def get_desc(self, lang='uk'):
        return getattr(self, f'description_{lang}', None)

    def get_short(self, lang='uk'):
        return getattr(self, f'short_description_{lang}', None)

    def get_seo_title(self, lang='uk'):
        v = getattr(self, f'seo_title_{lang}', None)
        return v or self.get_title(lang)

    def get_seo_desc(self, lang='uk'):
        v = getattr(self, f'seo_description_{lang}', None)
        return v or (self.get_short(lang) or '')

    def get_audience(self, lang='uk'):
        return getattr(self, f'target_audience_{lang}', None)

    def get_pricing(self, lang='uk'):
        return getattr(self, f'pricing_{lang}', None)

    def get_value(self, lang='uk'):
        return getattr(self, f'value_proposition_{lang}', None)

    def get_priority_emoji(self):
        m = {1:'‚ö™',2:'üîµ',3:'üü°',4:'üü†',5:'üî¥'}
        return m.get(self.priority,'üîµ')

    def get_gallery_images(self):
        images = []
        if self.gallery_image_1:
            images.append(self.gallery_image_1)
        if self.gallery_image_2:
            images.append(self.gallery_image_2)
        if self.gallery_image_3:
            images.append(self.gallery_image_3)
        if self.gallery_image_4:
            images.append(self.gallery_image_4)
        return images


class Service(models.Model):
    slug = models.SlugField(max_length=255, unique=True)

    category = models.ForeignKey(
        ServiceCategory,
        on_delete=models.CASCADE,
        related_name='services',
        null=False,
        blank=False
    )

    title_en = models.CharField(max_length=255)
    title_uk = models.CharField(max_length=255)
    title_pl = models.CharField(max_length=255)

    short_description_en = RichTextField(blank=True, null=True)
    short_description_uk = RichTextField(blank=True, null=True)
    short_description_pl = RichTextField(blank=True, null=True)

    description_en = RichTextField()
    description_uk = RichTextField()
    description_pl = RichTextField()

    icon = models.ImageField(upload_to="services/icons/", blank=True, null=True)

    seo_title_en = models.CharField(max_length=255)
    seo_title_uk = models.CharField(max_length=255, blank=True, null=True)
    seo_title_pl = models.CharField(max_length=255, blank=True, null=True)

    seo_description_en = RichTextField(default="To be added")
    seo_description_uk = RichTextField(blank=True, null=True)
    seo_description_pl = RichTextField(blank=True, null=True)

    is_active = models.BooleanField(default=True)
    date_created = models.DateTimeField(auto_now_add=True)

    # üè∑Ô∏è –ù–û–í–ê –°–ò–°–¢–ï–ú–ê –í–ù–£–¢–†–Ü–®–ù–Ü–• –¢–ï–ì–Ü–í –¥–ª—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
    tags = models.ManyToManyField(
        'core.Tag',
        blank=True,
        related_name='services',
        help_text="–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ–≥–∏ –¥–ª—è –∫—Ä–æ—Å-–≤–∏–¥–∞—á—ñ –∑ –Ω–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ –ø—Ä–æ—î–∫—Ç–∞–º–∏"
    )

    # üìä –ù–û–í–Ü –ø–æ–ª—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    PRIORITY_CHOICES = [
        (1, '–ù–∏–∑—å–∫–∏–π'),
        (2, '–ó–≤–∏—á–∞–π–Ω–∏–π'),
        (3, '–í–∏—Å–æ–∫–∏–π'),
        (4, '–ö—Ä–∏—Ç–∏—á–Ω–∏–π'),
        (5, '–¢–æ–ø —Å–µ—Ä–≤—ñ—Å'),
    ]
    priority = models.PositiveIntegerField(
        choices=PRIORITY_CHOICES,
        default=2,
        help_text="–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"
    )

    is_featured = models.BooleanField(
        default=False, 
        help_text="–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"
    )

    order = models.PositiveIntegerField(
        default=0, 
        help_text="–ü–æ—Ä—è–¥–æ–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
    )

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title_uk)
        super().save(*args, **kwargs)

    class Meta:
        verbose_name = "Service"
        verbose_name_plural = "Services"
        ordering = ['-priority', '-order', '-date_created']  # –û–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è

    def __str__(self):
        return self.title_en

    # üõ†Ô∏è –ù–û–í–Ü –º–µ—Ç–æ–¥–∏ –¥–ª—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó –∑ –Ω–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é —Ç–µ–≥—ñ–≤

    def get_related_articles(self, limit=3):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–Ω–∏ –∑ —Ç–∞–∫–∏–º–∏ –∂ —Ç–µ–≥–∞–º–∏ - –ó–ê–í–ñ–î–ò QuerySet"""
        if self.tags.exists():
            try:
                from news.models import ProcessedArticle
                return ProcessedArticle.objects.filter(
                    tags__in=self.tags.all(),
                    status='published'
                ).distinct().order_by('-published_at')[:limit]
            except ImportError:
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π QuerySet, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
                from django.db.models import QuerySet
                return ProcessedArticle.objects.none()
        
        # –¢—É—Ç —Ç–∞–∫–æ–∂ –ø—É—Å—Ç–∏–π QuerySet
        try:
            from news.models import ProcessedArticle
            return ProcessedArticle.objects.none()
        except ImportError:
            return Service.objects.none()  # –∞–±–æ –±—É–¥—å-—è–∫–∏–π –ø—É—Å—Ç–∏–π QuerySet

    def get_related_projects(self, limit=3):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ—î–∫—Ç–∏ –∑ —Ç–∞–∫–∏–º–∏ –∂ —Ç–µ–≥–∞–º–∏ - –ó–ê–í–ñ–î–ò QuerySet"""
        if self.tags.exists():
            try:
                from projects.models import Project
                return Project.objects.filter(
                    tags__in=self.tags.all(),
                    is_active=True
                ).distinct().order_by('-date_created')[:limit]
            except ImportError:
                try:
                    from projects.models import Project
                    return Project.objects.none()
                except ImportError:
                    return Service.objects.none()
        
        try:
            from projects.models import Project
            return Project.objects.none()
        except ImportError:
            return Service.objects.none()

    
    def get_cross_promotion_content(self, limit=6):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–º—ñ—à–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤'—è–∑–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        """
        content = []

        # –î–æ–¥–∞—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        related_articles = self.get_related_articles(limit=3)
        for article in related_articles:
            content.append({
                'type': 'article',
                'title': article.get_title('uk'),
                'summary': article.get_summary('uk')[:150] + '...',
                'url': article.get_absolute_url(),
                'image': article.ai_image_url,
                'date': article.published_at,
                'source_domain': article.source_domain,
                'object': article
            })

        # –î–æ–¥–∞—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏
        related_projects = self.get_related_projects(limit=3)
        for project in related_projects:
            content.append({
                'type': 'project',
                'title': project.title_uk,
                'summary': getattr(project, 'short_description_uk', '') or '–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø—Ä–æ—î–∫—Ç—É...',
                'url': f'/projects/{project.slug}/',
                'image': project.featured_image.url if project.featured_image else None,
                'badges': project.get_all_badges('uk'),
                'object': project
            })

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é
        content.sort(key=lambda x: x.get('date', x['object'].date_created), reverse=True)
        return content[:limit]

    def get_tag_names(self, language='uk'):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤–∏ —Ç–µ–≥—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        return [tag.get_name(language) for tag in self.tags.filter(is_active=True)]

    def get_main_tags(self, limit=3):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–≥–∏ —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∫–∞—Ä—Ç–∫–∞—Ö"""
        return self.tags.filter(is_active=True)[:limit]

    def auto_assign_tags_from_content(self):
        """
        ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–µ—Ä–≤—ñ—Å—É
        –ê–Ω–∞–ª—ñ–∑—É—î –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –æ–ø–∏—Å–∏ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ç–µ–≥—ñ–≤
        """
        tags_to_assign = []
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ—Ä–≤—ñ—Å—É
        all_content = f"{self.title_en} {self.title_uk} {self.description_en} {self.description_uk}".lower()
        
        # –ú–∞–ø–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–æ —Ç–µ–≥—ñ–≤
        keyword_to_tag = {
            'ai_ml': ['ai', 'artificial intelligence', 'machine learning', '—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç', '–º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è', '–Ω–µ–π—Ä–æ–Ω'],
            'process_automation': ['automation', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è', 'automatic', 'workflow', '—Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å'],
            'chatbots': ['chatbot', 'chat bot', '—á–∞—Ç-–±–æ—Ç', 'virtual assistant', '–≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç'],
            'business_optimization': ['optimization', '–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è', 'efficiency', '–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '–ø—Ä–æ—Ü–µ—Å'],
            'digital_transformation': ['digital', '—Ü–∏—Ñ—Ä–æ–≤–∏–π', 'transformation', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è', 'digitalization'],
            'software_development': ['development', '—Ä–æ–∑—Ä–æ–±–∫–∞', 'software', '–ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è', 'api', 'integration']
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ —Ç–µ–≥–∏ –ø—ñ–¥—Ö–æ–¥—è—Ç—å
        for tag_key, keywords in keyword_to_tag.items():
            for keyword in keywords:
                if keyword in all_content:
                    tags_to_assign.append(tag_key)
                    break  # –î–æ—Å—Ç–∞—Ç–Ω—å–æ –æ–¥–Ω–æ–≥–æ –∑–±—ñ–≥—É –Ω–∞ —Ç–µ–≥
        
        # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–≥–∏
        try:
            from core.models import Tag
            for tag_key in set(tags_to_assign):  # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
                tag = Tag.objects.filter(slug=tag_key, is_active=True).first()
                if tag:
                    self.tags.add(tag)
        except ImportError:
            pass
        
        return tags_to_assign

    def get_priority_display(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"""
        if self.priority >= 5:
            return 'top'
        elif self.priority >= 4:
            return 'critical'
        elif self.priority >= 3:
            return 'high'
        else:
            return 'normal'

    def get_priority_emoji(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î emoji –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"""
        priority_emojis = {
            1: '‚ö™',
            2: 'üîµ',
            3: 'üü°',
            4: 'üü†',
            5: 'üî¥',
        }
        return priority_emojis.get(self.priority, 'üîµ')

    # üõ†Ô∏è HELPER –º–µ—Ç–æ–¥–∏ –¥–ª—è –±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–æ—Å—Ç—ñ (–¥–æ–¥–∞–Ω–æ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ)



class FAQ(models.Model):
    question_en = models.CharField(max_length=255)
    answer_en = RichTextField()
    question_uk = models.CharField(max_length=255)
    answer_uk = RichTextField()
    question_pl = models.CharField(max_length=255)
    answer_pl = RichTextField()
    order = models.PositiveIntegerField(default=0)
    is_active = models.BooleanField(default=True)

    class Meta:
        ordering = ['order']
        verbose_name = "FAQ"
        verbose_name_plural = "FAQs"

    def __str__(self):
        return self.question_en


class ServiceOverview(models.Model):
    title_en = models.CharField(max_length=255)
    title_uk = models.CharField(max_length=255)
    title_pl = models.CharField(max_length=255)
    description_en = RichTextField()
    description_uk = RichTextField()
    description_pl = RichTextField()
    seo_title = models.CharField(max_length=255)
    seo_description = RichTextField()
    og_image = models.ImageField(upload_to='services/og/', null=True, blank=True)


class ServiceFeature(models.Model):
    icon = models.CharField(max_length=50, help_text="–ù–∞–∑–≤–∞ SVG-—ñ–∫–æ–Ω–∫–∏ (ID –∑ use #id)")
    order = models.PositiveIntegerField(default=0)

    title_en = models.CharField(max_length=255)
    title_uk = models.CharField(max_length=255)
    title_pl = models.CharField(max_length=255)

    is_active = models.BooleanField(default=True)

    class Meta:
        ordering = ['order']
        verbose_name = "Service Feature"
        verbose_name_plural = "Service Features"

    def __str__(self):
        return self.title_en