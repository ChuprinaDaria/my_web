from django.core.management.base import BaseCommand
from django.test import Client
from django.urls import reverse
import requests
import json

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç—É—î –±–µ–∑–ø–µ–∫–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–∞–π—Ç—É'

    def add_arguments(self, parser):
        parser.add_argument(
            '--url',
            type=str,
            default='http://127.0.0.1:8000',
            help='URL —Å–∞–π—Ç—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è'
        )

    def handle(self, *args, **options):
        url = options['url']
        
        self.stdout.write(
            self.style.SUCCESS(f'üîí –¢–µ—Å—Ç—É—î–º–æ –±–µ–∑–ø–µ–∫–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è {url}')
        )
        
        try:
            response = requests.get(url, timeout=10)
            headers = response.headers
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –±–µ–∑–ø–µ–∫–∏
            security_headers = {
                'Content-Security-Policy': 'CSP',
                'Strict-Transport-Security': 'HSTS',
                'X-Content-Type-Options': 'X-Content-Type-Options',
                'X-Frame-Options': 'X-Frame-Options',
                'X-XSS-Protection': 'X-XSS-Protection',
                'Referrer-Policy': 'Referrer-Policy',
                'Permissions-Policy': 'Permissions-Policy',
                'Cross-Origin-Embedder-Policy': 'COEP',
                'Cross-Origin-Opener-Policy': 'COOP',
                'Cross-Origin-Resource-Policy': 'CORP'
            }
            
            self.stdout.write('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤:')
            self.stdout.write('=' * 50)
            
            for header, name in security_headers.items():
                if header in headers:
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úÖ {name}: {headers[header]}')
                    )
                else:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå {name}: –í–Ü–î–°–£–¢–ù–Ü–ô')
                    )
            
            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ CSP
            if 'Content-Security-Policy' in headers:
                csp = headers['Content-Security-Policy']
                if 'require-trusted-types-for' in csp:
                    self.stdout.write(
                        self.style.SUCCESS('‚úÖ Trusted Types: –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ')
                    )
                else:
                    self.stdout.write(
                        self.style.WARNING('‚ö†Ô∏è  Trusted Types: –í—ñ–¥—Å—É—Ç–Ω—ñ–π')
                    )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HSTS
            if 'Strict-Transport-Security' in headers:
                hsts = headers['Strict-Transport-Security']
                if 'includeSubDomains' in hsts:
                    if 'preload' in hsts:
                        self.stdout.write(
                            self.style.SUCCESS('‚úÖ HSTS: –ü–æ–≤–Ω—ñ—Å—Ç—é –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (production)')
                        )
                    else:
                        self.stdout.write(
                            self.style.SUCCESS('‚úÖ HSTS: –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (development mode)')
                        )
                else:
                    self.stdout.write(
                        self.style.WARNING('‚ö†Ô∏è  HSTS: –ù–µ–ø–æ–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è')
                    )
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå HSTS: –í–Ü–î–°–£–¢–ù–Ü–ô')
                )
            
            self.stdout.write('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:')
            self.stdout.write('=' * 50)
            
            missing_headers = [name for header, name in security_headers.items() 
                             if header not in headers]
            
            if missing_headers:
                self.stdout.write(
                    self.style.WARNING(f'–î–æ–¥–∞–π—Ç–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {", ".join(missing_headers)}')
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS('üéâ –í—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–ø–µ–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ!')
                )
                
        except requests.exceptions.RequestException as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ {url}: {e}')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}')
            )
