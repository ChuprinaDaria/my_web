#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É—î–º–æ FiveFilters —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é —Å—Ç–∞—Ç—Ç–µ—é
"""

import os
import sys
import django

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lazysoft.settings')
django.setup()

from news.services.fulltext_extractor import FullTextExtractor
from news.services.rss_parser import RSSParser
from news.models import RSSSource, RawArticle

def test_normal_news_site():
    """–¢–µ—Å—Ç—É—î–º–æ –Ω–∞ –∑–≤–∏—á–∞–π–Ω–æ–º—É –Ω–æ–≤–∏–Ω–Ω–æ–º—É —Å–∞–π—Ç—ñ"""
    print("üîç –¢–µ—Å—Ç –Ω–∞ –∑–≤–∏—á–∞–π–Ω–æ–º—É –Ω–æ–≤–∏–Ω–Ω–æ–º—É —Å–∞–π—Ç—ñ")
    print("=" * 50)
    
    # –ë–µ—Ä–µ–º–æ TechCrunch - —Ç–∞–º —Ç–æ—á–Ω–æ —î –ø–æ–≤–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
    techcrunch = RSSSource.objects.filter(
        name__icontains='TechCrunch',
        is_active=True
    ).first()
    
    if not techcrunch:
        print("‚ùå TechCrunch –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É—î–º–æ –±—É–¥—å-—è–∫–µ EN –¥–∂–µ—Ä–µ–ª–æ...")
        techcrunch = RSSSource.objects.filter(
            language='en',
            is_active=True
        ).exclude(name__icontains='Weekly').first()
    
    if not techcrunch:
        print("‚ùå –ù–µ–º–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∂–µ—Ä–µ–ª")
        return
    
    print(f"üì∞ –¢–µ—Å—Ç—É—î–º–æ: {techcrunch.name}")
    print(f"üîó URL: {techcrunch.url}")
    
    # –ü–∞—Ä—Å–∏–º–æ RSS
    parser = RSSParser()
    try:
        result = parser.parse_single_source(techcrunch)
        print(f"üìä RSS —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É —Å—Ç–∞—Ç—Ç—é
        latest = RawArticle.objects.filter(
            source=techcrunch
        ).order_by('-fetched_at').first()
        
        if not latest:
            print("‚ùå –°—Ç–∞—Ç—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
            
        print(f"\nüì∞ –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–∞—Ç—Ç—è: {latest.title[:70]}...")
        print(f"üîó URL —Å—Ç–∞—Ç—Ç—ñ: {latest.url}")
        
        # RSS –∫–æ–Ω—Ç–µ–Ω—Ç
        rss_content = latest.content or latest.summary or ""
        print(f"üìè RSS –∫–æ–Ω—Ç–µ–Ω—Ç: {len(rss_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        if rss_content:
            print(f"\nüìÑ RSS –ø–æ—á–∞—Ç–æ–∫:")
            print("-" * 30)
            print(rss_content[:200] + "..." if len(rss_content) > 200 else rss_content)
            print("-" * 30)
        
        return latest.url
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ RSS: {e}")
        return None

def test_fivefilters_extraction(article_url):
    """–¢–µ—Å—Ç—É—î–º–æ FiveFilters –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è"""
    if not article_url:
        print("‚ùå –ù–µ–º–∞—î URL –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        return
        
    print(f"\nüîç –¢–µ—Å—Ç FiveFilters")
    print("=" * 30)
    print(f"üîó URL: {article_url}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ extractor
    extractor = FullTextExtractor()
    
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
        print("‚è≥ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É...")
        full_content = extractor.extract_article(article_url)
        
        if full_content:
            print(f"‚úÖ FiveFilters –∫–æ–Ω—Ç–µ–Ω—Ç: {len(full_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
            
            print(f"\nüìÑ FiveFilters –ø–æ—á–∞—Ç–æ–∫:")
            print("-" * 30)
            print(full_content[:300] + "..." if len(full_content) > 300 else full_content)
            print("-" * 30)
            
            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            return full_content
        else:
            print("‚ùå FiveFilters –Ω–µ –∑–º—ñ–≥ –≤–∏—Ç—è–≥—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç")
            return None
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ FiveFilters: {e}")
        return None

def compare_content_quality(rss_content, full_content):
    """–ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —è–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    print(f"\nüìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –Ø–ö–û–°–¢–Ü")
    print("=" * 30)
    
    if not rss_content:
        rss_content = ""
    if not full_content:
        full_content = ""
    
    print(f"üìè RSS –¥–æ–≤–∂–∏–Ω–∞: {len(rss_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
    print(f"üìè FiveFilters –¥–æ–≤–∂–∏–Ω–∞: {len(full_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
    
    improvement = len(full_content) - len(rss_content)
    if improvement > 0:
        percentage = (improvement / len(rss_content)) * 100 if len(rss_content) > 0 else 999
        print(f"üìà –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è: +{improvement} —Å–∏–º–≤–æ–ª—ñ–≤ (+{percentage:.1f}%)")
        
        if improvement > 1000:
            print("üéâ –í–Ü–î–ú–Ü–ù–ù–û! FiveFilters –¥–∞—î –ù–ê–ë–ê–ì–ê–¢–û –±—ñ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
        elif improvement > 500:
            print("‚úÖ –î–û–ë–†–ï! FiveFilters –ø–æ–∫—Ä–∞—â—É—î –∫–æ–Ω—Ç–µ–Ω—Ç")
        else:
            print("‚ö†Ô∏è –ù–µ–≤–µ–ª–∏–∫–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
    else:
        print("‚ùå FiveFilters –Ω–µ –ø–æ–∫—Ä–∞—â–∏–≤ –∫–æ–Ω—Ç–µ–Ω—Ç")

def test_manual_url():
    """–¢–µ—Å—Ç –∑ —Ä—É—á–Ω–∏–º URL"""
    print(f"\nüîç –†—É—á–Ω–∏–π —Ç–µ—Å—Ç FiveFilters")
    print("=" * 30)
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å FiveFilters
    import requests
    try:
        response = requests.get("http://localhost:8082", timeout=5)
        print(f"‚úÖ FiveFilters –¥–æ—Å—Ç—É–ø–Ω–∏–π: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå FiveFilters –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        return False
    
    # –ü—Ä–æ—Å—Ç–∏–π URL –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_urls = [
        "https://arstechnica.com/gadgets/2024/11/",
        "https://www.reuters.com/technology/",
        "https://www.bbc.com/news/technology"
    ]
    
    extractor = FullTextExtractor()
    
    for test_url in test_urls:
        print(f"\nüîó –¢–µ—Å—Ç URL: {test_url}")
        
        try:
            # –ü—Ä—è–º–∏–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ requests
            response = requests.get(
                f"http://localhost:8082/extract.php",
                params={'url': test_url, 'format': 'json'},
                timeout=30
            )
            
            print(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    content = data.get('content', '')
                    if content:
                        print(f"‚úÖ –£—Å–ø—ñ—Ö! {len(content)} —Å–∏–º–≤–æ–ª—ñ–≤")
                        print(f"üìÑ –ü–æ—á–∞—Ç–æ–∫: {content[:150]}...")
                        return True
                    else:
                        print("‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                except Exception as e:
                    print(f"‚ö†Ô∏è JSON –ø–æ–º–∏–ª–∫–∞: {e}")
                    print(f"üìÑ Response: {response.text[:200]}...")
            else:
                print(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
    
    return False

def main():
    print("üß™ LAZYSOFT - –¢–µ—Å—Ç FiveFilters —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç –∑–≤–∏—á–∞–π–Ω–æ–≥–æ RSS
    article_url = test_normal_news_site()
    
    # 2. –¢–µ—Å—Ç FiveFilters
    if article_url:
        full_content = test_fivefilters_extraction(article_url)
        
        # 3. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∑—è—Ç–∏ RSS –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç–µ—Å—Ç—É)
        # –¶–µ–π –∫—Ä–æ–∫ –∑—Ä–æ–±–∏–º–æ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è
        
    # 4. –†—É—á–Ω–∏–π —Ç–µ—Å—Ç –Ω–∞ –≤—ñ–¥–æ–º–æ–º—É URL
    manual_success = test_manual_url()
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("-" * 20)
    if manual_success:
        print("‚úÖ FiveFilters –ø—Ä–∞—Ü—é—î! –ì–æ—Ç–æ–≤—ñ –¥–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó!")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ FiveFilters. –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")

if __name__ == "__main__":
    main()