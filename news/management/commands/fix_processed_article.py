from django.core.management.base import BaseCommand
from django.db import transaction
from news.models import ProcessedArticle, RawArticle
from news.services.ai_processor.enhanced_ai_analyzer import EnhancedAIAnalyzer
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–í–∏–ø—Ä–∞–≤–ª—è—î –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ: –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Ç–∞ –¥–æ–¥–∞—î –±—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏'

    def add_arguments(self, parser):
        parser.add_argument('--article-id', type=int, help='ID –æ–±—Ä–æ–±–ª–µ–Ω–æ—ó —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è')
        parser.add_argument('--title-contains', type=str, help='–ß–∞—Å—Ç–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –ø–æ—à—É–∫—É —Å—Ç–∞—Ç—Ç—ñ')
        parser.add_argument('--priority', type=int, default=4, help='–ù–æ–≤–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (1-5)')
        parser.add_argument('--dry-run', action='store_true', help='–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º')

    def handle(self, *args, **options):
        self.stdout.write("üîß FIX PROCESSED ARTICLE")
        self.stdout.write("=" * 50)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ç—Ç—é
        article = self._find_article(options)
        if not article:
            self.stdout.write("‚ùå –°—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        self.stdout.write(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—Ç—é: {article.title_en}")
        self.stdout.write(f"   –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {article.priority}")
        self.stdout.write(f"   –ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç EN: {article.business_insight_en[:100] if article.business_insight_en else '–ù–ï–ú–ê–Ñ'}...")
        
        if options['dry_run']:
            self.stdout.write("‚ö†Ô∏è DRY RUN - –∑–º—ñ–Ω–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
            return
        
        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—Ç—é
        try:
            with transaction.atomic():
                # 1. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
                article.priority = options['priority']
                article.save(update_fields=['priority'])
                self.stdout.write(f"‚úÖ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {options['priority']}")
                
                # 2. –î–æ–¥–∞—î–º–æ –±—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏
                if not article.business_insight_en or len(article.business_insight_en.strip()) < 50:
                    self.stdout.write("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç—ñ–≤...")
                    
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–∏—Ä—É —Å—Ç–∞—Ç—Ç—é
                    raw_article = RawArticle.objects.filter(
                        title__icontains=article.title_en[:50]
                    ).first()
                    
                    if raw_article:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Enhanced AI Analyzer
                        enhanced_analyzer = EnhancedAIAnalyzer()
                        enhanced_insights = enhanced_analyzer.analyze_full_article_with_insights(
                            raw_article, 
                            raw_article.content or raw_article.summary
                        )
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ –±—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏
                        if enhanced_insights.business_insights:
                            en_insights = enhanced_insights.business_insights.get('english_audience', {})
                            pl_insights = enhanced_insights.business_insights.get('polish_audience', {})
                            uk_insights = enhanced_insights.business_insights.get('ukrainian_audience', {})
                            
                            article.business_insight_en = en_insights.get('main_insight', '')
                            article.business_insight_pl = pl_insights.get('main_insight', '')
                            article.business_insight_uk = uk_insights.get('main_insight', '')
                            
                            # –î–æ–¥–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏
                            if enhanced_insights.key_takeaways:
                                article.key_takeaways_en = enhanced_insights.key_takeaways.get('english', [])
                                article.key_takeaways_pl = enhanced_insights.key_takeaways.get('polish', [])
                                article.key_takeaways_uk = enhanced_insights.key_takeaways.get('ukrainian', [])
                            
                            article.save(update_fields=[
                                'business_insight_en', 'business_insight_pl', 'business_insight_uk',
                                'key_takeaways_en', 'key_takeaways_pl', 'key_takeaways_uk'
                            ])
                            
                            self.stdout.write("‚úÖ –ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏ –¥–æ–¥–∞–Ω–æ")
                        else:
                            self.stdout.write("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏")
                    else:
                        self.stdout.write("‚ö†Ô∏è –°–∏—Ä—É —Å—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                else:
                    self.stdout.write("‚ÑπÔ∏è –ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏ –≤–∂–µ —î")
                
                self.stdout.write(f"üéâ –°—Ç–∞—Ç—Ç—é –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                
        except Exception as e:
            self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ: {e}")

    def _find_article(self, options):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—Ç—é –∑–∞ ID –∞–±–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        if options['article_id']:
            try:
                return ProcessedArticle.objects.get(id=options['article_id'])
            except ProcessedArticle.DoesNotExist:
                return None
        
        if options['title_contains']:
            articles = ProcessedArticle.objects.filter(
                title_en__icontains=options['title_contains']
            )
            if articles.count() == 1:
                return articles.first()
            elif articles.count() > 1:
                self.stdout.write("üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ —Å—Ç–∞—Ç–µ–π:")
                for i, article in enumerate(articles[:5], 1):
                    self.stdout.write(f"   {i}. ID: {article.id} - {article.title_en[:80]}...")
                return None
        
        return None
