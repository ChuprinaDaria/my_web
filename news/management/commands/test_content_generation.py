from django.core.management.base import BaseCommand
from news.models import RawArticle
from news.services.ai_processor import AINewsProcessor


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó LAZYSOFT –∞–Ω–∞–ª—ñ–∑—É'

    def add_arguments(self, parser):
        parser.add_argument(
            '--article-id',
            type=int,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–∏—Ä–æ—ó —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è'
        )

    def handle(self, *args, **options):
        article_id = options.get('article_id')
        
        self.stdout.write(
            self.style.SUCCESS('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ö–û–ù–¶–ï–ü–¶–Ü–á LAZYSOFT –ö–û–ù–¢–ï–ù–¢–£')
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—Ç—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if article_id:
            try:
                article = RawArticle.objects.get(id=article_id)
            except RawArticle.DoesNotExist:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –°–∏—Ä–∞ —Å—Ç–∞—Ç—Ç—è –∑ ID {article_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞')
                )
                return
        else:
            article = RawArticle.objects.filter(
                is_processed=False,
                is_duplicate=False
            ).first()
        
        if not article:
            self.stdout.write(
                self.style.WARNING('üì≠ –ù–µ–º–∞—î –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
            )
            return
        
        processor = AINewsProcessor()
        
        self.stdout.write(f'\n{"="*80}')
        self.stdout.write('üì∞ –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–ê –°–¢–ê–¢–¢–Ø')
        self.stdout.write(f'{"="*80}')
        
        self.stdout.write(f'–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article.title[:100]}...')
        self.stdout.write(f'–î–∂–µ—Ä–µ–ª–æ: {article.source.name if article.source else "Unknown"}')
        self.stdout.write(f'URL: {article.original_url[:60]}...')
        
        try:
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è
            category_info = processor._categorize_article(article)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
            self.stdout.write('ü§ñ –ì–µ–Ω–µ—Ä—É—î–º–æ LAZYSOFT –∫–æ–Ω—Ç–µ–Ω—Ç...')
            content = processor._create_multilingual_content(article, category_info)
            
            self.stdout.write(f'\n{"="*80}')
            self.stdout.write('üéØ –ó–ì–ï–ù–ï–†–û–í–ê–ù–ò–ô LAZYSOFT –ö–û–ù–¢–ï–ù–¢')
            self.stdout.write(f'{"="*80}')
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.stdout.write(f'üá∫üá¶ –ó–∞–≥–æ–ª–æ–≤–æ–∫ UK: {content.get("title_uk", "N/A")[:80]}...')
            
            # Summary
            summary_uk = content.get('summary_uk', 'N/A')
            self.stdout.write(f'\nüìù SUMMARY UK (–ø–µ—Ä—à—ñ 800 —Å–∏–º–≤–æ–ª—ñ–≤):')
            self.stdout.write('-' * 60)
            self.stdout.write(summary_uk[:800] + ('...' if len(summary_uk) > 800 else ''))
            
            # Business Insight
            insight_uk = content.get('business_insight_uk', 'N/A')
            self.stdout.write(f'\nüí° BUSINESS INSIGHT UK:')
            self.stdout.write('-' * 60)
            self.stdout.write(insight_uk[:300] + ('...' if len(insight_uk) > 300 else ''))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—é
            self.stdout.write(f'\n{"="*80}')
            self.stdout.write('üîç –ê–ù–ê–õ–Ü–ó –ö–û–ù–¶–ï–ü–¶–Ü–á')
            self.stdout.write(f'{"="*80}')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            has_source_link = False
            if article.original_url and article.original_url in summary_uk:
                has_source_link = True
                self.stdout.write('‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª –ü–†–ò–°–£–¢–ù–Ñ')
            else:
                self.stdout.write('‚ùå –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª –í–Ü–î–°–£–¢–ù–Ñ')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–≥–∞–¥–∫–∞ –¥–∂–µ—Ä–µ–ª–∞
            has_source_mention = False
            if article.source and article.source.name.lower() in summary_uk.lower():
                has_source_mention = True
                self.stdout.write('‚úÖ –ó–≥–∞–¥–∫–∞ –¥–∂–µ—Ä–µ–ª–∞ –ü–†–ò–°–£–¢–ù–Ø')
            else:
                self.stdout.write('‚ùå –ó–≥–∞–¥–∫–∞ –¥–∂–µ—Ä–µ–ª–∞ –í–Ü–î–°–£–¢–ù–Ø')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î LAZYSOFT –¥—É–º–∫–∏
            lazysoft_patterns = [
                '–Ω–∞—à—ñ –¥—É–º–∫–∏', '–Ω–∞—à –∞–Ω–∞–ª—ñ–∑', '–Ω–∞—à—ñ –≤–∏—Å–Ω–æ–≤–∫–∏', '–Ω–∞—à–∞ —Ç–æ—á–∫–∞ –∑–æ—Ä—É',
                '–∫–æ–º–∞–Ω–¥–∞ lazysoft', '—â–æ –º–∏ –¥—É–º–∞—î–º–æ', '–Ω–∞—à—ñ —ñ–Ω—Å–∞–π—Ç–∏', '–¥—ñ–ª–∏–º–æ—Å—è'
            ]
            has_lazysoft_opinion = any(pattern in summary_uk.lower() for pattern in lazysoft_patterns)
            
            if has_lazysoft_opinion:
                self.stdout.write('‚úÖ LAZYSOFT –¥—É–º–∫–∏/–∞–Ω–∞–ª—ñ–∑ –ü–†–ò–°–£–¢–ù–Ü')
            else:
                self.stdout.write('‚ùå LAZYSOFT –¥—É–º–∫–∏/–∞–Ω–∞–ª—ñ–∑ –í–Ü–î–°–£–¢–ù–Ü')
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
            concept_score = sum([has_source_link, has_source_mention, has_lazysoft_opinion])
            
            if concept_score == 3:
                self.stdout.write(self.style.SUCCESS('\nüéâ –ö–û–ù–¶–ï–ü–¶–Ü–Ø –ü–û–í–ù–Ü–°–¢–Æ –î–û–¢–†–ò–ú–ê–ù–ê!'))
            elif concept_score >= 2:
                self.stdout.write(self.style.WARNING(f'\n‚ö†Ô∏è –ö–û–ù–¶–ï–ü–¶–Ü–Ø –ß–ê–°–¢–ö–û–í–û –î–û–¢–†–ò–ú–ê–ù–ê ({concept_score}/3)'))
            else:
                self.stdout.write(self.style.ERROR(f'\nüí• –ö–û–ù–¶–ï–ü–¶–Ü–Ø –ù–ï –î–û–¢–†–ò–ú–ê–ù–ê ({concept_score}/3)'))
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}')
            )
        
        self.stdout.write(f'\n{"="*80}')
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        )
