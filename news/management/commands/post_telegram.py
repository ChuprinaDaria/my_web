# news/management/commands/post_telegram.py
from django.core.management.base import BaseCommand
from django.utils.translation import override
from django.utils.html import escape
from django.conf import settings
from news.models import ProcessedArticle
from news.services.telegram import tg_send_photo, tg_send_message

SITE_URL = getattr(settings, "SITE_URL", "https://lazysoft.dev")

def clamp(s: str, n: int) -> str:
    if not s:
        return ""
    s = str(s).strip()
    return (s[: n - 1] + "‚Ä¶") if len(s) > n else s

def as_text(value) -> str:
    if value is None:
        return ""
    if isinstance(value, (list, tuple, set)):
        return "\n".join(str(x).strip() for x in value if x is not None and str(x).strip())
    if isinstance(value, dict):
        return "\n".join(f"{k}: {as_text(v).strip()}" for k, v in value.items() if k or v)
    return str(value)

def first_nonempty(*values) -> str:
    for v in values:
        t = as_text(v).strip()
        if t:
            return t
    return ""

def bullets(text: str) -> str:
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    return "\n".join(f"‚Ä¢ {ln}" for ln in lines) if lines else ""

def get_localized(article, base: str, lang: str, strict: bool) -> str:
    # –Ø–∫—â–æ strict=True ‚Äî –±–µ—Ä–µ–º–æ –¢–Ü–õ–¨–ö–ò –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É (—ñ–Ω–∞–∫—à–µ ‚Äî –∑ —Ñ–æ–ª–±–µ–∫–æ–º)
    primary = as_text(getattr(article, f"{base}_{lang}", None)).strip()
    if strict:
        return primary  # –±–µ–∑ —Ñ–æ–ª–±–µ–∫—ñ–≤
    return first_nonempty(
        primary,
        getattr(article, "title_uk" if base == "title" else f"{base}_uk", None),
        getattr(article, "title_en" if base == "title" else f"{base}_en", None),
        getattr(article, "title_pl" if base == "title" else f"{base}_pl", None),
    )

class Command(BaseCommand):
    help = "–ü—É–±–ª—ñ–∫—É—î –æ—Å—Ç–∞–Ω–Ω—é (–∞–±–æ –æ–±—Ä–∞–Ω—É) —Å—Ç–∞—Ç—Ç—é –≤ Telegram –∫—Ä–∞—Å–∏–≤–∏–º –ø–æ—Å—Ç–æ–º"

    def add_arguments(self, parser):
        parser.add_argument("--lang", default="uk", help="–ú–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: uk/en/pl")
        parser.add_argument("--id", type=int, help="ID —Å—Ç–∞—Ç—Ç—ñ (–æ–ø—Ü.)")
        parser.add_argument("--uuid", type=str, help="UUID —Å—Ç–∞—Ç—Ç—ñ (–æ–ø—Ü.)")
        parser.add_argument("--strict-lang", action="store_true",
                            help="–ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –¢–Ü–õ–¨–ö–ò —è–∫—â–æ —î –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∞–º–µ —Ü—ñ—î—é –º–æ–≤–æ—é (–±–µ–∑ —Ñ–æ–ª–±–µ–∫—ñ–≤).")

    def handle(self, *args, **opts):
        lang = opts["lang"]
        strict = bool(opts.get("strict_lang"))

        qs = ProcessedArticle.objects.filter(status="published")
        if opts.get("id"):
            qs = qs.filter(id=opts["id"])
        if opts.get("uuid"):
            qs = qs.filter(uuid=opts["uuid"])

        article = qs.order_by("-published_at", "-created_at").first()
        if not article:
            self.stdout.write(self.style.ERROR("–ù–µ–º–∞—î –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π –ø—ñ–¥ —É–º–æ–≤–∏ –≤—ñ–¥–±–æ—Ä—É"))
            return

        # –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ–ª—è
        title = get_localized(article, "title", lang, strict)
        summary = get_localized(article, "summary", lang, strict)
        insight_text = get_localized(article, "insight", lang, strict)
        takeaways_text = get_localized(article, "key_takeaways", lang, strict)

        if strict:
            missing = []
            if not title: missing.append("title")
            if not summary: missing.append("summary")
            # insight/takeaways ‚Äî –æ–ø—Ü—ñ–π–Ω—ñ
            if missing:
                self.stdout.write(self.style.ERROR(
                    f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è –¥–ª—è –º–æ–≤–∏ '{lang}': {', '.join(missing)}. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ (strict-lang)."
                ))
                return

        if takeaways_text:
            takeaways_text = bullets(takeaways_text)

        with override(lang):
            path = article.get_absolute_url(lang)
        url = f"{SITE_URL}{path}"

        # –§–æ—Ä–º—É—î–º–æ caption –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
        title_part = f"üî• *{escape(clamp(title, 140))}*\n\n" if title else ""
        summary_part = f"{escape(clamp(summary, 400))}\n\n" if summary else ""
        footer = "‚Äî Lazysoft AI News"
        caption = f"{title_part}{summary_part}{footer}"

        # –ö–Ω–æ–ø–∫–∞ (–ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –≤ –∫–Ω–æ–ø—Ü—ñ)
        button = {"inline_keyboard": [[{"text": "üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ", "url": url}]]}

        # –§–æ—Ç–æ: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫–∞ –¥–∂–µ—Ä–µ–ª —ñ –ª–æ–≥—É–º–æ —Å—Ç–∞–Ω
        photo = getattr(article, "ai_image_url", None) or getattr(article, "image_url", None)
        if not photo:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è –£ —Å—Ç–∞—Ç—Ç—ñ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (ai_image_url / image_url –ø–æ—Ä–æ–∂–Ω—ñ)."))

        if photo:
            msg_id = tg_send_photo(photo, caption, language=lang, reply_markup=button, unpin=True)
        else:
            # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –±–µ–∑ —Å–∏—Ä–æ–≥–æ URL —É —Ç–µ–∫—Å—Ç—ñ ‚Äî –ª–∏—à–µ –∑ –∫–Ω–æ–ø–∫–æ—é
            msg_id = tg_send_message(caption, language=lang, reply_markup=button, unpin=True)

        self.stdout.write(self.style.SUCCESS(f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ Telegram (msg_id={msg_id})"))
