# === –í–ò–ü–†–ê–í–ò–¢–ò news/management/commands/parse_rss.py ===

import time
from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from news.services.rss_parser import RSSParser, RSSParserError
from news.models import RSSSource


class Command(BaseCommand):
    help = '–ü–∞—Ä—Å–∏–Ω–≥ RSS –¥–∂–µ—Ä–µ–ª –Ω–æ–≤–∏–Ω –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--language',
            type=str,
            choices=['en', 'pl', 'uk'],
            help='–§—ñ–ª—å—Ç—Ä –ø–æ –º–æ–≤—ñ (en, pl, uk)'
        )
        
        parser.add_argument(
            '--category',
            type=str,
            choices=[
                'ai', 'automation', 'crm', 'seo', 'social', 
                'chatbots', 'ecommerce', 'fintech', 'corporate', 'general'
            ],
            help='–§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
        )
        
        parser.add_argument(
            '--source',
            type=int,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É'
        )
        
        parser.add_argument(
            '--inactive',
            action='store_true',
            help='–í–∫–ª—é—á–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞'
        )
        
        parser.add_argument(
            '--cleanup',
            type=int,
            default=0,
            help='–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Å—Ç–∞—Ç—Ç—ñ (–¥–Ω—ñ–≤ –Ω–∞–∑–∞–¥)'
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥'
        )
        
        parser.add_argument(
            '--limit',
            type=int,
            help='–û–±–º–µ–∂–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)'
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è'
        )
        
        # –î–û–î–ê–õ–ò –¶–¨–û–ì–û –ê–†–ì–£–ú–ï–ù–¢–ê:
        parser.add_argument(
            '--date',
            type=str,
            help='–î–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD'
        )
        
        parser.add_argument(
            '--no-date-filter',
            action='store_true',
            help='–í–∏–º–∫–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ'
        )

    def handle(self, *args, **options):
        start_time = time.time()
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–∏–≤—ñ–¥
        if options['verbose']:
            self.verbosity = 2
        else:
            self.verbosity = 1
            
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É RSS –¥–∂–µ—Ä–µ–ª')
        )
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä—Å–µ—Ä
            parser = RSSParser()
            
            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É –ø–æ –¥–∞—Ç—ñ
            if options.get('date'):
                try:
                    from datetime import datetime
                    target_date = datetime.strptime(options['date'], '%Y-%m-%d').date()
                    parser.set_date_filter(target_date)  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û
                    self.stdout.write(f"üìÖ –¶—ñ–ª—å–æ–≤–∞ –¥–∞—Ç–∞: {target_date}")
                except ValueError:
                    raise CommandError('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD')
            
            if options.get('no_date_filter'):
                parser.disable_date_filter()  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û
                self.stdout.write(self.style.WARNING("üö´ –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ –≤–∏–º–∫–Ω–µ–Ω–∏–π"))
            else:
                if not options.get('date'):
                    # –ó–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º –ø–∞—Ä—Å–∏–º–æ –∑–∞ –≤—á–æ—Ä–∞
                    from datetime import timedelta
                    yesterday = timezone.now().date() - timedelta(days=1)
                    parser.set_date_filter(yesterday)  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û
                    self.stdout.write(f"üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–∏–Ω –∑–∞: {yesterday}")
            
            # Cleanup —Å—Ç–∞—Ä–∏—Ö —Å—Ç–∞—Ç–µ–π
            if options['cleanup'] > 0:
                self.stdout.write(f"üßπ –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π —Å—Ç–∞—Ä—à–µ {options['cleanup']} –¥–Ω—ñ–≤...")
                deleted_count = parser.cleanup_old_articles(options['cleanup'])
                self.stdout.write(
                    self.style.WARNING(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö —Å—Ç–∞—Ç–µ–π")
                )
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
            if options['source']:
                try:
                    source = RSSSource.objects.get(id=options['source'])
                    self.stdout.write(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∂–µ—Ä–µ–ª–∞: {source.name}")
                    
                    if options['dry_run']:
                        self.stdout.write(self.style.WARNING("‚ö†Ô∏è DRY RUN - –¥–µ–º–æ —Ä–µ–∂–∏–º, –¥–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è"))
                        self._demo_parse_source(source)
                        return
                    
                    result = parser.parse_single_source(source)
                    self._print_single_source_results(result, source)
                    
                except RSSSource.DoesNotExist:
                    raise CommandError(f'RSS –¥–∂–µ—Ä–µ–ª–æ –∑ ID {options["source"]} –Ω–µ —ñ—Å–Ω—É—î')
                    
            else:
                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
                active_only = not options['inactive']
                
                if options['dry_run']:
                    self.stdout.write(self.style.WARNING("‚ö†Ô∏è DRY RUN - –¥–µ–º–æ —Ä–µ–∂–∏–º"))
                    self._demo_parse_all_sources(
                        language=options['language'],
                        category=options['category'], 
                        active_only=active_only
                    )
                    return
                
                results = parser.parse_all_sources(
                    language=options['language'],
                    category=options['category'],
                    active_only=active_only
                )
                
                self._print_parsing_results(results)
            
            # –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            execution_time = time.time() - start_time
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚è±Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥'
                )
            )
            
        except RSSParserError as e:
            raise CommandError(f'–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}')
        except Exception as e:
            raise CommandError(f'–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}')

    def _print_parsing_results(self, results):
        """–í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª"""
        self.stdout.write('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–ê–†–°–ò–ù–ì–£:')
        self.stdout.write('-' * 50)
        
        self.stdout.write(f"üìö –í—Å—å–æ–≥–æ –¥–∂–µ—Ä–µ–ª: {results['total_sources']}")
        self.stdout.write(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: {results['successful_sources']}")
        self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {results['failed_sources']}")
        self.stdout.write(f"üìÑ –í—Å—å–æ–≥–æ —Å—Ç–∞—Ç–µ–π: {results['total_articles']}")
        self.stdout.write(
            self.style.SUCCESS(f"üÜï –ù–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π: {results['new_articles']}")
        )
        self.stdout.write(
            self.style.WARNING(f"üîÑ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {results['duplicate_articles']}")
        )
        
        # ‚úÖ –î–û–î–ê–ù–û: –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
        if 'filtered_articles' in results and results['filtered_articles'] > 0:
            self.stdout.write(
                self.style.WARNING(f"üìÖ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç—ñ: {results['filtered_articles']}")
            )
        
        # –ü–æ–º–∏–ª–∫–∏
        if results['errors']:
            self.stdout.write('\n‚ùå –ü–û–ú–ò–õ–ö–ò:')
            for error in results['errors']:
                self.stdout.write(self.style.ERROR(error))
        
        # –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
        if results['total_sources'] > 0:
            success_rate = (results['successful_sources'] / results['total_sources']) * 100
            if success_rate >= 90:
                style = self.style.SUCCESS
            elif success_rate >= 70:
                style = self.style.WARNING
            else:
                style = self.style.ERROR
                
            self.stdout.write(
                style(f"\nüéØ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")
            )

    def _print_single_source_results(self, result, source):
        """–í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –æ–¥–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞"""
        self.stdout.write(f'\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¥–ª—è {source.name}:')
        self.stdout.write('-' * 50)
        
        self.stdout.write(f"üìÑ –í—Å—å–æ–≥–æ —Å—Ç–∞—Ç–µ–π: {result['total_articles']}")
        self.stdout.write(
            self.style.SUCCESS(f"üÜï –ù–æ–≤–∏—Ö: {result['new_articles']}")
        )
        self.stdout.write(
            self.style.WARNING(f"üîÑ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {result['duplicate_articles']}")
        )
        
        if 'filtered_articles' in result:
            self.stdout.write(
                self.style.WARNING(f"‚è≠Ô∏è –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {result['filtered_articles']}")
            )
        
        if result.get('errors', 0) > 0:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {result['errors']}")
            )

    def _demo_parse_all_sources(self, language=None, category=None, active_only=True):
        """–î–µ–º–æ —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—É—î —â–æ –±—É–¥–µ –ø–∞—Ä—Å–∏—Ç–∏—Å—è"""
        
        sources_queryset = RSSSource.objects.all()
        
        if active_only:
            sources_queryset = sources_queryset.filter(is_active=True)
        if language:
            sources_queryset = sources_queryset.filter(language=language)
        if category:
            sources_queryset = sources_queryset.filter(category=category)
        
        sources = list(sources_queryset)
        
        self.stdout.write(f"\nüìä DEMO MODE - –ë—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(sources)} –¥–∂–µ—Ä–µ–ª:")
        self.stdout.write('-' * 60)
        
        for source in sources:
            self.stdout.write(f"üîó {source.name} ({source.get_language_display()}) - {source.get_category_display()}")
            self.stdout.write(f"    URL: {source.url}")
            
        self.stdout.write(f"\n‚úÖ –í —Ä–µ–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ —Ü—ñ {len(sources)} –¥–∂–µ—Ä–µ–ª –±—É–¥—É—Ç—å –ø–∞—Ä—Å–∏—Ç–∏—Å—è!")

    def _demo_parse_source(self, source):
        """–î–µ–º–æ —Ä–µ–∂–∏–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞"""
        self.stdout.write(f"\nüìä DEMO MODE - –î–∂–µ—Ä–µ–ª–æ: {source.name}")
        self.stdout.write('-' * 50)
        self.stdout.write(f"üåç –ú–æ–≤–∞: {source.get_language_display()}")
        self.stdout.write(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {source.get_category_display()}")
        self.stdout.write(f"üîó URL: {source.url}")
        self.stdout.write(f"‚ö° –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–µ' if source.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–µ'}")
        self.stdout.write(f"üïí –ß–∞—Å—Ç–æ—Ç–∞: {source.fetch_frequency} —Ö–≤")
        self.stdout.write(f"üìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {source.last_fetched or '–ù—ñ–∫–æ–ª–∏'}")
        
        self.stdout.write(f"\n‚úÖ –í —Ä–µ–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ —Ü–µ –¥–∂–µ—Ä–µ–ª–æ –±—É–¥–µ –ø–∞—Ä—Å–∏—Ç–∏—Å—è!")