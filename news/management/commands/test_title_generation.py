from django.core.management.base import BaseCommand
from news.models import RawArticle
from news.services.ai_processor import AINewsProcessor


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--article-id',
            type=int,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–∏—Ä–æ—ó —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è'
        )
        
        parser.add_argument(
            '--limit',
            type=int,
            default=3,
            help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º: 3)'
        )

    def handle(self, *args, **options):
        article_id = options.get('article_id')
        limit = options.get('limit')
        
        self.stdout.write(
            self.style.SUCCESS('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ì–ï–ù–ï–†–ê–¶–Ü–á –ó–ê–ì–û–õ–û–í–ö–Ü–í')
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if article_id:
            try:
                articles = [RawArticle.objects.get(id=article_id)]
            except RawArticle.DoesNotExist:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –°–∏—Ä–∞ —Å—Ç–∞—Ç—Ç—è –∑ ID {article_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞')
                )
                return
        else:
            articles = RawArticle.objects.filter(
                is_processed=False,
                is_duplicate=False
            ).order_by('-published_at')[:limit]
        
        if not articles:
            self.stdout.write(
                self.style.WARNING('üì≠ –ù–µ–º–∞—î –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
            )
            return
        
        processor = AINewsProcessor()
        
        for i, article in enumerate(articles, 1):
            self.stdout.write(f'\n{"="*80}')
            self.stdout.write(f'üß™ –¢–ï–°–¢ {i}/{len(articles)}')
            self.stdout.write(f'{"="*80}')
            
            self.stdout.write(f'üì∞ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:')
            self.stdout.write(f'   {article.title[:100]}...')
            
            self.stdout.write(f'üè∑Ô∏è  –î–∂–µ—Ä–µ–ª–æ: {article.source.name if article.source else "Unknown"}')
            self.stdout.write(f'üîó URL: {article.original_url[:60]}...')
            
            try:
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è
                category_info = processor._categorize_article(article)
                self.stdout.write(f'üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_info["category"]}')
                
                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
                self.stdout.write('ü§ñ –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç...')
                content = processor._create_multilingual_content(article, category_info)
                
                self.stdout.write('\nüéØ –ó–ì–ï–ù–ï–†–û–í–ê–ù–Ü –ó–ê–ì–û–õ–û–í–ö–ò:')
                self.stdout.write('-' * 60)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å
                original_clean = article.title.strip().lower()
                
                for lang in ['en', 'uk', 'pl']:
                    title_key = f'title_{lang}'
                    generated_title = content.get(title_key, 'N/A')
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
                    is_unique = generated_title.strip().lower() != original_clean
                    status = '‚úÖ –£–ù–Ü–ö–ê–õ–¨–ù–ò–ô' if is_unique else '‚ùå –Ü–î–ï–ù–¢–ò–ß–ù–ò–ô'
                    
                    lang_flag = {'en': 'üá¨üáß', 'uk': 'üá∫üá¶', 'pl': 'üáµüá±'}[lang]
                    
                    self.stdout.write(f'{lang_flag} {lang.upper()}: {generated_title[:80]}...')
                    self.stdout.write(f'   {status}')
                
                # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
                titles = [content.get(f'title_{lang}', '') for lang in ['en', 'uk', 'pl']]
                unique_count = sum(1 for title in titles if title.strip().lower() != original_clean)
                
                if unique_count == 3:
                    self.stdout.write(self.style.SUCCESS('\nüéâ –í–°–Ü –ó–ê–ì–û–õ–û–í–ö–ò –£–ù–Ü–ö–ê–õ–¨–ù–Ü!'))
                elif unique_count > 0:
                    self.stdout.write(self.style.WARNING(f'\n‚ö†Ô∏è {unique_count}/3 –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ'))
                else:
                    self.stdout.write(self.style.ERROR('\nüí• –í–°–Ü –ó–ê–ì–û–õ–û–í–ö–ò –Ü–î–ï–ù–¢–ò–ß–ù–Ü –û–†–ò–ì–Ü–ù–ê–õ–£!'))
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}')
                )
        
        self.stdout.write(f'\n{"="*80}')
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        )
