from django.core.management.base import BaseCommand
from django.utils import timezone
from typing import List
from news.services.rss_parser import RSSParser
from news.services.smart_article_selector import SmartArticleSelector
from news.services.ai_processor import AINewsProcessor
from news.models import RawArticle

class Command(BaseCommand):
    help = '–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω: RSS ‚Üí Smart Selection ‚Üí FiveFilters ‚Üí AI ‚Üí Publish'

    def add_arguments(self, parser):
        parser.add_argument('--limit', type=int, default=10, help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏')
        parser.add_argument('--category', type=str, help='–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó')
        parser.add_argument('--dry-run', action='store_true', help='–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º')
        parser.add_argument('--verbose', action='store_true', help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')
    
    def handle(self, *args, **options):
        self.stdout.write("üöÄ ENHANCED NEWS PIPELINE")
        self.stdout.write("=" * 50)
        
        # 1. Smart Selection
        self.stdout.write("üìä –ö—Ä–æ–∫ 1: Smart Selection...")
        selector = SmartArticleSelector()
        selected_articles = selector.select_top_articles(
            limit=options['limit'],
            category=options.get('category')
        )
        
        if not selected_articles:
            self.stdout.write("‚ùå –ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
            return
        
        self.stdout.write(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ {len(selected_articles)} —Å—Ç–∞—Ç–µ–π")
        
        # 2. FiveFilters Enhancement
        self.stdout.write("\nüîç –ö—Ä–æ–∫ 2: FiveFilters Enhancement...")
        enhanced_count = self._enhance_articles_with_fulltext(selected_articles, options['dry_run'])
        
        # 3. AI Processing
        self.stdout.write(f"\nü§ñ –ö—Ä–æ–∫ 3: AI Processing...")
        if not options['dry_run']:
            processed_count = self._process_articles_with_ai(selected_articles)
            self.stdout.write(f"‚úÖ AI –æ–±—Ä–æ–±–∏–≤ {processed_count} —Å—Ç–∞—Ç–µ–π")
        else:
            self.stdout.write("‚ö†Ô∏è DRY RUN - AI –æ–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        
        self.stdout.write(f"\nüéâ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    def _enhance_articles_with_fulltext(self, articles: List[RawArticle], dry_run: bool) -> int:
        """–ó–±–∞–≥–∞—á—É—î —Å—Ç–∞—Ç—Ç—ñ –ø–æ–≤–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º"""
        from news.services.fulltext_extractor import FullTextExtractor
        
        if dry_run:
            self.stdout.write("‚ö†Ô∏è DRY RUN - FiveFilters –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return 0
        
        extractor = FullTextExtractor()
        enhanced_count = 0
        
        for i, article in enumerate(articles, 1):
            self.stdout.write(f"[{i}/{len(articles)}] {article.title[:50]}...")
            
            try:
                full_content = extractor.extract_article(article.original_url)
                
                if full_content and len(full_content) > len(article.content or ""):
                    original_length = len(article.content or "")
                    article.content = full_content
                    article.save()
                    
                    improvement = len(full_content) - original_length
                    self.stdout.write(f"  ‚úÖ +{improvement} —Å–∏–º–≤–æ–ª—ñ–≤")
                    enhanced_count += 1
                else:
                    self.stdout.write(f"  ‚ö†Ô∏è RSS –∫–æ–Ω—Ç–µ–Ω—Ç –∫—Ä–∞—â–∏–π")
                    
            except Exception as e:
                self.stdout.write(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        return enhanced_count
    
    def _process_articles_with_ai(self, articles: List[RawArticle]) -> int:
        """–û–±—Ä–æ–±–ª—è—î —Å—Ç–∞—Ç—Ç—ñ —á–µ—Ä–µ–∑ AI"""
        processor = AINewsProcessor()
        processed_count = 0
        
        for article in articles:
            try:
                result = processor.process_article(article)
                if result:
                    processed_count += 1
                    article.is_processed = True
                    article.save()
            except Exception as e:
                self.stdout.write(f"‚ùå AI –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {article.title[:30]}: {e}")
        
        return processed_count