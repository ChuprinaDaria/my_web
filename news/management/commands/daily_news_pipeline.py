# news/management/commands/daily_news_pipeline.py
import time
from django.core.management.base import BaseCommand, CommandError
from django.core.management import call_command
from django.utils import timezone
from datetime import datetime, timedelta
from news.services.smart_news_pipeline import SmartNewsPipeline
from news.models import RawArticle, ProcessedArticle

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π Smart News Pipeline –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–∏–Ω'

    def add_arguments(self, parser):
        parser.add_argument(
            '--date',
            type=str,
            help='–î–∞—Ç–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–∑–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º —Å—å–æ–≥–æ–¥–Ω—ñ)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö'
        )
        parser.add_argument(
            '--full-pipeline',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω (—Å–µ–ª–µ–∫—Ü—ñ—è + –æ–±—Ä–æ–±–∫–∞ + –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è)'
        )
        parser.add_argument(
            '--force-reprocess',
            action='store_true',
            help='–ü–µ—Ä–µ–æ–±—Ä–æ–±–∏—Ç–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ'
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=5,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–ø —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º 5)'
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ –ø—Ä–æ—Ü–µ—Å—É'
        )
        parser.add_argument(
            '--skip-rss',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ RSS (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ —Å—Ç–∞—Ç—Ç—ñ)'
        )
        parser.add_argument(
            '--auto-publish',
            action='store_true',
            help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ç–æ–ø —Å—Ç–∞—Ç—Ç—ñ'
        )
        parser.add_argument(
            '--health-check',
            action='store_true',
            help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤\'—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞'
        )

    def handle(self, *args, **options):
        start_time = time.time()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        if options['verbose']:
            import logging
            logging.getLogger('news.services').setLevel(logging.INFO)
        
        # Health check
        if options['health_check']:
            self._run_health_check()
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏
        target_date = self._parse_date(options.get('date'))
        
        # –†–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏
        dry_run = options['dry_run']
        full_pipeline = options['full_pipeline']
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        mode_text = "üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú" if dry_run else "üöÄ –†–û–ë–û–ß–ò–ô –†–ï–ñ–ò–ú"
        pipeline_text = "–ü–û–í–ù–ò–ô –ü–ê–ô–ü–õ–ê–ô–ù" if full_pipeline else "–ë–ê–ó–û–í–ê –û–ë–†–û–ë–ö–ê"
        
        self.stdout.write(
            self.style.SUCCESS(f'üöÄ LAZYSOFT Smart News Pipeline')
        )
        self.stdout.write(f'{mode_text} | {pipeline_text} | üìÖ {target_date}')
        self.stdout.write('=' * 70)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–ï–†–ï–î –æ–±—Ä–æ–±–∫–æ—é
        self._show_pre_pipeline_stats(target_date)
        
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–∞–π–ø–ª–∞–π–Ω
            pipeline = SmartNewsPipeline()
            
            # –ö—Ä–æ–∫ 0: –ü–∞—Ä—Å–∏–Ω–≥ RSS (—è–∫—â–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ)
            if not options['skip_rss']:
                self._run_rss_parsing(target_date, dry_run)
            
            if full_pipeline:
                # –ü–æ–≤–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω
                self.stdout.write('\nüîÑ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ Smart News Pipeline...')
                result = pipeline.run_daily_pipeline(
                    date=target_date, 
                    dry_run=dry_run
                )
                
                # –ê–≤—Ç–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è
                if options['auto_publish'] and not dry_run:
                    self._auto_publish_articles(result)
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
                self._show_full_pipeline_results(result)
                
            else:
                # –ë–∞–∑–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ - —Ç—ñ–ª—å–∫–∏ —Å–µ–ª–µ–∫—Ü—ñ—è —Ç–æ–ø —Å—Ç–∞—Ç–µ–π
                self._run_basic_processing(pipeline, target_date, options)
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–Ü–°–õ–Ø –æ–±—Ä–æ–±–∫–∏
            self._show_post_pipeline_stats(target_date)
            
            # –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            execution_time = time.time() - start_time
            self.stdout.write(
                self.style.SUCCESS(f'\n‚è±Ô∏è Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {execution_time:.1f} —Å–µ–∫—É–Ω–¥')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}')
            )
            raise CommandError(f'Pipeline –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {str(e)}')

    def _parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—å–æ–≥–æ–¥–Ω—ñ"""
        if date_str:
            try:
                return datetime.strptime(date_str, '%Y-%m-%d').date()
            except ValueError:
                raise CommandError('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD')
        return timezone.now().date()

    def _run_health_check(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
        self.stdout.write(
            self.style.SUCCESS('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è Smart News Pipeline...')
        )
        
        try:
            pipeline = SmartNewsPipeline()
            health = pipeline.health_check()
            
            self.stdout.write('\nüìä –°–¢–ê–ù –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í:')
            self.stdout.write('-' * 50)
            
            components = [
                ('ü§ñ AI Processor', health.get('ai_processor', False)),
                ('üéØ Audience Analyzer', health.get('audience_analyzer', False)),
                ('üìÑ Full Parser', health.get('full_parser', False)),
            ]
            
            for name, status in components:
                icon = '‚úÖ' if status else '‚ùå'
                status_text = 'OK' if status else 'FAIL'
                style = self.style.SUCCESS if status else self.style.ERROR
                self.stdout.write(style(f'   {icon} {name}: {status_text}'))
            
            # –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
            overall = health.get('overall', False)
            if overall:
                self.stdout.write(
                    self.style.SUCCESS('\nüéâ –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ!')
                )
            else:
                self.stdout.write(
                    self.style.ERROR('\n‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏!')
                )
                if 'error' in health:
                    self.stdout.write(f'   –î–µ—Ç–∞–ª—ñ: {health["error"]}')
                    
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ health check: {e}')
            )

    def _show_pre_pipeline_stats(self, date):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        # –°—Ç–∞—Ç—Ç—ñ –∑–∞ –¥–∞—Ç—É
        raw_today = RawArticle.objects.filter(fetched_at__date=date)
        processed_today = ProcessedArticle.objects.filter(created_at__date=date)
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_raw = RawArticle.objects.count()
        total_processed = ProcessedArticle.objects.count()
        pending = RawArticle.objects.filter(is_processed=False, is_duplicate=False).count()
        
        self.stdout.write(f'\nüìä –ü–û–¢–û–ß–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write('-' * 40)
        self.stdout.write(f'üìÖ –ó–∞ {date}:')
        self.stdout.write(f'   üì∞ –°–∏—Ä–∏—Ö —Å—Ç–∞—Ç–µ–π: {raw_today.count()}')
        self.stdout.write(f'    –û–±—Ä–æ–±–ª–µ–Ω–∏—Ö: {processed_today.count()}')
        self.stdout.write(f'\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ –±–∞–∑–∞:')
        self.stdout.write(f'   üìö –í—Å—å–æ–≥–æ —Å–∏—Ä–∏—Ö: {total_raw:,}')
        self.stdout.write(f'   üé® –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö: {total_processed:,}')
        self.stdout.write(f'   ‚è≥ –û—á—ñ–∫—É—é—Ç—å –æ–±—Ä–æ–±–∫–∏: {pending:,}')

    def _run_rss_parsing(self, date, dry_run):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–∞—Ä—Å–∏–Ω–≥ RSS –∑–∞ –¥–∞—Ç—É"""
        self.stdout.write('\nüì° –ö—Ä–æ–∫ 0: –ü–∞—Ä—Å–∏–Ω–≥ RSS –¥–∂–µ—Ä–µ–ª...')
        
        try:
            from io import StringIO
            
            # –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –≤–∏–≤—ñ–¥ RSS –∫–æ–º–∞–Ω–¥–∏
            out = StringIO()
            call_command(
                'parse_rss',
                date=date.strftime('%Y-%m-%d'),
                verbose=True,
                stdout=out
            )
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = out.getvalue()
            if 'üÜï –ù–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π:' in output:
                # –í–∏—Ç—è–≥—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π
                for line in output.split('\n'):
                    if 'üÜï –ù–æ–≤–∏—Ö —Å—Ç–∞—Ç–µ–π:' in line:
                        self.stdout.write(f'   {line.strip()}')
                        break
            else:
                self.stdout.write('   üì° RSS –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ RSS –ø–∞—Ä—Å–∏–Ω–≥—É: {e}')
            )

    def _run_basic_processing(self, pipeline, date, options):
        """–ó–∞–ø—É—Å–∫–∞—î –±–∞–∑–æ–≤—É –æ–±—Ä–æ–±–∫—É - —Ç—ñ–ª—å–∫–∏ —Å–µ–ª–µ–∫—Ü—ñ—è —Ç–æ–ø —Å—Ç–∞—Ç–µ–π"""
        self.stdout.write('\nüéØ –ë–∞–∑–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞: –°–µ–ª–µ–∫—Ü—ñ—è —Ç–æ–ø —Å—Ç–∞—Ç–µ–π...')
        
        try:
            limit = options['limit']
            top_articles = pipeline.audience_analyzer.get_daily_top_articles(
                date=date, 
                limit=limit
            )
            
            if top_articles:
                self.stdout.write(f'\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(top_articles)} —Ç–æ–ø —Å—Ç–∞—Ç–µ–π:')
                self.stdout.write('-' * 60)
                
                for i, (article, analysis) in enumerate(top_articles, 1):
                    # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —è–∫–æ—Å—Ç—ñ
                    score_color = self.style.SUCCESS if analysis.relevance_score >= 8 else \
                                  self.style.WARNING if analysis.relevance_score >= 6 else \
                                  self.style.ERROR
                    
                    self.stdout.write(
                        f'   {i}. {score_color(f"[{analysis.relevance_score}/10]")} '
                        f'{article.title[:55]}...'
                    )
                    self.stdout.write(
                        f'      üíº {analysis.business_impact} –≤–ø–ª–∏–≤ | '
                        f'üí∞ {analysis.cost_implications} | '
                        f'üéØ {analysis.target_audience}'
                    )
                
                self.stdout.write(
                    f'\nüí° –î–ª—è –ø–æ–≤–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ --full-pipeline'
                )
            else:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏: {e}')
            )

    def _show_full_pipeline_results(self, result):
        """–ü–æ–∫–∞–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        self.stdout.write('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–í–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê:')
        self.stdout.write('=' * 50)
        
        # –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
        self.stdout.write(f'üìÑ –°—Ç–∞—Ç–µ–π –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {result.total_articles_processed}')
        self.stdout.write(f'üéØ –¢–æ–ø —Å—Ç–∞—Ç–µ–π –≤–∏–±—Ä–∞–Ω–æ: {result.top_articles_selected}')
        self.stdout.write(f'üì¢ –°—Ç–∞—Ç–µ–π –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {result.articles_published}')
        self.stdout.write(f'üì∞ –î–∞–π–¥–∂–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {"‚úÖ" if result.digest_created else "‚ùå"}')
        self.stdout.write(f'üí∞ ROI —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: {"‚úÖ" if result.roi_calculated else "‚ùå"}')
        
        # –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
        success_rate = result.success_rate
        if success_rate >= 80:
            style = self.style.SUCCESS
            icon = 'üéâ'
        elif success_rate >= 50:
            style = self.style.WARNING
            icon = '‚ö†Ô∏è'
        else:
            style = self.style.ERROR
            icon = '‚ùå'
        
        self.stdout.write(style(f'\n{icon} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%'))
        
        # –ü–æ–º–∏–ª–∫–∏
        if result.errors:
            self.stdout.write('\n‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ò:')
            for i, error in enumerate(result.errors, 1):
                self.stdout.write(f'   {i}. {error}')

    def _auto_publish_articles(self, result):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—É–±–ª—ñ–∫—É—î –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ"""
        if result.articles_published > 0:
            self.stdout.write(f'\nüì¢ –ê–≤—Ç–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è {result.articles_published} —Å—Ç–∞—Ç–µ–π...')
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ Telegram —á–µ—Ä–µ–∑ Celery
            try:
                from news.tasks import auto_publish_recent_articles
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                task = auto_publish_recent_articles.delay('uk', 3)
                self.stdout.write(f'   üì¢ –°—Ç–≤–æ—Ä–µ–Ω–æ Celery –∑–∞–≤–¥–∞–Ω–Ω—è: {task.id}')
                self.stdout.write(f'   ‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ Telegram –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —á–µ—Ä–≥—É')
                
            except Exception as e:
                self.stdout.write(f'   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}')
                
                # Fallback - –ø—Ä—è–º–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è
                try:
                    recent_articles = ProcessedArticle.objects.filter(
                        status='published',
                        published_at__date=result.date
                    ).order_by('-priority', '-published_at')[:3]
                    
                    posted_count = 0
                    for article in recent_articles:
                        try:
                            call_command('post_telegram', uuid=str(article.uuid), lang='uk')
                            posted_count += 1
                        except Exception as e:
                            self.stdout.write(f'   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥—É: {e}')
                    
                    self.stdout.write(f'   ‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ Telegram (fallback): {posted_count} —Å—Ç–∞—Ç–µ–π')
                    
                except Exception as e:
                    self.stdout.write(f'   ‚ùå –ü–æ–º–∏–ª–∫–∞ fallback –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}')

    def _show_post_pipeline_stats(self, date):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        # –û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        processed_today = ProcessedArticle.objects.filter(created_at__date=date)
        published_today = ProcessedArticle.objects.filter(
            published_at__date=date,
            status='published'
        )
        pending = RawArticle.objects.filter(is_processed=False, is_duplicate=False).count()
        
        self.stdout.write(f'\nüìà –§–Ü–ù–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write('-' * 40)
        self.stdout.write(f'üìÖ –ó–∞ {date}:')
        self.stdout.write(f'   üé® –û–±—Ä–æ–±–ª–µ–Ω–æ: {processed_today.count()}')
        self.stdout.write(f'   üì¢ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {published_today.count()}')
        self.stdout.write(f'   ‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {pending:,}')
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –¥–µ–Ω—å
        if processed_today.exists():
            from django.db.models import Count
            top_categories = processed_today.values(
                'category__name_uk', 'category__icon'
            ).annotate(count=Count('id')).order_by('-count')[:3]
            
            if top_categories:
                self.stdout.write(f'\nüèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:')
                for cat in top_categories:
                    icon = cat['category__icon'] or 'üìÑ'
                    name = cat['category__name_uk'] or '–ù–µ–≤—ñ–¥–æ–º–∞'
                    count = cat['count']
                    self.stdout.write(f'   {icon} {name}: {count} —Å—Ç–∞—Ç–µ–π')