from django.core.management.base import BaseCommand
from news.models import ProcessedArticle, RawArticle
from news.services.smart_news_pipeline import SmartNewsPipeline
from news.services.ai_processor.enhanced_ai_analyzer import EnhancedAIAnalyzer

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é Business Impact –∫–æ–Ω—Ç–µ–Ω—Ç—É'

    def add_arguments(self, parser):
        parser.add_argument('--article-id', type=int, help='ID —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
        parser.add_argument('--dry-run', action='store_true', help='–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º')

    def handle(self, *args, **options):
        self.stdout.write("üß™ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–Ü–á BUSINESS IMPACT")
        self.stdout.write("=" * 50)
        
        if options['article_id']:
            try:
                article = ProcessedArticle.objects.get(id=options['article_id'])
                self.stdout.write(f"üìÑ –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–∞—Ç—Ç—é: {article.title_en}")
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–∏—Ä—É —Å—Ç–∞—Ç—Ç—é
                raw_article = RawArticle.objects.filter(
                    title__icontains=article.title_en[:50]
                ).first()
                
                if raw_article:
                    self.stdout.write("üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏—Ä—É —Å—Ç–∞—Ç—Ç—é, —Ç–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é...")
                    
                    if not options['dry_run']:
                        # –¢–µ—Å—Ç—É—î–º–æ Enhanced AI Analyzer
                        enhanced_analyzer = EnhancedAIAnalyzer()
                        enhanced_insights = enhanced_analyzer.analyze_full_article_with_insights(
                            raw_article, 
                            raw_article.content or raw_article.summary
                        )
                        
                        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                        if enhanced_insights.business_insights:
                            en_insights = enhanced_insights.business_insights.get('english_audience', {})
                            uk_insights = enhanced_insights.business_insights.get('ukrainian_audience', {})
                            
                            self.stdout.write(f"\nüìä BUSINESS IMPACT EN ({len(en_insights.get('main_insight', ''))} —Å–∏–º–≤–æ–ª—ñ–≤):")
                            self.stdout.write("-" * 50)
                            self.stdout.write(en_insights.get('main_insight', '')[:500] + "...")
                            
                            self.stdout.write(f"\nüìä BUSINESS IMPACT UK ({len(uk_insights.get('main_insight', ''))} —Å–∏–º–≤–æ–ª—ñ–≤):")
                            self.stdout.write("-" * 50)
                            self.stdout.write(uk_insights.get('main_insight', '')[:500] + "...")
                            
                            # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                            pipeline = SmartNewsPipeline()
                            full_content_en = pipeline._generate_full_content(
                                raw_article.content or raw_article.summary, 'en'
                            )
                            
                            self.stdout.write(f"\nüìù FULL CONTENT EN ({len(full_content_en)} —Å–∏–º–≤–æ–ª—ñ–≤):")
                            self.stdout.write("-" * 50)
                            self.stdout.write(full_content_en[:500] + "...")
                            
                        else:
                            self.stdout.write("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—Å–∞–π—Ç–∏")
                    else:
                        self.stdout.write("‚ö†Ô∏è DRY RUN - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                else:
                    self.stdout.write("‚ùå –°–∏—Ä—É —Å—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    
            except ProcessedArticle.DoesNotExist:
                self.stdout.write("‚ùå –°—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            self.stdout.write("‚ùå –í–∫–∞–∂—ñ—Ç—å --article-id")
