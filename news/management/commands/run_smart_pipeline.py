from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from datetime import datetime, timedelta
from news.services.smart_news_pipeline import SmartNewsPipeline

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞—î Smart News Pipeline –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–∏–Ω'

    def add_arguments(self, parser):
        parser.add_argument(
            '--date',
            type=str,
            help='–î–∞—Ç–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–∑–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º —Å—å–æ–≥–æ–¥–Ω—ñ)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö'
        )
        parser.add_argument(
            '--full-pipeline',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω (—Å–µ–ª–µ–∫—Ü—ñ—è + –æ–±—Ä–æ–±–∫–∞ + –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è)'
        )
        parser.add_argument(
            '--health-check',
            action='store_true',
            help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤\'—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞'
        )
        parser.add_argument(
            '--stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–±–æ—Ç–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞'
        )

    def handle(self, *args, **options):
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–∞–π–ø–ª–∞–π–Ω
        pipeline = SmartNewsPipeline()
        
        # Health check
        if options['health_check']:
            self.stdout.write(
                self.style.SUCCESS('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...')
            )
            
            health = pipeline.health_check()
            
            if health.get('overall', False):
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ!')
                )
                for component, status in health.items():
                    if component != 'overall':
                        icon = '‚úÖ' if status else '‚ùå'
                        self.stdout.write(f'   {icon} {component}: {"OK" if status else "FAIL"}')
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå –í–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏!')
                )
                if 'error' in health:
                    self.stdout.write(f'   –ü–æ–º–∏–ª–∫–∞: {health["error"]}')
            
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if options['stats']:
            self.stdout.write(
                self.style.SUCCESS('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Smart News Pipeline:')
            )
            
            stats = pipeline.get_pipeline_statistics()
            
            self.stdout.write(f'üîÑ –í—Å—å–æ–≥–æ –∑–∞–ø—É—Å–∫—ñ–≤: {stats["total_runs"]}')
            self.stdout.write(f'‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: {stats["successful_runs"]}')
            self.stdout.write(f'üìÑ –°—Ç–∞—Ç–µ–π –æ–±—Ä–æ–±–ª–µ–Ω–æ: {stats["total_articles_processed"]}')
            self.stdout.write(f'‚è∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {stats["avg_processing_time"]:.1f}—Å')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            components = stats.get('components', {})
            if components:
                self.stdout.write('\nüì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:')
                
                # Full Parser
                parser_stats = components.get('full_parser', {})
                if parser_stats:
                    self.stdout.write(f'   üìÑ Full Parser: {parser_stats.get("success_rate_percent", 0):.1f}% —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å')
                
                # AI Processor
                ai_stats = components.get('ai_processor', {})
                if ai_stats:
                    self.stdout.write(f'   ü§ñ AI Processor: ${ai_stats.get("total_cost", 0):.4f} –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å')
            
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏
        target_date = None
        if options['date']:
            try:
                target_date = datetime.strptime(options['date'], '%Y-%m-%d').date()
            except ValueError:
                raise CommandError('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD')
        else:
            target_date = timezone.now().date()
        
        # –†–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏
        dry_run = options['dry_run']
        full_pipeline = options['full_pipeline']
        
        mode_text = "üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú" if dry_run else "üöÄ –†–û–ë–û–ß–ò–ô –†–ï–ñ–ò–ú"
        pipeline_text = "–ü–û–í–ù–ò–ô –ü–ê–ô–ü–õ–ê–ô–ù" if full_pipeline else "–ë–ê–ó–û–í–ê –û–ë–†–û–ë–ö–ê"
        
        self.stdout.write(
            self.style.SUCCESS(f'{mode_text} - {pipeline_text}')
        )
        self.stdout.write(f'üìÖ –î–∞—Ç–∞ –æ–±—Ä–æ–±–∫–∏: {target_date}')
        self.stdout.write('-' * 60)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞–π–ø–ª–∞–π–Ω
        try:
            if full_pipeline:
                # –ü–æ–≤–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω
                self.stdout.write('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ Smart News Pipeline...')
                result = pipeline.run_daily_pipeline(date=target_date, dry_run=dry_run)
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
                self.stdout.write('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:')
                self.stdout.write(f'‚è∞ –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {result.processing_time:.1f} —Å–µ–∫—É–Ω–¥')
                self.stdout.write(f'üìÑ –°—Ç–∞—Ç–µ–π –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {result.total_articles_processed}')
                self.stdout.write(f'üéØ –¢–æ–ø —Å—Ç–∞—Ç–µ–π –≤–∏–±—Ä–∞–Ω–æ: {result.top_articles_selected}')
                self.stdout.write(f'üì¢ –°—Ç–∞—Ç–µ–π –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {result.articles_published}')
                self.stdout.write(f'üì∞ –î–∞–π–¥–∂–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {"‚úÖ" if result.digest_created else "‚ùå"}')
                self.stdout.write(f'üí∞ ROI —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: {"‚úÖ" if result.roi_calculated else "‚ùå"}')
                self.stdout.write(f'üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {result.success_rate:.1f}%')
                
                if result.errors:
                    self.stdout.write('\n‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ò:')
                    for error in result.errors:
                        self.stdout.write(f'   ‚ùå {error}')
                
                if result.success_rate >= 80:
                    self.stdout.write(
                        self.style.SUCCESS('\nüéâ –ü–∞–π–ø–ª–∞–π–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!')
                    )
                elif result.success_rate >= 50:
                    self.stdout.write(
                        self.style.WARNING('\n‚ö†Ô∏è –ü–∞–π–ø–ª–∞–π–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏')
                    )
                else:
                    self.stdout.write(
                        self.style.ERROR('\n‚ùå –ü–∞–π–ø–ª–∞–π–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏')
                    )
            
            else:
                # –ë–∞–∑–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ (—Ç—ñ–ª—å–∫–∏ —Å–µ–ª–µ–∫—Ü—ñ—è —Ç–æ–ø —Å—Ç–∞—Ç–µ–π)
                self.stdout.write('üéØ –ó–∞–ø—É—Å–∫ —Å–µ–ª–µ–∫—Ü—ñ—ó —Ç–æ–ø —Å—Ç–∞—Ç–µ–π...')
                
                top_articles = pipeline.audience_analyzer.get_daily_top_articles(
                    date=target_date, limit=5
                )
                
                if top_articles:
                    self.stdout.write(f'\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(top_articles)} —Ç–æ–ø —Å—Ç–∞—Ç–µ–π:')
                    
                    for i, (article, analysis) in enumerate(top_articles, 1):
                        self.stdout.write(
                            f'   {i}. [{analysis.relevance_score}/10] {article.title[:60]}...'
                        )
                        self.stdout.write(
                            f'      üíº {analysis.business_impact} –≤–ø–ª–∏–≤ | üí∞ {analysis.cost_implications}'
                        )
                    
                    if not dry_run:
                        self.stdout.write(
                            '\nüí° –î–ª—è –ø–æ–≤–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ --full-pipeline'
                        )
                else:
                    self.stdout.write(
                        self.style.WARNING('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏')
                    )
        
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}')
            )
            raise CommandError(f'–ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {str(e)}')
        
        self.stdout.write('\n‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')