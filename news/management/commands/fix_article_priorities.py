from django.core.management.base import BaseCommand
from django.utils import timezone
from news.models import ProcessedArticle
from news.services.ai_processor.ai_processor_main import AINewsProcessor


class Command(BaseCommand):
    help = '–í–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —Ç–∞ —Ç–æ–ø-—Å—Ç–∞—Ç—Ç—ñ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Å—Ç–∞—Ç–µ–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            default=50,
            help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º: 50)'
        )
        
        parser.add_argument(
            '--days',
            type=int,
            default=7,
            help='–û–±—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º: 7)'
        )
        
        parser.add_argument(
            '--reset-top',
            action='store_true',
            help='–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ is_top_article –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –Ω–æ–≤–∏—Ö'
        )

    def handle(self, *args, **options):
        limit = options['limit']
        days = options['days']
        reset_top = options['reset_top']
        
        self.stdout.write(
            self.style.SUCCESS('üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–†–Ü–û–†–ò–¢–ï–¢–Ü–í –°–¢–ê–¢–ï–ô')
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ
        from datetime import timedelta
        cutoff_date = timezone.now() - timedelta(days=days)
        
        articles = ProcessedArticle.objects.filter(
            status='published',
            created_at__gte=cutoff_date
        ).order_by('-created_at')[:limit]
        
        if not articles:
            self.stdout.write(
                self.style.WARNING(f'üì≠ –ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤')
            )
            return
        
        self.stdout.write(f'üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏')
        
        # –°–∫–∏–¥–∞—î–º–æ —Ç–æ–ø-—Å—Ç–∞—Ç—Ç—ñ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if reset_top:
            ProcessedArticle.objects.filter(
                is_top_article=True,
                created_at__gte=cutoff_date
            ).update(
                is_top_article=False,
                article_rank=None,
                top_selection_date=None
            )
            self.stdout.write('üîÑ –°–∫–∏–Ω—É—Ç–æ –≤—Å—ñ —Ç–æ–ø-—Å—Ç–∞—Ç—Ç—ñ')
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI –ø—Ä–æ—Ü–µ—Å–æ—Ä –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó
        processor = AINewsProcessor()
        processor._auto_prioritize_articles(list(articles))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        top_articles = ProcessedArticle.objects.filter(
            is_top_article=True,
            created_at__gte=cutoff_date
        ).count()
        
        high_priority = ProcessedArticle.objects.filter(
            priority__gte=4,
            created_at__gte=cutoff_date
        ).count()
        
        self.stdout.write('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:')
        self.stdout.write('=' * 50)
        self.stdout.write(f'üèÜ –¢–æ–ø-—Å—Ç–∞—Ç–µ–π: {top_articles}')
        self.stdout.write(f'‚≠ê –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (4-5): {high_priority}')
        self.stdout.write(f'üìÑ –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {len(articles)}')
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        )
