import time
from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone

from news.models import RawArticle, ProcessedArticle
from news.services.ai_processor import AINewsProcessor
from news.services.ai_processor.ai_processor_database import AIProcessorDatabase


class Command(BaseCommand):
    help = 'AI –æ–±—Ä–æ–±–∫–∞ —Å–∏—Ä–∏—Ö —Å—Ç–∞—Ç–µ–π —É –≥–æ—Ç–æ–≤—ñ –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            default=10,
            help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º: 10)'
        )
        
        parser.add_argument(
            '--category',
            type=str,
            choices=[
                'ai', 'automation', 'crm', 'seo', 'social', 
                'chatbots', 'ecommerce', 'fintech', 'corporate', 'general'
            ],
            help='–û–±—Ä–æ–±–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—Ç—ñ –∑ –ø–µ–≤–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
        )
        
        parser.add_argument(
            '--article-id',
            type=int,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏'
        )
        
        parser.add_argument(
            '--auto-publish',
            action='store_true',
            help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ'
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ –ø—Ä–æ—Ü–µ—Å—É'
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ (–ø–æ–∫–∞–∑–∞—Ç–∏ —â–æ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ)'
        )
        parser.add_argument('--tg-post', action='store_true', help='–û–¥—Ä–∞–∑—É –ø–æ—Å—Ç–∏—Ç–∏ –≤ Telegram –ø—ñ—Å–ª—è –ø–∞–±–ª—ñ—à—É')
        parser.add_argument('--lang', default='uk', help='–ú–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –¢–ì (uk/en/pl)')


    def handle(self, *args, **options):
        start_time = time.time()
        
        self.stdout.write(
            self.style.SUCCESS('ü§ñ AI –ü–†–û–¶–ï–°–û–† –ù–û–í–ò–ù LAZYSOFT')
        )
        
        if options['dry_run']:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú - –Ω—ñ—á–æ–≥–æ –Ω–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è')
            )
            self._show_pending_articles(options)
            return
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ AI –ø—Ä–æ—Ü–µ—Å–æ—Ä
            processor = AINewsProcessor()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å AI
            if not self._check_ai_availability(processor):
                return
            
            # –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ç–∞—Ç—Ç—ñ
            if options['article_id']:
                self._process_single_article(processor, options['article_id'], options)
            else:
                # –ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞
                self._process_batch(processor, options)
            
            # –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            execution_time = time.time() - start_time
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚è±Ô∏è AI –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥'
                )
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ AI –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞: {e}')
            )

    def _check_ai_availability(self, processor):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å AI –º–æ–¥–µ–ª–µ–π"""
        if not processor.openai_client and not processor.gemini_model:
            self.stdout.write(
                self.style.ERROR(
                    '‚ùå –ñ–æ–¥–Ω–∞ AI –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!\n'
                    '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OPENAI_API_KEY –∞–±–æ GEMINI_API_KEY –≤ settings.py'
                )
            )
            return False
        
        if processor.openai_client:
            self.stdout.write(' OpenAI –¥–æ—Å—Ç—É–ø–Ω–∏–π')
        if processor.gemini_model:
            self.stdout.write(' Gemini –¥–æ—Å—Ç—É–ø–Ω–∏–π')
            
        return True

    def _show_pending_articles(self, options):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—Ç—ñ —â–æ –±—É–¥—É—Ç—å –æ–±—Ä–æ–±–ª–µ–Ω—ñ"""
        queryset = RawArticle.objects.filter(
            is_processed=False,
            is_duplicate=False
        ).order_by('-published_at')
        
        if options['category']:
            queryset = queryset.filter(source__category=options['category'])
        
        limit = options.get('limit', 10)
        articles = list(queryset[:limit])
        
        self.stdout.write(f'\nüìä –°–¢–ê–¢–¢–Ü –î–û –û–ë–†–û–ë–ö–ò ({len(articles)}):\n')
        self.stdout.write('=' * 70)
        
        for i, article in enumerate(articles, 1):
            self.stdout.write(
                f'{i:2}. üì∞ {article.title[:50]}...\n'
                f'    üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {article.source.category}\n'
                f'    üìÖ –î–∞—Ç–∞: {article.published_at.date()}\n'
                f'    üîó –î–∂–µ—Ä–µ–ª–æ: {article.source.name}\n'
            )
        
        if not articles:
            self.stdout.write('üì≠ –ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏')
        else:
            self.stdout.write(f'\nüéØ –£ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π')

    def _process_single_article(self, processor, article_id, options):
        """–û–±—Ä–æ–±–∫–∞ –æ–¥–Ω—ñ—î—ó —Å—Ç–∞—Ç—Ç—ñ"""
        try:
            article = RawArticle.objects.get(id=article_id)
            
            if article.is_processed:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è –°—Ç–∞—Ç—Ç—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞: {article.title[:50]}...')
                )
                return
            
            self.stdout.write(f'ü§ñ –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç—Ç—ñ: {article.title[:50]}...')
            
            result = processor.process_article(article)
            
            if result:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –°—Ç–∞—Ç—Ç—è —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞!')
                )
                
                if options['auto_publish']:
                    result.publish()
                    self.stdout.write('üì∞ –°—Ç–∞—Ç—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ')
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ç—Ç—ñ')
                )
                
        except RawArticle.DoesNotExist:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –°—Ç–∞—Ç—Ç—è –∑ ID {article_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞')
            )
    def _auto_publish_articles(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—É–±–ª—ñ–∫—É—î –≥–æ—Ç–æ–≤—ñ —Å—Ç–∞—Ç—Ç—ñ"""
        articles_to_publish = ProcessedArticle.objects.filter(
            status='draft',
            priority__gte=2  # –¢—ñ–ª—å–∫–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        ).order_by('-priority', '-created_at')[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –∑–∞ —Ä–∞–∑
        
        published_count = 0
        for article in articles_to_publish:
            try:
                article.publish()
                published_count += 1
                self.stdout.write(f'üì∞ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {article.title_uk[:50]}...')
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}')
                )

    def _process_batch(self, processor, options):
        """–ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–µ–π"""
        limit = options.get('limit', 10)
        category = options.get('category')
        
        self.stdout.write(f'üöÄ –ü–∞–∫–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞: –¥–æ {limit} —Å—Ç–∞—Ç–µ–π')
        if category:
            self.stdout.write(f'üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}')
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
        results = processor.process_batch(limit=limit, category=category)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        self.stdout.write('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò AI –û–ë–†–û–ë–ö–ò:')
        self.stdout.write('=' * 50)
        self.stdout.write(f'üìÑ –û–±—Ä–æ–±–ª–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {results["processed"]}')
        self.stdout.write(f'‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: {results["successful"]}')
        self.stdout.write(f'‚ùå –ü–æ–º–∏–ª–æ–∫: {results["failed"]}')
        self.stdout.write(f'üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${results["total_cost"]:.4f}')
        self.stdout.write(f'‚è±Ô∏è –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {results["total_time"]:.2f}—Å')
        
        # –ê–≤—Ç–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è
        if options['auto_publish'] and results['successful'] > 0:
            published_count = self._auto_publish_articles()
            self.stdout.write(
                self.style.SUCCESS(f'üì∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {published_count} —Å—Ç–∞—Ç–µ–π')
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥–∞–ª—å–Ω–∞
        total_pending = RawArticle.objects.filter(is_processed=False, is_duplicate=False).count()
        total_ready = ProcessedArticle.objects.filter(status='draft').count()
        
        self.stdout.write(f'\nüìà –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        self.stdout.write(f'‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏: {total_pending}')
        self.stdout.write(f'üìã –ì–æ—Ç–æ–≤–∏—Ö –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {total_ready}')

    
    
        
        return published_count