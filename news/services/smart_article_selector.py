import logging
from typing import List, Dict, Optional
from django.conf import settings
from ..models import RawArticle, NewsCategory

logger = logging.getLogger(__name__)

class SmartArticleSelector:
    """–†–æ–∑—É–º–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫—Ä–∞—â–∏—Ö —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ AI"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def select_top_articles(self, limit: int = 10, category: Optional[str] = None) -> List[RawArticle]:
        """
        –í–∏–±–∏—Ä–∞—î —Ç–æ–ø —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        
        Args:
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –¥–ª—è –≤–∏–±–æ—Ä—É
            category: –§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        """
        
        # –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç
        queryset = RawArticle.objects.filter(
            is_processed=False,
            is_duplicate=False
        ).select_related('source')
        
        # –§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if category:
            queryset = queryset.filter(source__category=category)
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —è–∫–æ—Å—Ç—ñ
        articles = list(queryset.order_by('-published_at')[:limit * 2])  # –ë–µ—Ä–µ–º–æ –±—ñ–ª—å—à–µ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        
        if not articles:
            self.logger.warning("–ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –¥–ª—è —Å–µ–ª–µ–∫—Ü—ñ—ó")
            return []
        
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–µ–ª–µ–∫—Ü—ñ—ó –ø–æ–∫–∏ —â–æ
        # TODO: –î–æ–¥–∞—Ç–∏ AI-–∞–Ω–∞–ª—ñ–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ
        selected = self._simple_quality_filter(articles, limit)
        
        self.logger.info(f"üìä –í–∏–±—Ä–∞–Ω–æ {len(selected)} –∑ {len(articles)} —Å—Ç–∞—Ç–µ–π")
        
        return selected
    
    def _simple_quality_filter(self, articles: List[RawArticle], limit: int) -> List[RawArticle]:
        """–ü—Ä–æ—Å—Ç–∏–π —Ñ—ñ–ª—å—Ç—Ä —è–∫–æ—Å—Ç—ñ —Å—Ç–∞—Ç–µ–π"""
        
        scored_articles = []
        
        for article in articles:
            score = 0
            
            # –î–æ–≤–∂–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_length = len(article.content or article.summary or "")
            if content_length > 1000:
                score += 3
            elif content_length > 500:
                score += 2
            elif content_length > 200:
                score += 1
            
            # –°–≤—ñ–∂—ñ—Å—Ç—å
            from django.utils import timezone
            hours_old = (timezone.now() - article.published_at).total_seconds() / 3600
            if hours_old < 6:
                score += 2
            elif hours_old < 24:
                score += 1
            
            # –Ø–∫—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª–∞ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
            if article.source.language == 'en':  # –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –¥–∂–µ—Ä–µ–ª–∞ –º–∞—é—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
                score += 1
            
            scored_articles.append((article, score))
        
        # –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Å–∫–æ—Ä—É —ñ –±–µ—Ä–µ–º–æ —Ç–æ–ø
        scored_articles.sort(key=lambda x: x[1], reverse=True)
        
        return [article for article, score in scored_articles[:limit]]