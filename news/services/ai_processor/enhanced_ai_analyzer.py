import logging
import json
from typing import Dict, List, Optional
from dataclasses import dataclass
from django.utils import timezone
from news.services.ai_processor.ai_processor_base import AINewsProcessor
from news.models import RawArticle, ProcessedArticle

logger = logging.getLogger(__name__)


@dataclass
class EnhancedInsights:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö LAZYSOFT —ñ–Ω—Å–∞–π—Ç—ñ–≤"""
    
    # –ë—ñ–∑–Ω–µ—Å —ñ–Ω—Å–∞–π—Ç–∏ –¥–ª—è 3 –∞—É–¥–∏—Ç–æ—Ä—ñ–π
    business_insights: Dict[str, Dict]  # english_audience, polish_audience, ukrainian_audience
    
    # –ö–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏
    key_takeaways: Dict[str, List[str]]  # english, polish, ukrainian
    
    # –¶—ñ–∫–∞–≤–∏–Ω–∫–∏ —Ç–∞ —Ñ–∞–∫—Ç–∏
    interesting_facts: Dict[str, List[str]]  # english, polish, ukrainian
    
    # LAZYSOFT —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    lazysoft_recommendations: Dict[str, str]  # english, polish, ukrainian
    
    # –ë—ñ–∑–Ω–µ—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    business_opportunities: Dict[str, str]  # english, polish, ukrainian
    
    # –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∫—Ä–æ–∫–∏
    implementation_steps: Dict[str, List[str]]  # english, polish, ukrainian
    
    # ROI –æ—Ü—ñ–Ω–∫–∞
    roi_assessment: Dict[str, str]  # potential_savings, implementation_cost, payback_period
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ
    confidence_score: float
    analysis_timestamp: str
    ai_model_used: str


class EnhancedAIAnalyzer(AINewsProcessor):
    """
    –†–æ–∑—à–∏—Ä–µ–Ω–∏–π AI –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö LAZYSOFT —ñ–Ω—Å–∞–π—Ç—ñ–≤.
    –ì–µ–Ω–µ—Ä—É—î —Ç—Ä–∏–º–æ–≤–Ω—ñ –±—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç–∏ –∑ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ LAZYSOFT –¥–ª—è –ú–°–ë –∞—É–¥–∏—Ç–æ—Ä—ñ—ó.
    """
    
    def __init__(self):
        super().__init__()
        
        # LAZYSOFT brand voice —Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
        self.lazysoft_context = {
            "company_description": "LAZYSOFT - automation agency specializing in business process automation, AI integration, and custom software solutions for SMB",
            "expertise_areas": [
                "Business process automation",
                "AI chatbots and virtual assistants", 
                "CRM systems integration",
                "Social media automation",
                "Custom software development",
                "E-commerce automation",
                "Marketing automation workflows"
            ],
            "target_markets": {
                "ukraine": {
                    "market_context": "Growing tech market, focus on EU integration, remote work culture",
                    "typical_budget": "$200-2000 monthly for automation",
                    "pain_points": ["manual processes", "EU compliance", "remote team coordination"],
                    "opportunities": ["EU market access", "outsourcing services", "tech talent"]
                },
                "poland": {
                    "market_context": "Developed EU market, strong economy, technology adoption",
                    "typical_budget": "$500-5000 monthly for tech solutions", 
                    "pain_points": ["competition", "scaling challenges", "digital transformation"],
                    "opportunities": ["EU single market", "digital services", "fintech"]
                },
                "uk": {
                    "market_context": "Mature market, high tech adoption, post-Brexit adaptation",
                    "typical_budget": "$1000-10000 monthly for business tools",
                    "pain_points": ["regulatory changes", "talent shortage", "cost optimization"],
                    "opportunities": ["fintech innovation", "AI adoption", "global market access"]
                }
            },
            "brand_voice": {
                "tone": "Expert but approachable, practical, results-focused",
                "perspective": "From the trenches experience with real SMB challenges",
                "style": "Clear actionable insights with concrete examples"
            }
        }
        
        logger.info("üöÄ Enhanced AI Analyzer —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ LAZYSOFT –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")

    def analyze_full_article_with_insights(self, raw_article: RawArticle, full_content: Optional[str] = None) -> EnhancedInsights:
        """
        –°—Ç–≤–æ—Ä—é—î —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ LAZYSOFT —ñ–Ω—Å–∞–π—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ
        
        Args:
            raw_article: –°–∏—Ä–∞ —Å—Ç–∞—Ç—Ç—è
            full_content: –ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (—è–∫—â–æ —î –∑ Full Article Parser)
            
        Returns:
            EnhancedInsights –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ —Ç—Ä–∏–º–æ–≤–Ω–∏–º–∏ —ñ–Ω—Å–∞–π—Ç–∞–º–∏
        """
        logger.info(f"üîç –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤: {raw_article.title[:50]}...")
        
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            content_to_analyze = full_content or raw_article.content or raw_article.summary
            
            if not content_to_analyze:
                logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
                return self._create_fallback_insights(raw_article)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∏–º–æ–≤–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏
            insights_data = {}
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏/–∞—É–¥–∏—Ç–æ—Ä—ñ—ó
            for language, market in [('english', 'uk'), ('polish', 'poland'), ('ukrainian', 'ukraine')]:
                logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {language} —ñ–Ω—Å–∞–π—Ç—ñ–≤...")
                
                market_insights = self._generate_market_specific_insights(
                    raw_article, content_to_analyze, language, market
                )
                insights_data[language] = market_insights
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏
            enhanced_insights = self._compile_enhanced_insights(insights_data, raw_article)
            
            logger.info("‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            return enhanced_insights
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å–∞–π—Ç—ñ–≤: {e}")
            return self._create_fallback_insights(raw_article)

    def _generate_market_specific_insights(self, raw_article: RawArticle, content: str, language: str, market: str) -> Dict:
        """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Å–∞–π—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∏–Ω–∫—É —Ç–∞ –º–æ–≤–∏"""
        
        market_context = self.lazysoft_context["target_markets"][market]
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤
        insights_prompt = f"""
        As LAZYSOFT automation agency expert, analyze this tech article for {market.upper()} small-medium business market.

        ARTICLE:
        Title: {raw_article.title}
        Content: {content[:1500]}
        Source: {raw_article.source.name}

        LAZYSOFT CONTEXT:
        - We specialize in: {', '.join(self.lazysoft_context['expertise_areas'][:4])}
        - {market.title()} market: {market_context['market_context']}
        - Typical budget: {market_context['typical_budget']}
        - Key pain points: {', '.join(market_context['pain_points'])}

        OUTPUT in {language.upper()} language as JSON:
        {{
            "main_insight": "2-3 sentences about why this matters for {market} SMB",
            "practical_applications": [
                "specific use case 1",
                "specific use case 2", 
                "specific use case 3"
            ],
            "lazysoft_perspective": "How we at LAZYSOFT see this trend/technology fitting into SMB automation strategy",
            "implementation_steps": [
                "step 1: assess current state",
                "step 2: plan implementation",
                "step 3: execute and measure"
            ],
            "roi_estimate": "Potential savings/benefits with timeframe",
            "key_takeaways": [
                "takeaway 1",
                "takeaway 2",
                "takeaway 3"
            ],
            "interesting_facts": [
                "surprising fact 1",
                "industry insight 2"
            ],
            "business_opportunity": "Specific opportunity for {market} businesses",
            "lazysoft_recommendation": "Our specific recommendation as automation experts"
        }}

        Respond ONLY with JSON in {language} language.
        """
        
        try:
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ AI
            ai_response = self._call_ai_model(insights_prompt, max_tokens=1200)
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            insights_data = self._parse_insights_response(ai_response, language)
            
            return insights_data
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó {language} —ñ–Ω—Å–∞–π—Ç—ñ–≤: {e}")
            return self._create_fallback_market_insights(language, market)

    def _parse_insights_response(self, ai_response: str, language: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç—å AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —ñ–Ω—Å–∞–π—Ç–∞–º–∏"""
        try:
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ markdown
            cleaned_response = ai_response.strip()
            if cleaned_response.startswith('```json'):
                cleaned_response = cleaned_response[7:]
            if cleaned_response.startswith('```'):
                cleaned_response = cleaned_response[3:]
            if cleaned_response.endswith('```'):
                cleaned_response = cleaned_response[:-3]
            
            # –ü–∞—Ä—Å–∏–º–æ JSON
            insights_data = json.loads(cleaned_response.strip())
            
            # –í–∞–ª—ñ–¥—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            required_fields = [
                'main_insight', 'practical_applications', 'lazysoft_perspective',
                'implementation_steps', 'roi_estimate', 'key_takeaways',
                'interesting_facts', 'business_opportunity', 'lazysoft_recommendation'
            ]
            
            for field in required_fields:
                if field not in insights_data:
                    insights_data[field] = f"Generated insight for {field}"
            
            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Å–ø–∏—Å–∫—ñ–≤
            for list_field in ['practical_applications', 'implementation_steps', 'key_takeaways', 'interesting_facts']:
                if isinstance(insights_data[list_field], list):
                    insights_data[list_field] = insights_data[list_field][:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            
            return insights_data
            
        except (json.JSONDecodeError, KeyError) as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É {language} —ñ–Ω—Å–∞–π—Ç—ñ–≤: {e}")
            return self._create_fallback_market_insights(language, 'general')

    def _compile_enhanced_insights(self, insights_data: Dict, raw_article: RawArticle) -> EnhancedInsights:
        """–ö–æ–º–ø—ñ–ª—é—î –≤—Å—ñ —ñ–Ω—Å–∞–π—Ç–∏ –≤ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä—É—î–º–æ –±—ñ–∑–Ω–µ—Å —ñ–Ω—Å–∞–π—Ç–∏
        business_insights = {}
        for lang_key, lang_name in [('english', 'english_audience'), ('polish', 'polish_audience'), ('ukrainian', 'ukrainian_audience')]:
            if lang_key in insights_data:
                business_insights[lang_name] = {
                    'main_insight': insights_data[lang_key].get('main_insight', ''),
                    'practical_applications': insights_data[lang_key].get('practical_applications', []),
                    'lazysoft_perspective': insights_data[lang_key].get('lazysoft_perspective', '')
                }
        
        # –ó–±–∏—Ä–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏
        key_takeaways = {}
        interesting_facts = {}
        lazysoft_recommendations = {}
        business_opportunities = {}
        implementation_steps = {}
        
        for lang_key, lang_short in [('english', 'english'), ('polish', 'polish'), ('ukrainian', 'ukrainian')]:
            if lang_key in insights_data:
                key_takeaways[lang_short] = insights_data[lang_key].get('key_takeaways', [])
                interesting_facts[lang_short] = insights_data[lang_key].get('interesting_facts', [])
                lazysoft_recommendations[lang_short] = insights_data[lang_key].get('lazysoft_recommendation', '')
                business_opportunities[lang_short] = insights_data[lang_key].get('business_opportunity', '')
                implementation_steps[lang_short] = insights_data[lang_key].get('implementation_steps', [])
        
        # ROI –æ—Ü—ñ–Ω–∫–∞ (–±–µ—Ä–µ–º–æ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –≤–µ—Ä—Å—ñ—ó)
        english_data = insights_data.get('english', {})
        roi_assessment = {
            'potential_savings': english_data.get('roi_estimate', 'To be determined'),
            'implementation_cost': 'Depends on scope and requirements',
            'payback_period': 'Typically 3-12 months for automation projects'
        }
        
        return EnhancedInsights(
            business_insights=business_insights,
            key_takeaways=key_takeaways,
            interesting_facts=interesting_facts,
            lazysoft_recommendations=lazysoft_recommendations,
            business_opportunities=business_opportunities,
            implementation_steps=implementation_steps,
            roi_assessment=roi_assessment,
            confidence_score=0.8,  # –ë–∞–∑–æ–≤–∏–π —Å–∫–æ—Ä –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
            analysis_timestamp=timezone.now().isoformat(),
            ai_model_used=self.preferred_model
        )

    def _create_fallback_insights(self, raw_article: RawArticle) -> EnhancedInsights:
        """–°—Ç–≤–æ—Ä—é—î fallback —ñ–Ω—Å–∞–π—Ç–∏ —è–∫—â–æ AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"""
        
        title = raw_article.title
        category = raw_article.source.category
        
        # –ë–∞–∑–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        fallback_data = {
            'english_audience': {
                'main_insight': f"This {category} technology could benefit UK businesses through automation and efficiency improvements.",
                'practical_applications': ["Process automation", "Cost reduction", "Efficiency improvement"],
                'lazysoft_perspective': "At LAZYSOFT, we see this as an opportunity to help businesses streamline operations."
            },
            'polish_audience': {
                'main_insight': f"Ta technologia {category} mo≈ºe pom√≥c polskim firmom poprzez automatyzacjƒô i poprawƒô efektywno≈õci.",
                'practical_applications': ["Automatyzacja proces√≥w", "Redukcja koszt√≥w", "Poprawa wydajno≈õci"],
                'lazysoft_perspective': "W LAZYSOFT widzimy to jako mo≈ºliwo≈õƒá pomocy firmom w usprawnieniu dzia≈Ça≈Ñ."
            },
            'ukrainian_audience': {
                'main_insight': f"–¶—è —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è {category} –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –∫–æ–º–ø–∞–Ω—ñ—è–º —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.",
                'practical_applications': ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—ñ–≤", "–ó–Ω–∏–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç", "–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"],
                'lazysoft_perspective': "–£ LAZYSOFT –º–∏ –±–∞—á–∏–º–æ —Ü–µ —è–∫ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –±—ñ–∑–Ω–µ—Å—É –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó."
            }
        }
        
        key_takeaways = {
            'english': ["Technology offers automation potential", "Could improve business efficiency", "Worth exploring for SMB"],
            'polish': ["Technologia oferuje potencja≈Ç automatyzacji", "Mo≈ºe poprawiƒá efektywno≈õƒá biznesu", "Warto zbadaƒá dla M≈öP"],
            'ukrainian': ["–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—è –ø—Ä–æ–ø–æ–Ω—É—î –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó", "–ú–æ–∂–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±—ñ–∑–Ω–µ—Å—É", "–í–∞—Ä—Ç–æ –≤–∏–≤—á–∏—Ç–∏ –¥–ª—è –ú–°–ë"]
        }
        
        return EnhancedInsights(
            business_insights=fallback_data,
            key_takeaways=key_takeaways,
            interesting_facts={'english': [f"Article from {raw_article.source.name}"], 'polish': [f"Artyku≈Ç z {raw_article.source.name}"], 'ukrainian': [f"–°—Ç–∞—Ç—Ç—è –∑ {raw_article.source.name}"]},
            lazysoft_recommendations={'english': "Contact LAZYSOFT for detailed analysis", 'polish': "Skontaktuj siƒô z LAZYSOFT w celu szczeg√≥≈Çowej analizy", 'ukrainian': "–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ LAZYSOFT –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"},
            business_opportunities={'english': "Automation opportunity", 'polish': "Mo≈ºliwo≈õƒá automatyzacji", 'ukrainian': "–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"},
            implementation_steps={'english': ["Assess current state", "Plan implementation", "Execute"], 'polish': ["Oce≈Ñ obecny stan", "Zaplanuj wdro≈ºenie", "Wykonaj"], 'ukrainian': ["–û—Ü—ñ–Ω–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω", "–°–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è", "–í–∏–∫–æ–Ω–∞—Ç–∏"]},
            roi_assessment={'potential_savings': 'To be determined', 'implementation_cost': 'Varies by scope', 'payback_period': '6-12 months typically'},
            confidence_score=0.6,
            analysis_timestamp=timezone.now().isoformat(),
            ai_model_used='fallback'
        )

    def _create_fallback_market_insights(self, language: str, market: str) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î fallback —ñ–Ω—Å–∞–π—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∏–Ω–∫—É"""
        
        templates = {
            'english': {
                'main_insight': f"This technology presents opportunities for {market} businesses to improve operations.",
                'practical_applications': ["Process automation", "Cost optimization", "Efficiency gains"],
                'lazysoft_perspective': "LAZYSOFT can help implement this technology for SMB clients.",
                'key_takeaways': ["Automation potential", "Business value", "Implementation considerations"],
                'business_opportunity': f"Market opportunity in {market} for automation services"
            },
            'polish': {
                'main_insight': f"Ta technologia stwarza mo≈ºliwo≈õci dla firm w {market} do poprawy dzia≈Ça≈Ñ.",
                'practical_applications': ["Automatyzacja proces√≥w", "Optymalizacja koszt√≥w", "Wzrost wydajno≈õci"],
                'lazysoft_perspective': "LAZYSOFT mo≈ºe pom√≥c wdro≈ºyƒá tƒô technologiƒô dla klient√≥w M≈öP.",
                'key_takeaways': ["Potencja≈Ç automatyzacji", "Warto≈õƒá biznesowa", "Kwestie wdro≈ºenia"],
                'business_opportunity': f"Mo≈ºliwo≈õƒá rynkowa w {market} dla us≈Çug automatyzacji"
            },
            'ukrainian': {
                'main_insight': f"–¶—è —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è –≤—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –±—ñ–∑–Ω–µ—Å—É –≤ {market} –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó.",
                'practical_applications': ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—ñ–≤", "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç", "–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"],
                'lazysoft_perspective': "LAZYSOFT –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ —Ü—é —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—é –¥–ª—è –ú–°–ë –∫–ª—ñ—î–Ω—Ç—ñ–≤.",
                'key_takeaways': ["–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó", "–ë—ñ–∑–Ω–µ—Å-—Ü—ñ–Ω–Ω—ñ—Å—Ç—å", "–ü–∏—Ç–∞–Ω–Ω—è –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è"],
                'business_opportunity': f"–†–∏–Ω–∫–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤ {market} –¥–ª—è –ø–æ—Å–ª—É–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"
            }
        }
        
        return templates.get(language, templates['english'])