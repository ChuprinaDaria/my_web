# news/tasks.py
"""
Celery –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω
"""

from celery import shared_task
from django.core.management import call_command
from news.models import ProcessedArticle
import logging

logger = logging.getLogger(__name__)

@shared_task
def publish_article_to_telegram(article_uuid, language='uk'):
    """
    –ü—É–±–ª—ñ–∫—É—î —Å—Ç–∞—Ç—Ç—é –≤ Telegram —á–µ—Ä–µ–∑ management –∫–æ–º–∞–Ω–¥—É
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Å—Ç–∞—Ç—Ç—è
        article = ProcessedArticle.objects.filter(uuid=article_uuid).first()
        if not article:
            logger.error(f"–°—Ç–∞—Ç—Ç—è –∑ UUID {article_uuid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ management –∫–æ–º–∞–Ω–¥—É
        call_command('post_telegram', uuid=str(article_uuid), lang=language)
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—Ç—è {article_uuid} —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ –≤ Telegram")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ç–∞—Ç—Ç—ñ {article_uuid}: {e}")
        return False

@shared_task
def auto_publish_recent_articles(language='uk', limit=3):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—É–±–ª—ñ–∫—É—î –æ—Å—Ç–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ –≤ Telegram
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
        recent_articles = ProcessedArticle.objects.filter(
            status='published'
        ).order_by('-priority', '-published_at')[:limit]
        
        published_count = 0
        for article in recent_articles:
            try:
                # –ü—É–±–ª—ñ–∫—É—î–º–æ –∫–æ–∂–Ω—É —Å—Ç–∞—Ç—Ç—é
                success = publish_article_to_telegram.delay(str(article.uuid), language)
                if success:
                    published_count += 1
                    logger.info(f"üì¢ –ó–∞–≤–¥–∞–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ {article.uuid}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ {article.uuid}: {e}")
        
        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {published_count} –∑–∞–≤–¥–∞–Ω—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
        return published_count
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        return 0
