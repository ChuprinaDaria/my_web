from django.db import models
from django.utils import timezone
from django.urls import reverse
from django.contrib.auth.models import User
from django.utils.translation import gettext_lazy as _
from django.db.models import Sum, Count, F, Avg
from django.core.validators import MinValueValidator, MaxValueValidator
import uuid
from django.urls import reverse
from django.utils.translation import override
from django.conf import settings
from django.utils.text import slugify
from django.db import models
from django.utils import timezone

class RSSSource(models.Model):
    """–î–∂–µ—Ä–µ–ª–∞ RSS –Ω–æ–≤–∏–Ω"""
    LANGUAGE_CHOICES = [
        ('en', 'English'),
        ('pl', 'Polski'),
        ('uk', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'),
    ]
    
    CATEGORY_CHOICES = [
        ('ai', 'AI & Machine Learning'),
        ('automation', 'Business Automation'),
        ('crm', 'CRM & Customer Management'),
        ('seo', 'SEO & Digital Marketing'),
        ('social', 'Social Media Marketing'),
        ('chatbots', 'Chatbots & Conversational AI'),
        ('ecommerce', 'E-commerce Development'),
        ('fintech', 'Fintech Automation'),
        ('corporate', 'Corporate & IT News'),
        ('general', 'General Tech News'),
    ]
    
    name = models.CharField(_('–ù–∞–∑–≤–∞ –¥–∂–µ—Ä–µ–ª–∞'), max_length=200)
    url = models.URLField(_('RSS URL'))
    language = models.CharField(_('–ú–æ–≤–∞'), max_length=2, choices=LANGUAGE_CHOICES)
    category = models.CharField(_('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'), max_length=20, choices=CATEGORY_CHOICES)
    description = models.TextField(_('–û–ø–∏—Å –¥–∂–µ—Ä–µ–ª–∞'), blank=True)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–Ω–µ'), default=True)
    last_fetched = models.DateTimeField(_('–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'), null=True, blank=True)
    fetch_frequency = models.IntegerField(_('–ß–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—Ö–≤)'), default=60)
    created_at = models.DateTimeField(_('–°—Ç–≤–æ—Ä–µ–Ω–æ'), auto_now_add=True)
    
    class Meta:
        verbose_name = _('RSS –î–∂–µ—Ä–µ–ª–æ')
        verbose_name_plural = _('RSS –î–∂–µ—Ä–µ–ª–∞')
        ordering = ['name']
    
    def __str__(self):
        return f"{self.name} ({self.get_language_display()})"


class NewsCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–æ–≤–∏–Ω (—Ç—Ä–∏–º–æ–≤–Ω—ñ)"""
    slug = models.SlugField(_('URL-—Å–ª–∞–≥'), unique=True)
    icon = models.CharField(_('–Ü–∫–æ–Ω–∫–∞ (emoji)'), max_length=10, default='üì∞')
    color = models.CharField(_('–ö–æ–ª—ñ—Ä'), max_length=7, default='#007bff')
    order = models.IntegerField(_('–ü–æ—Ä—è–¥–æ–∫'), default=0)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–Ω–∞'), default=True)
    
    # –ù–∞–∑–≤–∏ —Ç–∞ –æ–ø–∏—Å–∏ –Ω–∞ —Ç—Ä—å–æ—Ö –º–æ–≤–∞—Ö
    name_en = models.CharField(_('–ù–∞–∑–≤–∞ (EN)'), max_length=100)
    name_pl = models.CharField(_('–ù–∞–∑–≤–∞ (PL)'), max_length=100)
    name_uk = models.CharField(_('–ù–∞–∑–≤–∞ (UK)'), max_length=100)
    
    description_en = models.TextField(_('–û–ø–∏—Å (EN)'))
    description_pl = models.TextField(_('–û–ø–∏—Å (PL)'))
    description_uk = models.TextField(_('–û–ø–∏—Å (UK)'))
    
    # CTA –Ω–∞ —Ç—Ä—å–æ—Ö –º–æ–≤–∞—Ö
    cta_title_en = models.CharField(_('CTA –∑–∞–≥–æ–ª–æ–≤–æ–∫ (EN)'), max_length=200, blank=True)
    cta_title_pl = models.CharField(_('CTA –∑–∞–≥–æ–ª–æ–≤–æ–∫ (PL)'), max_length=200, blank=True)
    cta_title_uk = models.CharField(_('CTA –∑–∞–≥–æ–ª–æ–≤–æ–∫ (UK)'), max_length=200, blank=True)
    
    cta_description_en = models.TextField(_('CTA –æ–ø–∏—Å (EN)'), blank=True)
    cta_description_pl = models.TextField(_('CTA –æ–ø–∏—Å (PL)'), blank=True)
    cta_description_uk = models.TextField(_('CTA –æ–ø–∏—Å (UK)'), blank=True)
    
    cta_button_text_en = models.CharField(_('–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (EN)'), max_length=100, blank=True)
    cta_button_text_pl = models.CharField(_('–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (PL)'), max_length=100, blank=True)
    cta_button_text_uk = models.CharField(_('–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (UK)'), max_length=100, blank=True)
    
    cta_link = models.URLField(_('–ü–æ—Å–∏–ª–∞–Ω–Ω—è CTA'), blank=True)

    def get_cta_button_text(self, language='uk'):
        """–¢–µ–∫—Å—Ç CTA –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'cta_button_text_{language}', '')
    
    class Meta:
        verbose_name = _('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–æ–≤–∏–Ω')
        verbose_name_plural = _('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–æ–≤–∏–Ω')
        ordering = ['order', 'name_uk']
    
    def __str__(self):
        return self.name_uk
    
    def get_name(self, language='uk'):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'name_{language}', self.name_uk)
    
    def get_description(self, language='uk'):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'description_{language}', self.description_uk)
    
    def get_cta_title(self, language='uk'):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ CTA –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'cta_title_{language}', self.cta_title_uk)


class RawArticle(models.Model):
    """–°–∏—Ä—ñ —Å—Ç–∞—Ç—Ç—ñ –∑ RSS (–ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é AI)"""
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    source = models.ForeignKey(RSSSource, on_delete=models.CASCADE, related_name='raw_articles')
    
    # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ RSS
    title = models.TextField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫'))
    content = models.TextField(_('–ö–æ–Ω—Ç–µ–Ω—Ç'), blank=True)
    summary = models.TextField(_('–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å'), blank=True)
    original_url = models.URLField(_('–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è'))
    author = models.CharField(_('–ê–≤—Ç–æ—Ä'), max_length=500, blank=True)
    published_at = models.DateTimeField(_('–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó'))
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ –ø–∞—Ä—Å–∏–Ω–≥—É
    fetched_at = models.DateTimeField(_('–û—Ç—Ä–∏–º–∞–Ω–æ'), auto_now_add=True)
    is_processed = models.BooleanField(_('–û–±—Ä–æ–±–ª–µ–Ω–æ AI'), default=False)
    is_duplicate = models.BooleanField(_('–î—É–±–ª—ñ–∫–∞—Ç'), default=False)
    processing_attempts = models.IntegerField(_('–°–ø—Ä–æ–±–∏ –æ–±—Ä–æ–±–∫–∏'), default=0)
    error_message = models.TextField(_('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏'), blank=True)
    
    # –•–µ—à –¥–ª—è –¥–µ—Ç–µ–∫—Ü—ñ—ó –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    content_hash = models.CharField(_('–•–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É'), max_length=64, db_index=True)
    
    class Meta:
        verbose_name = _('–°–∏—Ä–∞ —Å—Ç–∞—Ç—Ç—è')
        verbose_name_plural = _('–°–∏—Ä—ñ —Å—Ç–∞—Ç—Ç—ñ')
        ordering = ['-published_at']
        indexes = [
            models.Index(fields=['content_hash']),
            models.Index(fields=['is_processed', 'is_duplicate']),
        ]
    
    def __str__(self):
        return f"{self.title[:50]}... ({self.source.name})"


class ProcessedArticle(models.Model):
    """–û–±—Ä–æ–±–ª–µ–Ω—ñ AI —Å—Ç–∞—Ç—Ç—ñ (—Ç—Ä–∏–º–æ–≤–Ω—ñ)"""
    STATUS_CHOICES = [
        ('draft', _('–ß–µ—Ä–Ω–µ—Ç–∫–∞')),
        ('review', _('–ù–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ')),
        ('published', _('–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ')),
        ('archived', _('–ê—Ä—Ö—ñ–≤')),
    ]
    
    PRIORITY_CHOICES = [
        (1, _('–ù–∏–∑—å–∫–∏–π')),
        (2, _('–°–µ—Ä–µ–¥–Ω—ñ–π')),
        (3, _('–í–∏—Å–æ–∫–∏–π')),
        (4, _('–ö—Ä–∏—Ç–∏—á–Ω–∏–π')),
    ]
    
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    raw_article = models.OneToOneField(RawArticle, on_delete=models.CASCADE, related_name='processed')
    category = models.ForeignKey(NewsCategory, on_delete=models.CASCADE, related_name='articles')
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ç—Ä—å–æ—Ö –º–æ–≤–∞—Ö (AI-–ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π)
    title_en = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫ (EN)'), max_length=300)
    title_pl = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫ (PL)'), max_length=300)
    title_uk = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫ (UK)'), max_length=300)
    
    summary_en = models.TextField(_('–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (EN)'))
    summary_pl = models.TextField(_('–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (PL)'))
    summary_uk = models.TextField(_('–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (UK)'))
    
    business_insight_en = models.TextField(_('–ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç (EN)'))
    business_insight_pl = models.TextField(_('–ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç (PL)'))
    business_insight_uk = models.TextField(_('–ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç (UK)'))
    
    # –ë—ñ–∑–Ω–µ—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    business_opportunities_en = models.TextField(_('–ë—ñ–∑–Ω–µ—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (EN)'), blank=True)
    business_opportunities_pl = models.TextField(_('–ë—ñ–∑–Ω–µ—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (PL)'), blank=True)
    business_opportunities_uk = models.TextField(_('–ë—ñ–∑–Ω–µ—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (UK)'), blank=True)
    
    # LAZYSOFT —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    lazysoft_recommendations_en = models.TextField(_('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó LAZYSOFT (EN)'), blank=True)
    lazysoft_recommendations_pl = models.TextField(_('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó LAZYSOFT (PL)'), blank=True)
    lazysoft_recommendations_uk = models.TextField(_('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó LAZYSOFT (UK)'), blank=True)
    
    local_context_en = models.TextField(_('–õ–æ–∫–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (EN)'), blank=True)
    local_context_pl = models.TextField(_('–õ–æ–∫–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (PL)'), blank=True)
    local_context_uk = models.TextField(_('–õ–æ–∫–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (UK)'), blank=True)
    
    # JSON –ø–æ–ª—è –¥–ª—è –±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
    key_takeaways_en = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ (EN)'), default=list)
    key_takeaways_pl = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ (PL)'), default=list)
    key_takeaways_uk = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ (UK)'), default=list)
    
    # SEO –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏
    meta_title_en = models.CharField(_('SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ (EN)'), max_length=60, blank=True)
    meta_title_pl = models.CharField(_('SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ (PL)'), max_length=60, blank=True)
    meta_title_uk = models.CharField(_('SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ (UK)'), max_length=60, blank=True)
    
    meta_description_en = models.CharField(_('SEO –æ–ø–∏—Å (EN)'), max_length=160, blank=True)
    meta_description_pl = models.CharField(_('SEO –æ–ø–∏—Å (PL)'), max_length=160, blank=True)
    meta_description_uk = models.CharField(_('SEO –æ–ø–∏—Å (UK)'), max_length=160, blank=True)
    
    # AI –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    ai_image_url = models.URLField(_('AI –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'), blank=True, max_length=500)
    ai_image_prompt_en = models.TextField(_('–ü—Ä–æ–º–ø—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (EN)'), blank=True)
    ai_image_prompt_uk = models.TextField(_('–ü—Ä–æ–º–ø—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (UK)'), blank=True)
    ai_image_prompt_pl = models.TextField(_('–ü—Ä–æ–º–ø—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (PL)'), blank=True)

    # === –ù–û–í–Ü –ü–û–õ–Ø –¥–ª—è Enhanced AI —ñ–Ω—Å–∞–π—Ç—ñ–≤ ===
    
    # –¶—ñ–∫–∞–≤–∏–Ω–∫–∏ —Ç–∞ —Ñ–∞–∫—Ç–∏ (JSON –ø–æ–ª—è)
    interesting_facts_en = models.JSONField(_('–¶—ñ–∫–∞–≤–∏–Ω–∫–∏ (EN)'), default=list)
    interesting_facts_pl = models.JSONField(_('–¶—ñ–∫–∞–≤–∏–Ω–∫–∏ (PL)'), default=list)
    interesting_facts_uk = models.JSONField(_('–¶—ñ–∫–∞–≤–∏–Ω–∫–∏ (UK)'), default=list)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è Full Article Parser
    original_word_count = models.IntegerField(_('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É'), default=0)
    reading_time = models.IntegerField(_('–ß–∞—Å —á–∏—Ç–∞–Ω–Ω—è (—Ö–≤)'), default=5)
    full_content_parsed = models.BooleanField(_('–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø–∞—Ä—Å–µ–Ω–∏–π'), default=False)
    
    # –ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ–ø-—Å—Ç–∞—Ç–µ–π (–∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π AI)
    full_content_en = models.TextField(_('–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (EN)'), blank=True)
    full_content_pl = models.TextField(_('–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (PL)'), blank=True)
    full_content_uk = models.TextField(_('–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (UK)'), blank=True)
    
    # –§–ª–∞–≥–∏ —Ç–æ–ø-—Å—Ç–∞—Ç–µ–π
    is_top_article = models.BooleanField(_('–¢–æ–ø —Å—Ç–∞—Ç—Ç—è'), default=False)
    article_rank = models.IntegerField(_('–†–∞–Ω–≥ —É —Ç–æ–ø-5'), null=True, blank=True, 
                                     help_text='–ü–æ–∑–∏—Ü—ñ—è —Å—Ç–∞—Ç—Ç—ñ –≤ —Ç–æ–ø-5 (1-5)')
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è —Ç–æ–ø-—Å—Ç–∞—Ç–µ–π
    top_selection_date = models.DateField(_('–î–∞—Ç–∞ –≤—ñ–¥–±–æ—Ä—É –≤ —Ç–æ–ø'), null=True, blank=True)
    relevance_score = models.FloatField(_('–°–∫–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ'), null=True, blank=True,
                                      help_text='–°–∫–æ—Ä –≤—ñ–¥ AudienceAnalyzer (1-10)')

    # CTA –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ –Ω–∞ —Ç—Ä—å–æ—Ö –º–æ–≤–∞—Ö
    cta_title_en = models.CharField(_('CTA –∑–∞–≥–æ–ª–æ–≤–æ–∫ (EN)'), max_length=200, blank=True)
    cta_title_pl = models.CharField(_('CTA –∑–∞–≥–æ–ª–æ–≤–æ–∫ (PL)'), max_length=200, blank=True)
    cta_title_uk = models.CharField(_('CTA –∑–∞–≥–æ–ª–æ–≤–æ–∫ (UK)'), max_length=200, blank=True)
    
    cta_description_en = models.TextField(_('CTA –æ–ø–∏—Å (EN)'), blank=True)
    cta_description_pl = models.TextField(_('CTA –æ–ø–∏—Å (PL)'), blank=True)
    cta_description_uk = models.TextField(_('CTA –æ–ø–∏—Å (UK)'), blank=True)
    
    # CTA –∫–Ω–æ–ø–∫–∏ - JSON –∑ —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –≤—Å—ñ—Ö –º–æ–≤
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: [{"text_en": "...", "text_pl": "...", "text_uk": "...", "url": "..."}]
    cta_buttons = models.JSONField(_('CTA –∫–Ω–æ–ø–∫–∏'), default=list)
    
    # –°—Ç–∞—Ç—É—Å —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏
    status = models.CharField(_('–°—Ç–∞—Ç—É—Å'), max_length=20, choices=STATUS_CHOICES, default='draft')
    priority = models.IntegerField(_('–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç'), choices=PRIORITY_CHOICES, default=2)
    
    # –ü–µ—Ä–µ–≥–ª—è–¥–∏ –ø–æ –º–æ–≤–∞—Ö
    views_count_en = models.IntegerField(_('–ü–µ—Ä–µ–≥–ª—è–¥–∏ (EN)'), default=0)
    views_count_pl = models.IntegerField(_('–ü–µ—Ä–µ–≥–ª—è–¥–∏ (PL)'), default=0)
    views_count_uk = models.IntegerField(_('–ü–µ—Ä–µ–≥–ª—è–¥–∏ (UK)'), default=0)
    
    shares_count = models.IntegerField(_('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å'), default=0)
    
    # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Å–ª–∞–≥ –¥–ª—è SEO —Ç–∞ URL
    slug = models.SlugField(_('Slug'), max_length=220, blank=True, unique=True, help_text='–î–ª—è /news/top/<slug>/')

    # AI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    ai_model_used = models.CharField(_('AI –º–æ–¥–µ–ª—å'), max_length=100, blank=True)
    ai_cost = models.DecimalField(_('–í–∞—Ä—Ç—ñ—Å—Ç—å AI'), max_digits=10, decimal_places=4, default=0)
    ai_processing_time = models.FloatField(_('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ AI (—Å–µ–∫)'), null=True, blank=True)
    
    # üè∑Ô∏è –°–ò–°–¢–ï–ú–ê –í–ù–£–¢–†–Ü–®–ù–Ü–• –¢–ï–ì–Ü–í –¥–ª—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
    tags = models.ManyToManyField(
        'core.Tag',
        blank=True,
        related_name='articles',
        help_text="–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ–≥–∏ –¥–ª—è –∫—Ä–æ—Å-–≤–∏–¥–∞—á—ñ –∑ –ø—Ä–æ—î–∫—Ç–∞–º–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∞–º–∏"
    )

    # –î–∞—Ç–∏
    created_at = models.DateTimeField(_('–°—Ç–≤–æ—Ä–µ–Ω–æ'), auto_now_add=True)
    updated_at = models.DateTimeField(_('–û–Ω–æ–≤–ª–µ–Ω–æ'), auto_now=True)
    published_at = models.DateTimeField(_('–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ'), null=True, blank=True)

    def get_meta_title(self, language='uk'):
        """Meta –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        meta_title = getattr(self, f'meta_title_{language}', '')
        return meta_title or self.get_title(language)

    def get_meta_description(self, language='uk'):
        """Meta –æ–ø–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        meta_desc = getattr(self, f'meta_description_{language}', '')
        return meta_desc or self.get_summary(language)[:160]

    def get_reading_time(self):
        """–ß–∞—Å —á–∏—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö"""
        # –ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        total_content = (
            len(self.get_business_insight()) + 
            len(self.get_summary()) + 
            len(self.get_local_context() or '')
        )
        
        # –ü—Ä–∏–±–ª–∏–∑–Ω–æ 5 —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —Å–ª–æ–≤–æ, 200 —Å–ª—ñ–≤ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É
        words = total_content // 5
        minutes = max(1, words // 200)
        return minutes

    def get_cta_title(self, language='uk'):
        """CTA –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'cta_title_{language}', '')

    def get_cta_description(self, language='uk'):
        """CTA –æ–ø–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'cta_description_{language}', '')

    def get_absolute_url(self, language=None):
        if language:
            # –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–≤–∏, —â–æ–± reverse –ø—ñ–¥—Å—Ç–∞–≤–∏–≤ –ø—Ä–µ—Ñ—ñ–∫—Å /uk /en /pl
            with override(language):
                return reverse('news:article_detail', kwargs={'uuid': self.uuid})
        return reverse('news:article_detail', kwargs={'uuid': self.uuid})

    @property 
    def original_source_name(self):
        """–ù–∞–∑–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞"""
        return self.raw_article.source.name

    @property
    def original_source_url(self):
        """URL –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞"""
        return self.raw_article.original_url
    
    @property
    def source_url(self):
        """–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç—Ç—é - –ì–û–¢–û–í–û!"""
        return self.raw_article.original_url
    
    @property  
    def source_domain(self):
        """–î–æ–º–µ–Ω –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        from urllib.parse import urlparse
        try:
            domain = urlparse(self.source_url).netloc
            return domain.replace('www.', '').title()
        except:
            return "Unknown Source"

    def is_fresh(self, days=7):
        """–ß–∏ —Å—Ç–∞—Ç—Ç—è —Å–≤—ñ–∂–∞ (–º–µ–Ω—à–µ –Ω—ñ–∂ X –¥–Ω—ñ–≤)"""
        if not self.published_at:
            return False
        
        from django.utils import timezone
        from datetime import timedelta
        
        cutoff_date = timezone.now() - timedelta(days=days)
        return self.published_at >= cutoff_date

    def get_priority_display(self):
        """–¢–µ–∫—Å—Ç–æ–≤–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"""
        priority_map = {
            1: "üîµ –ù–∏–∑—å–∫–∏–π",
            2: "üü° –°–µ—Ä–µ–¥–Ω—ñ–π", 
            3: "üü† –í–∏—Å–æ–∫–∏–π",
            4: "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∏–π"
        }
        return priority_map.get(self.priority, "üîµ –ù–∏–∑—å–∫–∏–π")

    def get_social_share_urls(self, request=None):
        """–ü–æ–≤–µ—Ä—Ç–∞—î URL –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂"""
        if request:
            full_url = request.build_absolute_uri(self.get_absolute_url())
            title = self.get_title()
        else:
            full_url = f"https://lazysoft.dev{self.get_absolute_url()}"
            title = self.title_uk
        
        return {
            'facebook': f"https://www.facebook.com/sharer/sharer.php?u={full_url}",
            'twitter': f"https://twitter.com/intent/tweet?url={full_url}&text={title}",
            'linkedin': f"https://www.linkedin.com/sharing/share-offsite/?url={full_url}",
            'telegram': f"https://t.me/share/url?url={full_url}&text={title}"
        }
    
    def __str__(self):
        return self.title_uk
    
    def get_title(self, language='uk'):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'title_{language}', self.title_uk)
    
    def get_summary(self, language='uk'):
        """–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'summary_{language}', self.summary_uk)
    
    def get_business_insight(self, language='uk'):
        """–ë—ñ–∑–Ω–µ—Å-—ñ–Ω—Å–∞–π—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'business_insight_{language}', self.business_insight_uk)
    
    def get_local_context(self, language='uk'):
        """–õ–æ–∫–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'local_context_{language}', self.local_context_uk)
    
    def get_key_takeaways(self, language='uk'):
        """–ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'key_takeaways_{language}', self.key_takeaways_uk)
    
    def get_total_views(self):
        """–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤"""
        return self.views_count_en + self.views_count_pl + self.views_count_uk
    
    def increment_views(self, language='uk'):
        """–ó–±—ñ–ª—å—à–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –¥–ª—è –º–æ–≤–∏"""
        field_name = f'views_count_{language}'
        if hasattr(self, field_name):
            setattr(self, field_name, getattr(self, field_name) + 1)
            self.save(update_fields=[field_name])
    
    def publish(self):
        """–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é"""
        self.status = 'published'
        self.published_at = timezone.now()
        self.save()

    # –î–æ–¥–∞—Ç–∏ —Ü—ñ –º–µ—Ç–æ–¥–∏ –≤ ProcessedArticle –∫–ª–∞—Å –ü–Ü–°–õ–Ø —ñ—Å–Ω—É—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤:

    def get_interesting_facts(self, language='uk'):
        """–¶—ñ–∫–∞–≤–∏–Ω–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'interesting_facts_{language}', [])
    
    def get_business_opportunities(self, language='uk'):
        """–ë—ñ–∑–Ω–µ—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'business_opportunities_{language}', '')
    
    def get_lazysoft_recommendations(self, language='uk'):
        """LAZYSOFT —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'lazysoft_recommendations_{language}', '')
    
    def get_ai_image_prompt(self, language='uk'):
        """AI –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é –º–æ–≤–æ—é"""
        return getattr(self, f'ai_image_prompt_{language}', '')
    
    def get_enhanced_reading_time(self):
        """–û–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É —á–∏—Ç–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–æ–≤–∏—Ö –ø–æ–ª—ñ–≤"""
        if self.reading_time and self.reading_time > 0:
            return self.reading_time  # –Ø–∫—â–æ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —á–∞—Å
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—Å—å–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        total_content = (
            len(self.get_business_insight()) + 
            len(self.get_summary()) + 
            len(self.get_local_context() or '') +
            len(self.get_business_opportunities() or '') +
            len(self.get_lazysoft_recommendations() or '')
        )
        
        # –î–æ–¥–∞—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Å–ø–∏—Å–∫—ñ–≤
        facts = self.get_interesting_facts()
        takeaways = self.get_key_takeaways()
        total_content += sum(len(fact) for fact in facts)
        total_content += sum(len(takeaway) for takeaway in takeaways)
        
        # –ü—Ä–∏–±–ª–∏–∑–Ω–æ 5 —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —Å–ª–æ–≤–æ, 200 —Å–ª—ñ–≤ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É
        words = total_content // 5
        minutes = max(1, words // 200)
        return minutes
    
    def has_enhanced_insights(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ LAZYSOFT —ñ–Ω—Å–∞–π—Ç–∏"""
        return bool(
            self.get_interesting_facts() or 
            self.get_business_opportunities() or 
            self.get_lazysoft_recommendations()
        )
    
    def get_content_completeness_score(self):
        """–û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–Ω–æ—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É (0-100%)"""
        score = 0
        max_score = 10
        
        # –ë–∞–∑–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (40%)
        if self.get_title(): score += 1
        if self.get_summary(): score += 1
        if self.get_business_insight(): score += 1
        if self.ai_image_url: score += 1
        
        # SEO (20%)
        if self.get_meta_title(): score += 1
        if self.get_meta_description(): score += 1
        
        # Enhanced —ñ–Ω—Å–∞–π—Ç–∏ (30%)
        if self.get_interesting_facts(): score += 1
        if self.get_business_opportunities(): score += 1
        if self.get_lazysoft_recommendations(): score += 1
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è (10%)
        if self.full_content_parsed: score += 1
        
        return (score / max_score) * 100

    # === –ü–û–ö–†–ê–©–ï–ù–Ü –ú–ï–¢–û–î–ò –ö–†–û–°-–ü–†–û–ú–û–¶–Ü–á (–ë–ï–ó –õ–û–ú–ê–ù–ù–Ø –Ü–°–ù–£–Æ–ß–û–ì–û) ===
    
    def get_related_projects(self, limit=3):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ—î–∫—Ç–∏ –∑ —Ç–∞–∫–∏–º–∏ –∂ —Ç–µ–≥–∞–º–∏"""
        if not self.tags.exists():
            return []
        
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ apps.get_model –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ import
            from django.apps import apps
            Project = apps.get_model('projects', 'Project')
            return Project.objects.filter(
                tags__in=self.tags.all(),
                is_active=True
            ).distinct().exclude(
                # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
            ).order_by('-priority', '-project_date')[:limit]
        except LookupError:
            # –Ø–∫—â–æ –º–æ–¥–µ–ª—å Project –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
            return []
    
    def get_related_services(self, limit=3):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–≤—ñ—Å–∏ –∑ —Ç–∞–∫–∏–º–∏ –∂ —Ç–µ–≥–∞–º–∏"""
        if not self.tags.exists():
            return []
        
        try:
            from django.apps import apps
            Service = apps.get_model('services', 'Service')
            return Service.objects.filter(
                tags__in=self.tags.all(),
                is_active=True
            ).distinct().order_by('-date_created')[:limit]
        except LookupError:
            return []
    
    def get_cross_promotion_content(self, limit=6):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–º—ñ—à–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤'—è–∑–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        """
        content = []
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏
        related_projects = self.get_related_projects(limit=3)
        for project in related_projects:
            content.append({
                'type': 'project',
                'title': project.title_uk,
                'short_description': getattr(project, 'short_description_uk', ''),
                'url': f'/projects/{project.slug}/',
                'image': project.featured_image.url if project.featured_image else None,
                'badges': project.get_all_badges('uk'),
                'object': project
            })
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
        related_services = self.get_related_services(limit=3)
        for service in related_services:
            content.append({
                'type': 'service', 
                'title': service.title_uk,
                'short_description': getattr(service, 'short_description_uk', ''),
                'url': f'/services/{service.slug}/',
                'image': service.icon.url if service.icon else None,
                'object': service
            })
        
        return content[:limit]
    

    def save(self, *args, **kwargs):    # –∞–≤—Ç–æ—Å–ª–∞–≥ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –π —Å—Ç–∞—Ç—Ç—è —Ç–æ–ø–æ–≤–∞ –∞–±–æ –¥—É–∂–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
        if not self.slug:
            base = (self.meta_title_uk or self.title_uk or self.title_en or self.title_pl or '')[:180]
            if base:
                self.slug = slugify(f"{base}-{str(self.uuid)[:8]}")
  # –∑–∞—Ö–∏—Å—Ç –ø—Ä–∞–≤–∏–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:
  # –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω–µ –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∞—Ç–µ–π (–≤–∏–¥–∞–ª–µ–Ω–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —Ç–æ–ø–æ–≤—ñ —Å—Ç–∞—Ç—Ç—ñ)
  # if self.ai_image_url and not (self.is_top_article and self.full_content_parsed):
  #     self.ai_image_url = ''
        super().save(*args, **kwargs)


    # === –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ø –¢–ï–ì–Ü–í ===
    
    def auto_assign_tags(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–∞—î —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å—Ç–∞—Ç—Ç—ñ"""
        # –ú–∞–ø—ñ–Ω–≥ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –Ω–∞ —Å–ª–∞–≥–∏ —Ç–µ–≥—ñ–≤
        keyword_mapping = {
            'AI': ['ai', 'machine-learning', 'artificial-intelligence'],
            'automation': ['automation', 'business-automation'],
            'chatbot': ['chatbots', 'ai', 'conversational-ai'],
            'CRM': ['crm', 'customer-management'],
            'SEO': ['seo', 'digital-marketing'],
            'social media': ['social-media', 'marketing'],
            'e-commerce': ['ecommerce', 'online-store'],
            'fintech': ['fintech', 'financial-technology'],
            'blockchain': ['blockchain', 'crypto'],
            'API': ['api', 'integration'],
            'cloud': ['cloud-computing', 'aws', 'azure'],
            'mobile': ['mobile-development', 'app'],
            'web development': ['web-development', 'frontend', 'backend'],
            'database': ['database', 'sql', 'nosql'],
            'security': ['cybersecurity', 'data-protection'],
            'analytics': ['analytics', 'data-science'],
            'startup': ['startup', 'business'],
            'investment': ['investment', 'funding'],
        }
        
        # –û–±'—î–¥–Ω—É—î–º–æ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        content_to_analyze = f"""
        {self.get_title()} 
        {self.get_summary()} 
        {self.get_business_insight()}
        {' '.join(self.get_key_takeaways())}
        """.lower()
        
        suggested_tag_slugs = set()
        
        # –®—É–∫–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ
        for keyword, tag_slugs in keyword_mapping.items():
            if keyword.lower() in content_to_analyze:
                suggested_tag_slugs.update(tag_slugs)
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å—Ç–∞—Ç—Ç—ñ
        category_tag_mapping = {
            'ai': ['ai', 'machine-learning'],
            'automation': ['automation', 'business-automation'],
            'crm': ['crm', 'customer-management'],
            'seo': ['seo', 'digital-marketing'],
            'social': ['social-media', 'marketing'],
            'chatbots': ['chatbots', 'ai'],
            'ecommerce': ['ecommerce', 'online-store'],
            'fintech': ['fintech', 'financial-technology'],
        }
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ RSS –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        rss_category = self.raw_article.source.category
        if rss_category in category_tag_mapping:
            suggested_tag_slugs.update(category_tag_mapping[rss_category])
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–≥–∏
        if suggested_tag_slugs:
            try:
                from django.apps import apps
                Tag = apps.get_model('core', 'Tag')
                
                existing_tags = Tag.objects.filter(
                    slug__in=suggested_tag_slugs,
                    is_active=True
                )
                
                # –î–æ–¥–∞—î–º–æ —Ç–µ–≥–∏ –¥–æ —Å—Ç–∞—Ç—Ç—ñ (–Ω–µ –≤–∏–¥–∞–ª—è—é—á–∏ —ñ—Å–Ω—É—é—á—ñ)
                self.tags.add(*existing_tags)
                
                return list(existing_tags.values_list('slug', flat=True))
            except LookupError:
                return []
        
        return []
    
    def get_smart_cta(self, language='uk'):
        """–ì–µ–Ω–µ—Ä—É—î —Ä–æ–∑—É–º–Ω–∏–π CTA –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–≥—ñ–≤ —Å—Ç–∞—Ç—Ç—ñ"""
        # –ú–∞–ø—ñ–Ω–≥ —Ç–µ–≥—ñ–≤ –Ω–∞ CTA
        tag_cta_mapping = {
            'ai': {
                'title_uk': '–•–æ—á–µ—Ç–µ –≤–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ AI —É –≤–∞—à –±—ñ–∑–Ω–µ—Å?',
                'title_en': 'Want to implement AI in your business?',
                'title_pl': 'Chcesz wdro≈ºyƒá AI w swoim biznesie?',
                'url': '/services/ai-development/',
                'button_text_uk': '–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é',
                'button_text_en': 'Get Consultation',
                'button_text_pl': 'Zam√≥w konsultacjƒô'
            },
            'automation': {
                'title_uk': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑—É–π—Ç–µ –≤–∞—à—ñ –±—ñ–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å–∏',
                'title_en': 'Automate your business processes',
                'title_pl': 'Zautomatyzuj swoje procesy biznesowe',
                'url': '/services/business-automation/',
                'button_text_uk': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ',
                'button_text_en': 'Learn More',
                'button_text_pl': 'Dowiedz siƒô wiƒôcej'
            },
            'crm': {
                'title_uk': '–ü–æ—Ç—Ä—ñ–±–Ω–∞ CRM —Å–∏—Å—Ç–µ–º–∞?',
                'title_en': 'Need a CRM system?',
                'title_pl': 'Potrzebujesz systemu CRM?',
                'url': '/services/crm-development/',
                'button_text_uk': '–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä—ñ—à–µ–Ω–Ω—è',
                'button_text_en': 'View Solutions',
                'button_text_pl': 'Zobacz rozwiƒÖzania'
            },
            'ecommerce': {
                'title_uk': '–°—Ç–≤–æ—Ä–∏–º–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è –≤–∞—Å',
                'title_en': "We'll create an online store for you",
                'title_pl': 'Stworzymy dla Ciebie sklep internetowy',
                'url': '/services/ecommerce-development/',
                'button_text_uk': '–†–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç',
                'button_text_en': 'Start Project',
                'button_text_pl': 'Rozpocznij projekt'
            }
        }
        
        # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π CTA –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–≥—ñ–≤ —Å—Ç–∞—Ç—Ç—ñ
        for tag in self.tags.all():
            if tag.slug in tag_cta_mapping:
                cta_data = tag_cta_mapping[tag.slug]
                return {
                    'title': cta_data.get(f'title_{language}', cta_data['title_uk']),
                    'url': cta_data['url'],
                    'button_text': cta_data.get(f'button_text_{language}', cta_data['button_text_uk'])
                }
        
        # –î–µ—Ñ–æ–ª—Ç–Ω–∏–π CTA —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        default_cta = {
            'uk': {
                'title': '–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ —Ä–æ–∑—Ä–æ–±–∫–æ—é?',
                'button_text': '–ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏'
            },
            'en': {
                'title': 'Need help with development?',
                'button_text': 'Contact us'
            },
            'pl': {
                'title': 'Potrzebujesz pomocy z rozwojem?',
                'button_text': 'Skontaktuj siƒô z nami'
            }
        }
        
        return {
            'title': default_cta[language]['title'],
            'url': '/contact/',
            'button_text': default_cta[language]['button_text']
        }
    
    def get_tag_performance_metrics(self):
        """–ú–µ—Ç—Ä–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–µ–≥—ñ–≤ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–∞—Ç—Ç—ñ"""
        if not self.tags.exists():
            return {}
        
        metrics = {}
        for tag in self.tags.all():
            # –†–∞—Ö—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ–≥—É
            tag_articles = ProcessedArticle.objects.filter(tags=tag)
            
            metrics[tag.slug] = {
                'total_articles': tag_articles.count(),
                'avg_views': tag_articles.aggregate(
                    avg_views=Avg(F('views_count_uk') + F('views_count_en') + F('views_count_pl'))
                )['avg_views'] or 0,
                'total_views': tag_articles.aggregate(
                    total_views=Sum(F('views_count_uk') + F('views_count_en') + F('views_count_pl'))
                )['total_views'] or 0,
            }
        
        return metrics
    
    def get_ai_processing_cost(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å AI –æ–±—Ä–æ–±–∫–∏ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–∞—Ç—Ç—ñ"""
        if not hasattr(self, 'raw_article'):
            return 0.0
        
        from django.db.models import Sum
        total_cost = self.raw_article.ai_logs.aggregate(
            total_cost=Sum('cost')
        )['total_cost'] or 0
        
        return float(total_cost)
    
    def get_ai_processing_time(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å AI –æ–±—Ä–æ–±–∫–∏ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–∞—Ç—Ç—ñ"""
        if not hasattr(self, 'raw_article'):
            return 0.0
        
        from django.db.models import Sum
        total_time = self.raw_article.ai_logs.aggregate(
            total_time=Sum('processing_time')
        )['total_time'] or 0
        
        return float(total_time)
    
    def get_ai_operations_count(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å AI –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è —Ü—ñ—î—ó —Å—Ç–∞—Ç—Ç—ñ"""
        if not hasattr(self, 'raw_article'):
            return 0
        
        return self.raw_article.ai_logs.count()

    # === –ù–û–í–Ü –ú–ï–¢–û–î–ò –¥–ª—è —Ç–æ–ø-—Å—Ç–∞—Ç–µ–π ===
    
    def get_full_content(self, language='uk'):
        """–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏ (–¥–ª—è —Ç–æ–ø-—Å—Ç–∞—Ç–µ–π)"""
        return getattr(self, f'full_content_{language}', '')
    
    def is_top_quality(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å—Ç–∞—Ç—Ç—è —Ç–æ–ø-—è–∫–æ—Å—Ç—ñ"""
        return self.is_top_article and bool(self.get_full_content())
    
    def get_top_rank_display(self):
        """–ö—Ä–∞—Å–∏–≤–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–∞–Ω–≥—É"""
        if not self.is_top_article or not self.article_rank:
            return ""
        
        rank_icons = {1: "ü•á", 2: "ü•à", 3: "ü•â", 4: "üéñÔ∏è", 5: "üèÖ"}
        icon = rank_icons.get(self.article_rank, "üìä")
        return f"{icon} #{self.article_rank}"
    
    def get_content_for_display(self, language='uk'):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–ø–æ–≤–Ω–∏–π –¥–ª—è —Ç–æ–ø, –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö)"""
        if self.is_top_article and self.get_full_content(language):
            return self.get_full_content(language)
        return self.get_business_insight(language)
    
    @classmethod
    def get_top_articles(cls, date=None, limit=5):
        """–û—Ç—Ä–∏–º—É—î —Ç–æ–ø-—Å—Ç–∞—Ç—Ç—ñ –∑–∞ –¥–∞—Ç–æ—é"""
        queryset = cls.objects.filter(is_top_article=True, status='published')
        
        if date:
            queryset = queryset.filter(top_selection_date=date)
        
        return queryset.order_by('article_rank')[:limit]
    
    @classmethod
    def get_regular_articles(cls, date=None, limit=20):
        """–û—Ç—Ä–∏–º—É—î –∑–≤–∏—á–∞–π–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ (–Ω–µ —Ç–æ–ø)"""
        queryset = cls.objects.filter(is_top_article=False, status='published')
        
        if date:
            queryset = queryset.filter(published_at__date=date)
        
        return queryset.order_by('-priority', '-published_at')[:limit]

    class Meta:
        verbose_name = _('–û–±—Ä–æ–±–ª–µ–Ω–∞ —Å—Ç–∞—Ç—Ç—è')
        verbose_name_plural = _('–û–±—Ä–æ–±–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ')
        ordering = ['-is_top_article', '-article_rank', '-priority', '-created_at']
        indexes = [
            models.Index(fields=['slug']),                              # –ø–æ—à—É–∫/–¥–µ—Ç–∞–ª–∫–∞ –∑–∞ slug
            models.Index(fields=['status', 'category']),                # —Ñ—ñ–ª—å—Ç—Ä–∏ —Å–ø–∏—Å–∫—ñ–≤
            models.Index(fields=['status', 'published_at']),            # –∞—Ä—Ö—ñ–≤/–ª–µ–Ω—Ç–∞
            models.Index(fields=['published_at']),                      # —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ –¥–∞—Ç—ñ
            models.Index(fields=['is_top_article', 'article_rank']),    # —Ç–æ–ø-5 —à–≤–∏–¥–∫–æ
            models.Index(fields=['top_selection_date']),                # –≤–∏–±—ñ—Ä–∫–∞ —Ç–æ–ø—ñ–≤ –∑–∞ –¥–∞—Ç–æ—é
        ]


class Comment(models.Model):
    """–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑ —Ä–µ–ø–ª–∞—è–º–∏, –±–∞–Ω–∞–º–∏ —Ç–∞ –∞–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü—ñ—î—é"""
    PROVIDERS = [
        ('email', 'Email/Password'),
        ('google', 'Google'),
        ('facebook', 'Facebook'),
        ('linkedin', 'LinkedIn'),
        ('instagram', 'Instagram'),
    ]
    article = models.ForeignKey(ProcessedArticle, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
    provider = models.CharField(max_length=20, choices=PROVIDERS, default='email')
    display_name = models.CharField(max_length=80, blank=True)  # —è–∫—â–æ —Å–æ—Ü-–ª–æ–≥—ñ–Ω –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ name
    parent = models.ForeignKey('self', null=True, blank=True, on_delete=models.CASCADE, related_name='replies')
    body = models.TextField()
    is_deleted = models.BooleanField(default=False)
    is_blocked = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['created_at']

    def soft_delete(self):
        self.is_deleted = True
        self.save(update_fields=['is_deleted', 'updated_at'])

    def block(self):
        self.is_blocked = True
        self.save(update_fields=['is_blocked', 'updated_at'])


class DailyDigest(models.Model):
    """–©–æ–¥–µ–Ω–Ω—ñ –¥–∞–π–¥–∂–µ—Å—Ç–∏ (—Ç—Ä–∏–º–æ–≤–Ω—ñ)"""
    date = models.DateField(_('–î–∞—Ç–∞'), unique=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Ç—Ä—å–æ—Ö –º–æ–≤–∞—Ö
    title_en = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫ (EN)'), max_length=300)
    title_pl = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫ (PL)'), max_length=300)
    title_uk = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫ (UK)'), max_length=300)
    
    # –í—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç
    intro_text_en = models.TextField(_('–í—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç (EN)'))
    intro_text_pl = models.TextField(_('–í—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç (PL)'))
    intro_text_uk = models.TextField(_('–í—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç (UK)'))
    
    articles = models.ManyToManyField(ProcessedArticle, related_name='digests')
    
    # AI-–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    summary_en = models.TextField(_('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ (EN)'))
    summary_pl = models.TextField(_('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ (PL)'))
    summary_uk = models.TextField(_('–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ (UK)'))
    
    key_insights_en = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏ (EN)'), default=list)
    key_insights_pl = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏ (PL)'), default=list)
    key_insights_uk = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏ (UK)'), default=list)
    
    market_trends_en = models.TextField(_('–¢—Ä–µ–Ω–¥–∏ —Ä–∏–Ω–∫—É (EN)'), blank=True)
    market_trends_pl = models.TextField(_('–¢—Ä–µ–Ω–¥–∏ —Ä–∏–Ω–∫—É (PL)'), blank=True)
    market_trends_uk = models.TextField(_('–¢—Ä–µ–Ω–¥–∏ —Ä–∏–Ω–∫—É (UK)'), blank=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_articles = models.IntegerField(_('–í—Å—å–æ–≥–æ —Å—Ç–∞—Ç–µ–π'), default=0)
    top_categories = models.JSONField(_('–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'), default=list)
    
    # –°—Ç–∞—Ç—É—Å
    is_generated = models.BooleanField(_('–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ'), default=False)
    is_published = models.BooleanField(_('–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ'), default=False)
    
    created_at = models.DateTimeField(_('–°—Ç–≤–æ—Ä–µ–Ω–æ'), auto_now_add=True)
    published_at = models.DateTimeField(_('–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ'), null=True, blank=True)
    
    class Meta:
        verbose_name = _('–©–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç')
        verbose_name_plural = _('–©–æ–¥–µ–Ω–Ω—ñ –¥–∞–π–¥–∂–µ—Å—Ç–∏')
        ordering = ['-date']
    
    def __str__(self):
        return f"–î–∞–π–¥–∂–µ—Å—Ç {self.date}"
    
    def get_absolute_url(self, language='uk'):
        return reverse('news:digest_detail', kwargs={'date': self.date, 'lang': language})
    
    def get_title(self, language='uk'):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –º–æ–≤–∏"""
        return getattr(self, f'title_{language}', self.title_uk)


class AIProcessingLog(models.Model):
    """–õ–æ–≥ –æ–±—Ä–æ–±–∫–∏ AI –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è"""
    LOG_TYPES = [
        ('translation', _('–ü–µ—Ä–µ–∫–ª–∞–¥')),
        ('categorization', _('–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è')),
        ('analysis', _('–ê–Ω–∞–ª—ñ–∑')),
        ('image_generation', _('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å')),
        ('cta_generation', _('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è CTA')),
        ('digest_generation', _('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–π–¥–∂–µ—Å—Ç—É')),
        ('tag_assignment', _('–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤')),  # –ù–û–í–ò–ô –¢–ò–ü
    ]
    
    article = models.ForeignKey(RawArticle, on_delete=models.CASCADE, related_name='ai_logs')
    log_type = models.CharField(_('–¢–∏–ø –æ–±—Ä–æ–±–∫–∏'), max_length=20, choices=LOG_TYPES)
    model_used = models.CharField(_('–ú–æ–¥–µ–ª—å'), max_length=100)
    target_language = models.CharField(_('–¶—ñ–ª—å–æ–≤–∞ –º–æ–≤–∞'), max_length=2, blank=True)
    
    # –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
    input_tokens = models.IntegerField(_('–í—Ö—ñ–¥–Ω—ñ —Ç–æ–∫–µ–Ω–∏'), default=0)
    input_data = models.JSONField(_('–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ'), default=dict)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    output_tokens = models.IntegerField(_('–í–∏—Ö—ñ–¥–Ω—ñ —Ç–æ–∫–µ–Ω–∏'), default=0)
    output_data = models.JSONField(_('–†–µ–∑—É–ª—å—Ç–∞—Ç'), default=dict)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    processing_time = models.FloatField(_('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ (—Å–µ–∫)'))
    cost = models.DecimalField(_('–í–∞—Ä—Ç—ñ—Å—Ç—å'), max_digits=10, decimal_places=6, default=0)
    success = models.BooleanField(_('–£—Å–ø—ñ—à–Ω–æ'), default=True)
    error_message = models.TextField(_('–ü–æ–º–∏–ª–∫–∞'), blank=True)
    
    created_at = models.DateTimeField(_('–°—Ç–≤–æ—Ä–µ–Ω–æ'), auto_now_add=True)
    
    class Meta:
        verbose_name = _('AI –ª–æ–≥')
        verbose_name_plural = _('AI –ª–æ–≥–∏')
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.get_log_type_display()} - {self.model_used} ({self.created_at})"


class TranslationCache(models.Model):
    """–ö–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –Ω–∞ API –≤–∏–∫–ª–∏–∫–∞—Ö"""
    source_text_hash = models.CharField(_('–•–µ—à –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É'), max_length=64, db_index=True)
    source_language = models.CharField(_('–ú–æ–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É'), max_length=2)
    target_language = models.CharField(_('–¶—ñ–ª—å–æ–≤–∞ –º–æ–≤–∞'), max_length=2)
    
    source_text = models.TextField(_('–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç'))
    translated_text = models.TextField(_('–ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç'))
    
    translator_used = models.CharField(_('–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á'), max_length=50)  # 'openai', 'google', 'deepl'
    quality_score = models.FloatField(_('–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ'), null=True, blank=True)
    
    created_at = models.DateTimeField(_('–°—Ç–≤–æ—Ä–µ–Ω–æ'), auto_now_add=True)
    used_count = models.IntegerField(_('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ä–∞–∑—ñ–≤'), default=1)
    last_used = models.DateTimeField(_('–û—Å—Ç–∞–Ω–Ω—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'), auto_now=True)
    
    class Meta:
        verbose_name = _('–ö–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
        verbose_name_plural = _('–ö–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
        unique_together = ['source_text_hash', 'source_language', 'target_language']
        indexes = [
            models.Index(fields=['source_text_hash', 'source_language', 'target_language']),
        ]


class ROIAnalytics(models.Model):
    """–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ ROI –¥–ª—è Dashboard - –ø–æ–∫–∞–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞–º –Ω–∞—à—ñ –º–µ—Ç—Ä–∏–∫–∏"""
    
    # –ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É
    date = models.DateField(_('–î–∞—Ç–∞'), unique=True)
    
    # === –ï–ö–û–ù–û–ú–Ü–Ø –ß–ê–°–£ ===
    manual_hours_saved = models.FloatField(
        _('–ì–æ–¥–∏–Ω –∑–∞–æ—â–∞–¥–∂–µ–Ω–æ (—Ä—É—á–Ω–∞ —Ä–æ–±–æ—Ç–∞)'), 
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(200)]  # Max 200h/month
    )
    ai_processing_time = models.FloatField(
        _('–ß–∞—Å AI –æ–±—Ä–æ–±–∫–∏ (–≥–æ–¥–∏–Ω)'), 
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(50)]  # Max 50h/month
    )
    time_efficiency = models.FloatField(
        _('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–∞—Å—É (%)'), 
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(1000)]  # Max 1000%
    )
    
    # === –§–Ü–ù–ê–ù–°–û–í–ê –ï–ö–û–ù–û–ú–Ü–Ø ===
    content_manager_cost_saved = models.DecimalField(
        _('–ï–∫–æ–Ω–æ–º—ñ—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä—ñ'), 
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(0), MaxValueValidator(10000)]  # Max $10k/month
    )
    smm_specialist_cost_saved = models.DecimalField(
        _('–ï–∫–æ–Ω–æ–º—ñ—è –Ω–∞ SMM'), 
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(0), MaxValueValidator(10000)]
    )
    copywriter_cost_saved = models.DecimalField(
        _('–ï–∫–æ–Ω–æ–º—ñ—è –Ω–∞ –∫–æ–ø—ñ—Ä–∞–π—Ç–µ—Ä—ñ'), 
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(0), MaxValueValidator(10000)]
    )
    ai_api_costs = models.DecimalField(
        _('–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ AI API'), 
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(0), MaxValueValidator(1000)]  # Max $1k/month
    )
    net_savings = models.DecimalField(
        _('–ß–∏—Å—Ç–∞ –µ–∫–æ–Ω–æ–º—ñ—è'), 
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(-1000), MaxValueValidator(50000)]  # -$1k to $50k
    )
    
    # === –¢–†–ê–§–Ü–ö –¢–ê –ó–ê–õ–£–ß–ï–ù–ù–Ø ===
    organic_traffic_increase = models.IntegerField(_('–ü—Ä–∏—Ä—ñ—Å—Ç –æ—Ä–≥–∞–Ω—ñ—á–Ω–æ–≥–æ —Ç—Ä–∞—Ñ—ñ–∫—É'), default=0)
    social_engagement_increase = models.IntegerField(_('–ü—Ä–∏—Ä—ñ—Å—Ç engagement —Å–æ—Ü–º–µ—Ä–µ–∂'), default=0)
    new_leads_generated = models.IntegerField(_('–ù–æ–≤–∏—Ö –ª—ñ–¥—ñ–≤ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ'), default=0)
    bounce_rate_improvement = models.FloatField(_('–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è bounce rate (%)'), default=0)
    
    # === AI –ú–ï–¢–†–ò–ö–ò (–í–ò–ü–†–ê–í–õ–ï–ù–Ü!) ===
    articles_processed = models.IntegerField(
        _('–°—Ç–∞—Ç–µ–π –æ–±—Ä–æ–±–ª–µ–Ω–æ AI'), 
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(100)]  # Max 100 articles/month
    )
    translations_made = models.IntegerField(
        _('–ü–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑—Ä–æ–±–ª–µ–Ω–æ'), 
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(300)]  # Max 300 translations/month
    )
    social_posts_generated = models.IntegerField(
        _('–°–æ—Ü–º–µ—Ä–µ–∂ –ø–æ—Å—Ç—ñ–≤ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ'), 
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(200)]  # Max 200 posts/month
    )
    images_generated = models.IntegerField(
        _('AI –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ'), 
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(500)]  # Max 500 images/month
    )
    tags_assigned = models.IntegerField(
        _('–¢–µ–≥—ñ–≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ'), 
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(1000)]  # Max 1000 tags/month
    )
    
    # === –ù–û–í–Ü –ü–û–õ–Ø –ö–õ–Æ–ß–û–í–ò–• –í–ò–°–ù–û–í–ö–Ü–í ===
    key_takeaways_en = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ (EN)'), default=list)
    key_takeaways_uk = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ (UK)'), default=list) 
    key_takeaways_pl = models.JSONField(_('–ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ (PL)'), default=list)
    
    # === –Ø–ö–Ü–°–¢–¨ –ö–û–ù–¢–ï–ù–¢–£ ===
    avg_article_rating = models.FloatField(_('–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ —Å—Ç–∞—Ç–µ–π'), default=0)
    seo_score_improvement = models.FloatField(_('–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è SEO —Å–∫–æ—Ä—É'), default=0)
    content_uniqueness = models.FloatField(_('–£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É (%)'), default=0)
    
    # === –ù–û–í–Ü –ü–û–õ–Ø –¥–ª—è —Ç–µ–≥–æ–≤–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ===
    top_performing_tags = models.JSONField(_('–¢–æ–ø —Ç–µ–≥–∏ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é'), default=list)
    tag_engagement_stats = models.JSONField(_('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ª—É—á–µ–Ω–Ω—è –ø–æ —Ç–µ–≥–∞—Ö'), default=dict)
    cross_promotion_success_rate = models.FloatField(_('–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó (%)'), default=0)
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ
    created_at = models.DateTimeField(_('–°—Ç–≤–æ—Ä–µ–Ω–æ'), auto_now_add=True)
    updated_at = models.DateTimeField(_('–û–Ω–æ–≤–ª–µ–Ω–æ'), auto_now=True)
    
    class Meta:
        verbose_name = _('ROI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞')
        verbose_name_plural = _('ROI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞')
        ordering = ['-date']
    
    def __str__(self):
        return f"ROI {self.date}"
    
    @property
    def total_cost_savings(self):
        """–ó–∞–≥–∞–ª—å–Ω–∞ –µ–∫–æ–Ω–æ–º—ñ—è –∫–æ—à—Ç—ñ–≤ - –í–ò–ü–†–ê–í–õ–ï–ù–û"""
        return (
            self.content_manager_cost_saved + 
            self.smm_specialist_cost_saved + 
            self.copywriter_cost_saved - 
            self.ai_api_costs
        )
    
    @property
    def roi_percentage(self):
        """ROI —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö - –í–ò–ü–†–ê–í–õ–ï–ù–û"""
        if self.ai_api_costs > 0:
            return ((self.total_cost_savings - self.ai_api_costs) / self.ai_api_costs) * 100
        return 0
    
    @classmethod
    def calculate_daily_metrics(cls, date=None):
        """–í–ò–ü–†–ê–í–õ–ï–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ –∑–∞ –¥–µ–Ω—å –∑ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏"""
        if not date:
            date = timezone.now().date()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –¥–µ–Ω—å
        articles_today = ProcessedArticle.objects.filter(created_at__date=date)
        ai_logs_today = AIProcessingLog.objects.filter(created_at__date=date)
        social_posts_today = SocialMediaPost.objects.filter(created_at__date=date)
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–Ü —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏
        articles_count = min(articles_today.count(), 10)  # Max 10 articles/day
        ai_cost = min(float(ai_logs_today.aggregate(total=Sum('cost'))['total'] or 0), 50.0)  # Max $50/day
        processing_time = min(float(ai_logs_today.aggregate(total=Sum('processing_time'))['total'] or 0), 2.0)  # Max 2h/day
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ (—Å—Ç–∞—Ç—Ç—ñ * 3 –º–æ–≤–∏)
        translations_made = min(articles_count * 3, 30)  # Max 30 translations/day
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å
        images_generated = min(articles_today.filter(
            ai_image_url__isnull=False
        ).exclude(ai_image_url='').count(), 20)  # Max 20 images/day
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–æ—Ü–º–µ—Ä–µ–∂ –ø–æ—Å—Ç—ñ–≤
        social_posts_generated = min(social_posts_today.count(), 15)  # Max 15 posts/day
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —Ç–µ–≥—ñ–≤
        tags_assigned = min(sum(article.tags.count() for article in articles_today), 50)  # Max 50 tags/day
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–µ–≥–æ–≤—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
        tag_analytics = cls._calculate_tag_analytics(articles_today)
        
        # === –†–ï–ê–õ–Ü–°–¢–ò–ß–ù–Ü –†–û–ó–†–ê–•–£–ù–ö–ò ===
        
        # –ï–∫–æ–Ω–æ–º—ñ—è —á–∞—Å—É (3.5 –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Å—Ç–∞—Ç—Ç—é –≤—Ä—É—á–Ω—É)
        hours_per_article = 3.5
        manual_hours = articles_count * hours_per_article
        ai_hours = processing_time / 3600  # –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–µ–∫—É–Ω–¥–∏ –≤ –≥–æ–¥–∏–Ω–∏
        time_saved = max(0, manual_hours - ai_hours)  # –ù–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º
        
        # –ï–∫–æ–Ω–æ–º—ñ—è –≥—Ä–æ—à–µ–π (—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ü—ñ–Ω–∏)
        cost_per_article_manual = 150.0  # $150 –∑–∞ —Å—Ç–∞—Ç—Ç—é –≤—Ä—É—á–Ω—É
        total_savings = articles_count * cost_per_article_manual
        daily_operational_cost = 2.5  # $2.5 –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏/–¥–µ–Ω—å
        total_daily_cost = ai_cost + daily_operational_cost
        
        # –†–æ–∑–ø–æ–¥—ñ–ª –µ–∫–æ–Ω–æ–º—ñ—ó
        content_manager_cost = total_savings * 0.4  # 40% - –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
        smm_cost = total_savings * 0.2  # 20% - SMM
        copywriter_cost = total_savings * 0.4  # 40% - –∫–æ–ø—ñ—Ä–∞–π—Ç–µ—Ä
        
        # ROI —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        if total_daily_cost > 0:
            daily_roi = ((total_savings - total_daily_cost) / total_daily_cost) * 100
            daily_roi = max(-100, min(500, daily_roi))  # –û–±–º–µ–∂—É—î–º–æ -100% to +500%
        else:
            daily_roi = 0
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å
        roi, created = cls.objects.update_or_create(
            date=date,
            defaults={
                'manual_hours_saved': round(time_saved, 1),
                'ai_processing_time': round(ai_hours, 2),
                'time_efficiency': round((time_saved / manual_hours * 100) if manual_hours > 0 else 0, 1),
                'content_manager_cost_saved': round(content_manager_cost, 2),
                'smm_specialist_cost_saved': round(smm_cost, 2),
                'copywriter_cost_saved': round(copywriter_cost, 2),
                'ai_api_costs': round(ai_cost, 2),
                'net_savings': round(total_savings - total_daily_cost, 2),
                'articles_processed': articles_count,
                'translations_made': translations_made,
                'social_posts_generated': social_posts_generated,
                'images_generated': images_generated,
                'tags_assigned': tags_assigned,
                'avg_article_rating': 4.5,  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
                'key_takeaways_en': [f"Processed {articles_count} articles with AI"],
                'key_takeaways_uk': [f"–û–±—Ä–æ–±–ª–µ–Ω–æ {articles_count} —Å—Ç–∞—Ç–µ–π –∑ AI"],
                'key_takeaways_pl': [f"Przetworzono {articles_count} artyku≈Ç√≥w z AI"],
                'cross_promotion_success_rate': tag_analytics.get('cross_promotion_rate', 0),  # –ù–û–í–ò–ô
            }
        )
        
        return roi
    
    @classmethod
    def _calculate_article_rating(cls, articles_queryset):
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å–µ—Ä–µ–¥–Ω—é –æ—Ü—ñ–Ω–∫—É —Å—Ç–∞—Ç–µ–π (0-6.0)"""
        if not articles_queryset.exists():
            return 0.0
        
        total_rating = 0
        count = 0
        
        for article in articles_queryset:
            # –ë–∞–∑–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞
            rating = 3.0  # –°–µ—Ä–µ–¥–Ω—è –±–∞–∑–∞
            
            # +0.5 –∑–∞ –≤–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
            if article.priority >= 3:
                rating += 0.5
            
            # +0.5 –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å AI –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if article.ai_image_url:
                rating += 0.5
            
            # +1.0 –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∏ (—è–∫—â–æ —î)
            total_views = article.get_total_views()
            if total_views > 50:
                rating += 1.0
            elif total_views > 10:
                rating += 0.5
            
            # +0.5 –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É
            if (article.business_insight_uk and 
                len(article.business_insight_uk) > 100):
                rating += 0.5
            
            # +0.5 –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ–≥—ñ–≤
            if article.tags.exists():
                rating += 0.5
            
            total_rating += min(rating, 6.0)  # –ú–∞–∫—Å–∏–º—É–º 6.0
            count += 1
        
        return round(total_rating / count, 1) if count > 0 else 0.0
    
    @classmethod  
    def _generate_key_takeaways(cls, articles_queryset):
        """–ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –∑ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π"""
        if not articles_queryset.exists():
            return {
                'english': ['No articles processed today'],
                'ukrainian': ['–°—å–æ–≥–æ–¥–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ –Ω–µ –æ–±—Ä–æ–±–ª—è–ª–∏—Å—å'],
                'polish': ['Dzisiaj nie przetworzono artyku≈Ç√≥w']
            }
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        top_categories = articles_queryset.values(
            'category__name_uk', 'category__name_en', 'category__name_pl'
        ).annotate(count=Count('id')).order_by('-count')[:3]
        
        # AI –º–æ–¥–µ–ª—ñ —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å
        ai_models = articles_queryset.values_list(
            'ai_model_used', flat=True
        ).distinct()
        
        # –¢–æ–ø —Ç–µ–≥–∏
        top_tags = []
        for article in articles_queryset:
            top_tags.extend(article.tags.values_list('slug', flat=True))
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ —Ç–µ–≥–∏
        from collections import Counter
        tag_counts = Counter(top_tags)
        most_common_tags = [tag for tag, count in tag_counts.most_common(3)]
        
        takeaways = {
            'english': [
                f"Processed {articles_queryset.count()} tech articles",
                f"Top category: {top_categories[0]['category__name_en'] if top_categories else 'General'}",
                f"AI models used: {', '.join(filter(None, ai_models))}",
                f"Popular tags: {', '.join(most_common_tags)}",
                "Multilingual content generated for EU market"
            ],
            'ukrainian': [
                f"–û–±—Ä–æ–±–ª–µ–Ω–æ {articles_queryset.count()} —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π",
                f"–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {top_categories[0]['category__name_uk'] if top_categories else '–ó–∞–≥–∞–ª—å–Ω–µ'}",
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ AI –º–æ–¥–µ–ª—ñ: {', '.join(filter(None, ai_models))}",
                f"–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–µ–≥–∏: {', '.join(most_common_tags)}",
                "–°—Ç–≤–æ—Ä–µ–Ω–æ —Ç—Ä–∏–º–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ñ–° —Ä–∏–Ω–∫—É"
            ],
            'polish': [
                f"Przetworzono {articles_queryset.count()} artyku≈Ç√≥w technologicznych",
                f"G≈Ç√≥wna kategoria: {top_categories[0]['category__name_pl'] if top_categories else 'Og√≥lne'}",
                f"U≈ºywane modele AI: {', '.join(filter(None, ai_models))}",
                f"Popularne tagi: {', '.join(most_common_tags)}",
                "Wygenerowano tre≈õci w trzech jƒôzykach dla rynku UE"
            ]
        }
        
        return takeaways
    
    @classmethod
    def _calculate_tag_analytics(cls, articles_queryset):
        """–ù–û–í–ò–ô: –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∞–Ω–∞–ª—ñ—Ç–∏–∫—É —Ç–µ–≥—ñ–≤"""
        if not articles_queryset.exists():
            return {
                'top_tags': [],
                'engagement_stats': {},
                'cross_promotion_rate': 0
            }
        
        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç–µ–≥–∏ —Ç–∞ —ó—Ö –º–µ—Ç—Ä–∏–∫–∏
        tag_stats = {}
        total_articles_with_tags = 0
        
        for article in articles_queryset:
            if article.tags.exists():
                total_articles_with_tags += 1
                article_views = article.get_total_views()
                
                for tag in article.tags.all():
                    if tag.slug not in tag_stats:
                        tag_stats[tag.slug] = {
                            'name': tag.get_name('uk'),
                            'articles_count': 0,
                            'total_views': 0,
                            'cross_promotion_potential': 0
                        }
                    
                    tag_stats[tag.slug]['articles_count'] += 1
                    tag_stats[tag.slug]['total_views'] += article_views
                    
                    # –†–∞—Ö—É—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
                    related_projects = article.get_related_projects()
                    related_services = article.get_related_services()
                    if related_projects or related_services:
                        tag_stats[tag.slug]['cross_promotion_potential'] += 1
        
        # –¢–æ–ø —Ç–µ–≥–∏ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
        top_tags = []
        for slug, stats in tag_stats.items():
            if stats['articles_count'] > 0:
                avg_views = stats['total_views'] / stats['articles_count']
                cross_promotion_rate = (stats['cross_promotion_potential'] / stats['articles_count']) * 100
                
                top_tags.append({
                    'slug': slug,
                    'name': stats['name'],
                    'articles_count': stats['articles_count'],
                    'avg_views_per_article': round(avg_views, 1),
                    'cross_promotion_rate': round(cross_promotion_rate, 1)
                })
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–µ—Ä–µ–¥–Ω—ñ–º–∏ –ø–µ—Ä–µ–≥–ª—è–¥–∞–º–∏
        top_tags.sort(key=lambda x: x['avg_views_per_article'], reverse=True)
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—ó
        cross_promotion_success = 0
        if total_articles_with_tags > 0:
            articles_with_cross_promo = sum(
                1 for article in articles_queryset 
                if article.tags.exists() and (
                    article.get_related_projects() or article.get_related_services()
                )
            )
            cross_promotion_success = (articles_with_cross_promo / total_articles_with_tags) * 100
        
        return {
            'top_tags': top_tags[:5],  # –¢–æ–ø 5 —Ç–µ–≥—ñ–≤
            'engagement_stats': tag_stats,
            'cross_promotion_rate': round(cross_promotion_success, 1)
        }


class SocialMediaPost(models.Model):
    """–ü–æ—Å—Ç–∏ –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö - –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É"""
    
    PLATFORM_CHOICES = [
        ('telegram_uk', 'Telegram Ukraine'),
        ('instagram_pl', 'Instagram Poland'),
        ('facebook_pl', 'Facebook Poland'),
        ('instagram_en', 'Instagram English'),
        ('facebook_en', 'Facebook English'),
        ('linkedin_en', 'LinkedIn English'),
    ]
    
    STATUS_CHOICES = [
        ('draft', _('–ß–µ—Ä–Ω–µ—Ç–∫–∞')),
        ('scheduled', _('–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ')),
        ('published', _('–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ')),
        ('failed', _('–ü–æ–º–∏–ª–∫–∞')),
    ]
    
    article = models.ForeignKey(ProcessedArticle, on_delete=models.CASCADE, related_name='social_posts')
    platform = models.CharField(_('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'), max_length=20, choices=PLATFORM_CHOICES)
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
    content = models.TextField(_('–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞'))
    hashtags = models.CharField(_('–•–µ—à—Ç–µ–≥–∏'), max_length=500, blank=True)
    image_url = models.URLField(_('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è'), blank=True)
    
    # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    scheduled_at = models.DateTimeField(_('–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞'), null=True, blank=True)
    published_at = models.DateTimeField(_('–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ'), null=True, blank=True)
    
    # –°—Ç–∞—Ç—É—Å —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏
    status = models.CharField(_('–°—Ç–∞—Ç—É—Å'), max_length=20, choices=STATUS_CHOICES, default='draft')
    external_post_id = models.CharField(_('ID –≤ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ'), max_length=100, blank=True)
    
    # –ú–µ—Ç—Ä–∏–∫–∏ (–∑–∞–ø–æ–≤–Ω—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
    likes_count = models.IntegerField(_('–õ–∞–π–∫—ñ–≤'), default=0)
    comments_count = models.IntegerField(_('–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'), default=0)
    shares_count = models.IntegerField(_('–ü–æ–¥—ñ–ª–∏–ª–∏—Å—å'), default=0)
    reach_count = models.IntegerField(_('–û—Ö–æ–ø–ª–µ–Ω–Ω—è'), default=0)
    
    # –ü–æ–º–∏–ª–∫–∏
    error_message = models.TextField(_('–ü–æ–º–∏–ª–∫–∞'), blank=True)
    retry_count = models.IntegerField(_('–°–ø—Ä–æ–± –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó'), default=0)
    
    created_at = models.DateTimeField(_('–°—Ç–≤–æ—Ä–µ–Ω–æ'), auto_now_add=True)
    
    class Meta:
        verbose_name = _('–ü–æ—Å—Ç –≤ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ')
        verbose_name_plural = _('–ü–æ—Å—Ç–∏ –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö')
        ordering = ['-created_at']
        unique_together = ['article', 'platform']  # –û–¥–∏–Ω –ø–æ—Å—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    
    def __str__(self):
        return f"{self.get_platform_display()}: {self.content[:50]}..."
    
    @property
    def engagement_rate(self):
        """–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞–ª—É—á–µ–Ω–Ω—è"""
        if self.reach_count > 0:
            engagement = self.likes_count + self.comments_count + self.shares_count
            return (engagement / self.reach_count) * 100
        return 0
    
    def mark_as_published(self, external_id):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ"""
        self.status = 'published'
        self.published_at = timezone.now()
        self.external_post_id = external_id
        self.save()


class NewsWidget(models.Model):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –Ω–æ–≤–∏–Ω –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    
    WIDGET_TYPES = [
        ('latest', _('–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏')),
        ('trending', _('–ü–æ–ø—É–ª—è—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏')),
        ('category', _('–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö')),
        ('featured', _('–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ')),
        ('top_articles', _('–¢–æ–ø —Å—Ç–∞—Ç—Ç—ñ')),  # –ù–û–í–ò–ô –¢–ò–ü
    ]
    
    name = models.CharField(_('–ù–∞–∑–≤–∞ –≤—ñ–¥–∂–µ—Ç–∞'), max_length=100)
    widget_type = models.CharField(_('–¢–∏–ø –≤—ñ–¥–∂–µ—Ç–∞'), max_length=20, choices=WIDGET_TYPES)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    articles_limit = models.IntegerField(_('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞—Ç–µ–π'), default=5)
    show_images = models.BooleanField(_('–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'), default=True)
    show_date = models.BooleanField(_('–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¥–∞—Ç—É'), default=True)
    show_category = models.BooleanField(_('–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'), default=True)
    show_tags = models.BooleanField(_('–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–µ–≥–∏'), default=False)  # –ù–û–í–ò–ô
    show_cross_promotion = models.BooleanField(_('–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∫—Ä–æ—Å-–ø—Ä–æ–º–æ—Ü—ñ—é'), default=False)  # –ù–û–í–ò–ô
    
    # –§—ñ–ª—å—Ç—Ä–∏
    categories = models.ManyToManyField(NewsCategory, blank=True, verbose_name=_('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó'))
    languages = models.JSONField(_('–ú–æ–≤–∏'), default=list)  # ['en', 'uk', 'pl']
    
    # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è
    css_class = models.CharField(_('CSS –∫–ª–∞—Å'), max_length=100, blank=True)
    background_color = models.CharField(_('–ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É'), max_length=7, default='#ffffff')
    text_color = models.CharField(_('–ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É'), max_length=7, default='#333333')
    
    # –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
    position = models.IntegerField(_('–ü–æ–∑–∏—Ü—ñ—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ'), default=0)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–Ω–∏–π'), default=True)
    
    created_at = models.DateTimeField(_('–°—Ç–≤–æ—Ä–µ–Ω–æ'), auto_now_add=True)
    
    class Meta:
        verbose_name = _('–í—ñ–¥–∂–µ—Ç –Ω–æ–≤–∏–Ω')
        verbose_name_plural = _('–í—ñ–¥–∂–µ—Ç–∏ –Ω–æ–≤–∏–Ω')
        ordering = ['position']
    
    def __str__(self):
        return self.name
    
    def get_articles(self, language='uk'):
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –≤—ñ–¥–∂–µ—Ç–∞"""
        queryset = ProcessedArticle.objects.filter(status='published')
        
        # –§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        if self.categories.exists():
            queryset = queryset.filter(category__in=self.categories.all())
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —Ç–∏–ø—É
        if self.widget_type == 'latest':
            queryset = queryset.order_by('-published_at')
        elif self.widget_type == 'trending':
            # –°–æ—Ä—Ç—É—î–º–æ –ø–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
            queryset = queryset.order_by('-views_count_uk', '-views_count_en', '-views_count_pl')
        elif self.widget_type == 'featured':
            queryset = queryset.filter(priority__gte=3).order_by('-priority', '-published_at')
        elif self.widget_type == 'top_articles':  # –ù–û–í–ò–ô –¢–ò–ü
            queryset = queryset.filter(is_top_article=True).order_by('article_rank')
        
        return queryset[:self.articles_limit]


