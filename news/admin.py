# –°–£–ü–ï–† –ü–†–û–°–¢–ò–ô admin.py - –ë–ï–ó –ñ–û–î–ù–ò–• –ó–ê–ú–û–†–û–ß–û–ö!

from django.contrib import admin
from django.utils.html import format_html
from django.utils.safestring import mark_safe
from django.db.models import Sum, Count
from django.utils.translation import override
from django.urls import path, reverse
from django.shortcuts import redirect
from django.contrib import messages
from django.core.management import call_command
from django.utils import timezone
from datetime import datetime
from django.http import HttpResponseRedirect
from django.contrib.admin import helpers
from django.template.response import TemplateResponse

from .models import (
    RSSSource, 
    NewsCategory, 
    RawArticle, 
    ProcessedArticle,
    ROIAnalytics,
    DailyDigest,
    AIProcessingLog,
    SocialMediaPost,
    NewsWidget
)

# –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
admin.site.site_header = "News Admin"
admin.site.site_title = "News"


# === ROI ANALYTICS (–ù–ê–ô–ü–†–û–°–¢–Ü–®–ò–ô) ===
@admin.register(ROIAnalytics)
class SimpleROIAdmin(admin.ModelAdmin):
    list_display = [
        'date', 
        'articles_processed', 
        'show_savings',
        'show_roi',
        'show_social_posts',
        'tags_assigned'
    ]
    
    list_filter = ['date']
    ordering = ['-date']
    readonly_fields = ['created_at', 'updated_at']
    
    def show_savings(self, obj):
        try:
            savings = obj.net_savings
            return str(savings)
        except:
            return "0"
    show_savings.short_description = "–ï–∫–æ–Ω–æ–º—ñ—è"
    
    def show_roi(self, obj):
        try:
            roi = obj.roi_percentage
            return str(roi) + "%"
        except:
            return "0%"
    show_roi.short_description = "ROI"
    
    def show_social_posts(self, obj):
        try:
            from .models import SocialMediaPost
            posts_count = SocialMediaPost.objects.filter(
                created_at__date=obj.date,
                status='published'
            ).count()
            return f"{posts_count} –ø–æ—Å—Ç—ñ–≤"
        except:
            return "0 –ø–æ—Å—Ç—ñ–≤"
    show_social_posts.short_description = "–°–æ—Ü–º–µ—Ä–µ–∂—ñ"


# === –°–¢–ê–¢–¢–Ü (–ù–ê–ô–ü–†–û–°–¢–Ü–®–Ü) ===
@admin.register(ProcessedArticle)
class SimpleArticleAdmin(admin.ModelAdmin):
    list_display = ['get_title', 'category', 'status', 'priority', 'is_top_article', 'article_rank', 'show_ai_cost', 'show_ai_time', 'show_ai_ops', 'show_social_posts', 'telegram_publish_button', 'created_at']
    # list_editable = ['priority', 'is_top_article', 'article_rank']  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∫–Ω–µ–Ω–æ
    list_filter = ['status', 'category', 'priority', 'is_top_article']
    search_fields = ['title_uk', 'title_en', 'title_pl']
    readonly_fields = ['created_at', 'updated_at', 'ai_image_url', 'get_original_content', 'get_original_summary', 'get_original_url', 'get_full_content_uk', 'get_full_content_en', 'get_full_content_pl', 'show_ai_cost', 'show_ai_time', 'show_ai_ops', 'show_social_posts', 'telegram_publish_button']
    actions = ['publish_to_telegram']
    
    def publish_single_to_telegram(self, request, article_id):
        """–ü—É–±–ª—ñ–∫—É—î –æ–¥–Ω—É —Å—Ç–∞—Ç—Ç—é –≤ Telegram"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ article_id —î —á–∏—Å–ª–æ–º
            if not isinstance(article_id, int):
                messages.error(request, f'‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID —Å—Ç–∞—Ç—Ç—ñ: {article_id}')
                return redirect('..')
            
            article = ProcessedArticle.objects.get(pk=article_id)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ
            if article.social_posts.filter(platform='telegram_uk', status='published').exists():
                messages.warning(request, '‚ö†Ô∏è –°—Ç–∞—Ç—Ç—è –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ –≤ Telegram')
                return redirect('..')
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–≤–∂–¥–∏ –±–µ—Ä–µ–º–æ –∑ title_uk –∞–±–æ title_en (–æ–±—Ä—ñ–∑–∞—î–º–æ –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
            title = article.title_uk[:500] if article.title_uk else article.title_en[:600]
            
            # Summary - —è–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π summary –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ —Ç–∞–∫–∏–π –∂–µ —è–∫ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ business_insight_uk
            if article.summary_uk and article.summary_uk != article.summary_en:
                summary = article.summary_uk[:1000]  # –ë–µ–∑–ø–µ—á–Ω–∏–π –ª—ñ–º—ñ—Ç
            elif article.business_insight_uk:
                summary = article.business_insight_uk[:1000] + "..."
            else:
                summary = article.summary_en[:1000]
            
            message = (
                f"üî• <strong>{title}</strong>\n\n"
                f"{summary}\n\n"
                f"‚Äî <em>Lazysoft AI News</em>"
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É "–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ"
            button = {"inline_keyboard": [[{"text": "üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ", "url": f"https://lazysoft.dev{article.get_absolute_url('uk')}"}]]}
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ Telegram
            from news.services.telegram import TelegramService
            telegram_service = TelegramService()
            external_id = telegram_service.post_to_telegram(
                message, 
                photo_url=article.ai_image_url,
                reply_markup=button
            )
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            import logging
            logger = logging.getLogger(__name__)
            logger.info(f"üîç Telegram –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è: external_id = {external_id}")
            
            if external_id:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é
                from news.models import SocialMediaPost
                smp, created = SocialMediaPost.objects.get_or_create(
                    article=article,
                    platform='telegram_uk',
                    defaults={
                        'content': message,
                        'image_url': article.ai_image_url[:500] if article.ai_image_url else '',
                        'status': 'draft'
                    }
                )
                smp.mark_as_published(external_id)
                logger.info(f"‚úÖ SocialMediaPost —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ: ID={smp.id}, Status={smp.status}")
                messages.success(request, f'‚úÖ –°—Ç–∞—Ç—Ç—é "{article.get_title("uk")}" —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ Telegram!')
            else:
                logger.warning(f"‚ùå Telegram API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ external_id –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ {article.id}")
                messages.error(request, '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –≤ Telegram')
                
        except ProcessedArticle.DoesNotExist:
            messages.error(request, '‚ùå –°—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        except Exception as e:
            messages.error(request, f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {str(e)}')
        
        return redirect('..')
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('run-pipeline/', self.admin_site.admin_view(self.run_pipeline), name='news_processedarticle_run_pipeline'),
            path('<int:article_id>/publish-telegram/', self.admin_site.admin_view(self.publish_single_to_telegram), name='news_processedarticle_publish_telegram'),
        ]
        return custom_urls + urls
    
    def run_pipeline(self, request):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω –Ω–æ–≤–∏–Ω"""
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ management command
            call_command('daily_news_pipeline', '--full-pipeline', '--auto-publish', verbosity=1)
            messages.success(request, '‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.')
        except Exception as e:
            messages.error(request, f'‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–∞–π–ø–ª–∞–π–Ω—É: {str(e)}')
        
        return redirect('..')
    
    def changelist_view(self, request, extra_context=None):
        extra_context = extra_context or {}
        extra_context['pipeline_button'] = True
        return super().changelist_view(request, extra_context=extra_context)
    
    def publish_to_telegram(self, request, queryset):
        """–ü—É–±–ª—ñ–∫—É—î –≤–∏–±—Ä–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ –≤ Telegram"""
        published_count = 0
        errors = []
        
        for article in queryset:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ
                if article.social_posts.filter(platform='telegram_uk', status='published').exists():
                    continue
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–≤–∂–¥–∏ –±–µ—Ä–µ–º–æ –∑ title_uk –∞–±–æ title_en (–æ–±—Ä—ñ–∑–∞—î–º–æ –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
                title = article.title_uk[:200] if article.title_uk else article.title_en[:200]
                
                # Summary - —è–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π summary –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ —Ç–∞–∫–∏–π –∂–µ —è–∫ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ business_insight_uk
                if article.summary_uk and article.summary_uk != article.summary_en:
                    summary = article.summary_uk[:1000]  # –ë–µ–∑–ø–µ—á–Ω–∏–π –ª—ñ–º—ñ—Ç
                elif article.business_insight_uk:
                    summary = article.business_insight_uk[:1000] + "..."
                else:
                    summary = article.summary_en[:1000]
                
                message = (
                    f"üî• <strong>{title}</strong>\n\n"
                    f"{summary}\n\n"
                    f"‚Äî <em>Lazysoft AI News</em>"
                )
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É "–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ"
                button = {"inline_keyboard": [[{"text": "üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ", "url": f"https://lazysoft.dev{article.get_absolute_url('uk')}"}]]}
                
                # –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ Telegram
                from news.services.telegram import TelegramService
                telegram_service = TelegramService()
                external_id = telegram_service.post_to_telegram(
                    message, 
                    photo_url=article.ai_image_url,
                    reply_markup=button
                )
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                import logging
                logger = logging.getLogger(__name__)
                logger.info(f"üîç Bulk Telegram –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è: article_id={article.id}, external_id={external_id}")
                
                if external_id:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é
                    from news.models import SocialMediaPost
                    smp, created = SocialMediaPost.objects.get_or_create(
                        article=article,
                        platform='telegram_uk',
                        defaults={
                            'content': message,
                            'image_url': article.ai_image_url[:200] if article.ai_image_url else '',
                            'status': 'draft'
                        }
                    )
                    smp.mark_as_published(external_id)
                    logger.info(f"‚úÖ Bulk SocialMediaPost —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ: ID={smp.id}, Status={smp.status}")
                    published_count += 1
                else:
                    errors.append(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏: {article.get_title('uk')[:50]}...")
                    
            except Exception as e:
                errors.append(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {article.get_title('uk')[:50]}...: {str(e)}")
        
        if published_count > 0:
            messages.success(request, f'‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {published_count} —Å—Ç–∞—Ç–µ–π –≤ Telegram')
        if errors:
            for error in errors[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–º–∏–ª–æ–∫
                messages.warning(request, f'‚ö†Ô∏è {error}')
        
        return HttpResponseRedirect(request.get_full_path())
    
    publish_to_telegram.short_description = "üì¢ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ Telegram"
    
    def telegram_publish_button(self, obj):
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ Telegram –∑ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–∞—Ç—Ç—ñ"""
        try:
            if not obj or not obj.pk:
                return "‚Äî"

            # –ë–µ–∑–ø–µ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ related (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ related_name)
            try:
                social_posts_qs = obj.social_posts
            except AttributeError:
                social_posts_qs = getattr(obj, 'socialmediapost_set', None)

            already = False
            if social_posts_qs is not None:
                try:
                    already = social_posts_qs.filter(platform='telegram_uk', status='published').exists()
                except Exception:
                    already = False

            try:
                url = reverse('admin:news_processedarticle_publish_telegram', args=[obj.pk])
            except Exception:
                return "‚Äî"

            if already:
                # –ø–æ–∫–∞–∑—É—î–º–æ —ñ –±–µ–π–¥–∂, —ñ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–ø–æ—Å—Ç—É
                return format_html(
                    '<span style="color: green; margin-right:8px;">‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ</span>'
                    '<a href="{}" class="button" style="background:#6c757d;color:#fff;padding:5px 10px;'
                    'text-decoration:none;border-radius:3px;">üîÅ –ü–µ—Ä–µ–ø–æ—Å—Ç–∏—Ç–∏</a>',
                    url
                )

            return format_html(
                '<a href="{}" class="button" style="background:#28a745;color:#fff;padding:5px 10px;'
                'text-decoration:none;border-radius:3px;">üì¢ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ Telegram</a>',
                url
            )
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)[:50]}"
    
    telegram_publish_button.short_description = "Telegram"
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('status', 'priority', 'category', 'is_top_article', 'article_rank')
        }),
        ('–ó–∞–≥–æ–ª–æ–≤–∫–∏', {
            'fields': ('title_en', 'title_uk', 'title_pl')
        }),
        ('–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('summary_en', 'summary_uk', 'summary_pl'),
            'classes': ('wide',)
        }),
        ('–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('get_original_content', 'get_original_summary', 'get_original_url'),
            'classes': ('wide', 'collapse')
        }),
        ('–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (–∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π AI)', {
            'fields': ('get_full_content_uk', 'get_full_content_en', 'get_full_content_pl'),
            'classes': ('wide', 'collapse')
        }),
        ('–ë—ñ–∑–Ω–µ—Å —ñ–Ω—Å–∞–π—Ç–∏', {
            'fields': ('business_insight_en', 'business_insight_uk', 'business_insight_pl'),
            'classes': ('wide',)
        }),
        ('AI –ú–µ—Ç–∞–¥–∞–Ω—ñ', {
            'fields': ('show_ai_cost', 'show_ai_time', 'show_ai_ops'),
            'classes': ('collapse',)
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω—ñ', {
            'fields': ('ai_image_url', 'published_at', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
        ('Telegram', {
            'fields': ('telegram_publish_button',),
            'classes': ('wide',)
        }),
    )
    
    def get_title(self, obj):
        return obj.title_uk or obj.title_en or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    get_title.short_description = "–ù–∞–∑–≤–∞"
    
    def get_is_top_article(self, obj):
        return "‚úÖ" if obj.is_top_article else "‚ùå"
    get_is_top_article.short_description = "–¢–æ–ø —Å—Ç–∞—Ç—Ç—è"
    get_is_top_article.admin_order_field = "is_top_article"
    
    def get_article_rank(self, obj):
        return f"#{obj.article_rank}" if obj.article_rank else "-"
    get_article_rank.short_description = "–†–∞–Ω–≥"
    get_article_rank.admin_order_field = "article_rank"
    
    def get_original_content(self, obj):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—Ç—ñ"""
        if obj.raw_article and obj.raw_article.content:
            return mark_safe(f'<div style="max-height: 500px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background: #f9f9f9;">{obj.raw_article.content}</div>')
        return "–ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É"
    get_original_content.short_description = '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç'
    
    def get_original_summary(self, obj):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å"""
        if obj.raw_article and obj.raw_article.summary:
            return obj.raw_article.summary
        return "–ù–µ–º–∞—î –æ–ø–∏—Å—É"
    get_original_summary.short_description = '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –æ–ø–∏—Å'
    
    def get_original_url(self, obj):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç—Ç—é"""
        if obj.raw_article and obj.raw_article.original_url:
            return format_html('<a href="{0}" target="_blank" rel="noopener">{0}</a>', obj.raw_article.original_url)
        return "‚Äî"
    get_original_url.short_description = '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è'
    
    def get_full_content_uk(self, obj):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (—è–∫—â–æ —î)"""
        if obj.full_content_uk:
            return mark_safe(f'<div style="max-height: 500px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background: #f0f8ff;">{obj.full_content_uk}</div>')
        return "–ù–µ–º–∞—î –ø–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"
    get_full_content_uk.short_description = '–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (UK)'

    def get_full_content_en(self, obj):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é (—è–∫—â–æ —î)"""
        if obj.full_content_en:
            return mark_safe(f'<div style="max-height: 500px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background: #f0fff0;">{obj.full_content_en}</div>')
        return "–ù–µ–º–∞—î –ø–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"
    get_full_content_en.short_description = '–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (EN)'

    def get_full_content_pl(self, obj):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å—Å—å–∫–æ—é (—è–∫—â–æ —î)"""
        if obj.full_content_pl:
            return mark_safe(f'<div style="max-height: 500px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; background: #fff5f0;">{obj.full_content_pl}</div>')
        return "–ù–µ–º–∞—î –ø–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"
    get_full_content_pl.short_description = '–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (PL)'
    
    def show_ai_cost(self, obj):
        """–ü–æ–∫–∞–∑—É—î –≤–∞—Ä—Ç—ñ—Å—Ç—å AI –æ–±—Ä–æ–±–∫–∏"""
        cost = obj.get_ai_processing_cost()
        if cost > 0:
            return f"${cost:.4f}"
        return "N/A"
    show_ai_cost.short_description = "AI –í–∞—Ä—Ç—ñ—Å—Ç—å"
    show_ai_cost.admin_order_field = 'ai_cost'
    
    def show_ai_time(self, obj):
        """–ü–æ–∫–∞–∑—É—î —á–∞—Å AI –æ–±—Ä–æ–±–∫–∏"""
        time = obj.get_ai_processing_time()
        if time > 0:
            return f"{time:.1f}—Å"
        return "N/A"
    show_ai_time.short_description = "AI –ß–∞—Å"
    
    def show_ai_ops(self, obj):
        """–ü–æ–∫–∞–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å AI –æ–ø–µ—Ä–∞—Ü—ñ–π"""
        ops = obj.get_ai_operations_count()
        if ops > 0:
            return f"{ops} –æ–ø."
        return "N/A"
    show_ai_ops.short_description = "AI –û–ø–µ—Ä–∞—Ü—ñ—ó"
    
    def show_social_posts(self, obj):
        """–ü–æ–∫–∞–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤ –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö –¥–ª—è —Ü—ñ—î—ó —Å—Ç–∞—Ç—Ç—ñ"""
        try:
            if not obj or not obj.pk:
                return "0 –ø–æ—Å—Ç—ñ–≤"
            posts_count = obj.social_posts.filter(status='published').count()
            if posts_count > 0:
                return f"{posts_count} –ø–æ—Å—Ç—ñ–≤"
            return "0 –ø–æ—Å—Ç—ñ–≤"
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)[:20]}"
    show_social_posts.short_description = "–°–æ—Ü–º–µ—Ä–µ–∂—ñ"
    show_social_posts.admin_order_field = "social_posts__status"


# === AI PROCESSING LOGS ===
@admin.register(AIProcessingLog)
class AIProcessingLogAdmin(admin.ModelAdmin):
    list_display = ['article', 'log_type', 'model_used', 'show_cost', 'show_time', 'success', 'created_at']
    list_filter = ['log_type', 'model_used', 'success', 'created_at']
    search_fields = ['article__title', 'model_used']
    readonly_fields = ['created_at', 'input_tokens', 'output_tokens', 'processing_time', 'cost']
    ordering = ['-created_at']
    
    def show_cost(self, obj):
        """–ü–æ–∫–∞–∑—É—î –≤–∞—Ä—Ç—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        return f"${obj.cost:.6f}"
    show_cost.short_description = "–í–∞—Ä—Ç—ñ—Å—Ç—å"
    show_cost.admin_order_field = 'cost'
    
    def show_time(self, obj):
        """–ü–æ–∫–∞–∑—É—î —á–∞—Å –æ–±—Ä–æ–±–∫–∏"""
        return f"{obj.processing_time:.2f}—Å"
    show_time.short_description = "–ß–∞—Å"
    show_time.admin_order_field = 'processing_time'


# === RSS –î–ñ–ï–†–ï–õ–ê ===
@admin.register(RSSSource)
class SimpleRSSAdmin(admin.ModelAdmin):
    list_display = ['name', 'language', 'is_active']
    list_filter = ['language', 'is_active']


# === –ö–ê–¢–ï–ì–û–†–Ü–á ===
@admin.register(NewsCategory)
class SimpleCategoryAdmin(admin.ModelAdmin):
    list_display = ['name_uk', 'is_active']
    list_editable = ['is_active']
    autocomplete_fields = ['cta_service']
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–µ', {
            'fields': ('slug', 'is_active', 'order')
        }),
        ('–ù–∞–∑–≤–∏', {
            'fields': ('name_uk', 'name_pl', 'name_en')
        }),
        ('–û–ø–∏—Å–∏', {
            'fields': ('description_uk', 'description_pl', 'description_en')
        }),
        ('CTA', {
            'fields': (
                'cta_title_uk','cta_title_pl','cta_title_en',
                'cta_description_uk','cta_description_pl','cta_description_en',
                'cta_service','cta_url_preview'
            )
        }),
    )
    readonly_fields = ['cta_url_preview']

    def cta_url_preview(self, obj):
        if not obj or not getattr(obj, 'cta_service', None):
            return "‚Äî"
        parts = []
        try:
            with override('uk'):
                parts.append(f"UK: <code>{obj.get_cta_url('uk')}</code>")
            with override('pl'):
                parts.append(f"PL: <code>{obj.get_cta_url('pl')}</code>")
            with override('en'):
                parts.append(f"EN: <code>{obj.get_cta_url('en')}</code>")
        except Exception:
            return obj.get_cta_url() or "‚Äî"
        return format_html('<br>'.join(parts))
    cta_url_preview.short_description = "CTA URL (uk/pl/en)"


# === –°–ò–†–Ü –°–¢–ê–¢–¢–Ü (–¢–Ü–õ–¨–ö–ò –ß–ò–¢–ê–ù–ù–Ø) ===
@admin.register(RawArticle)
class SimpleRawAdmin(admin.ModelAdmin):
    list_display = ['get_title', 'source', 'is_processed']
    readonly_fields = ['title', 'content', 'fetched_at']
    
    def has_add_permission(self, request):
        return False
    
    def has_change_permission(self, request, obj=None):
        return False
    
    def get_title(self, obj):
        title = obj.title
        if len(title) > 50:
            return title[:50] + "..."
        return title
    get_title.short_description = "–ù–∞–∑–≤–∞"


# === AI –õ–û–ì–ò (–≤–∏–¥–∞–ª–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–æ–≤–∏–π AIProcessingLogAdmin) ===


# === –°–û–¶–ú–ï–†–ï–ñ–Ü ===
@admin.register(SocialMediaPost)
class SimpleSocialAdmin(admin.ModelAdmin):
    list_display = ['platform', 'get_article', 'status']
    list_filter = ['platform', 'status']
    
    def get_article(self, obj):
        title = obj.article.title_uk
        if len(title) > 30:
            return title[:30] + "..."
        return title
    get_article.short_description = "–°—Ç–∞—Ç—Ç—è"


# === –î–ê–ô–î–ñ–ï–°–¢–ò ===
@admin.register(DailyDigest)
class SimpleDaigestAdmin(admin.ModelAdmin):
    list_display = ['date', 'total_articles', 'is_published']
    list_filter = ['is_published']
    
    def has_add_permission(self, request):
        return False


# === –í–Ü–î–ñ–ï–¢–ò ===
@admin.register(NewsWidget)
class SimpleWidgetAdmin(admin.ModelAdmin):
    list_display = ['name', 'widget_type', 'is_active']
    list_editable = ['is_active']


# –ö–Ü–ù–ï–¶–¨ - –ë–Ü–õ–¨–®–ï –ù–Ü–ß–û–ì–û!