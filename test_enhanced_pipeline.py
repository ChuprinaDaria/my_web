#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É—î–º–æ –Ω–æ–≤–∏–π Enhanced Pipeline: Smart Selection ‚Üí FiveFilters ‚Üí AI
"""

import os
import sys
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lazysoft.settings')
django.setup()

from news.models import RawArticle
from news.services.fulltext_extractor import FullTextExtractor

def test_smart_selection():
    """–¢–µ—Å—Ç—É—î–º–æ smart selection"""
    print("üìä –¢–µ—Å—Ç Smart Selection")
    print("=" * 30)
    
    # –ë–µ—Ä–µ–º–æ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
    unprocessed = RawArticle.objects.filter(
        is_processed=False,
        is_duplicate=False
    ).select_related('source').order_by('-published_at')[:20]
    
    print(f"üìÑ –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π: {len(unprocessed)}")
    
    if not unprocessed:
        print("‚ùå –ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        return []
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—Ç—ñ –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏
    scored_articles = []
    
    for i, article in enumerate(unprocessed[:10], 1):
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü—ñ–Ω–∫–∏
        score = 0
        content_length = len(article.content or article.summary or "")
        
        if content_length > 1000:
            score += 3
        elif content_length > 500:
            score += 2
        elif content_length > 200:
            score += 1
        
        # –°–≤—ñ–∂—ñ—Å—Ç—å
        from django.utils import timezone
        hours_old = (timezone.now() - article.published_at).total_seconds() / 3600
        if hours_old < 6:
            score += 2
        elif hours_old < 24:
            score += 1
        
        # –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –¥–∂–µ—Ä–µ–ª–∞
        if article.source.language == 'en':
            score += 1
        
        scored_articles.append((article, score, content_length))
        
        print(f"[{i}] –°–∫–æ—Ä: {score} | {content_length} —Å–∏–º–≤ | {article.title[:50]}...")
    
    # –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Å–∫–æ—Ä—É
    scored_articles.sort(key=lambda x: x[1], reverse=True)
    top_5 = scored_articles[:5]
    
    print(f"\nüèÜ –¢–û–ü-5 —Å—Ç–∞—Ç–µ–π –¥–ª—è FiveFilters:")
    for i, (article, score, length) in enumerate(top_5, 1):
        print(f"{i}. [{score} –±–∞–ª—ñ–≤] {article.title[:60]}...")
    
    return [article for article, score, length in top_5]

def test_fivefilters_on_top_articles(top_articles):
    """–¢–µ—Å—Ç—É—î–º–æ FiveFilters –Ω–∞ —Ç–æ–ø —Å—Ç–∞—Ç—Ç—è—Ö"""
    print(f"\nüîç –¢–µ—Å—Ç FiveFilters –Ω–∞ {len(top_articles)} —Å—Ç–∞—Ç—Ç—è—Ö")
    print("=" * 50)
    
    if not top_articles:
        print("‚ùå –ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        return
    
    extractor = FullTextExtractor()
    results = []
    
    for i, article in enumerate(top_articles, 1):
        print(f"\n[{i}/{len(top_articles)}] {article.title[:50]}...")
        print(f"üîó URL: {article.original_url}")
        
        original_length = len(article.content or article.summary or "")
        print(f"üìè RSS –∫–æ–Ω—Ç–µ–Ω—Ç: {original_length} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        try:
            # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            full_content = extractor.extract_article(article.original_url)
            
            if full_content:
                improvement = len(full_content) - original_length
                percentage = (improvement / original_length * 100) if original_length > 0 else 999
                
                print(f"‚úÖ FiveFilters: {len(full_content)} —Å–∏–º–≤–æ–ª—ñ–≤")
                print(f"üìà –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è: +{improvement} —Å–∏–º–≤–æ–ª—ñ–≤ (+{percentage:.1f}%)")
                
                if improvement > 1000:
                    quality = "üî• –í–Ü–î–ú–Ü–ù–ù–û"
                elif improvement > 500:
                    quality = "‚úÖ –î–û–ë–†–ï"
                elif improvement > 0:
                    quality = "‚ö†Ô∏è –ù–ï–í–ï–õ–ò–ö–ï"
                else:
                    quality = "‚ùå –ë–ï–ó –ü–û–ö–†–ê–©–ï–ù–ù–Ø"
                
                print(f"üíé –Ø–∫—ñ—Å—Ç—å: {quality}")
                
                results.append({
                    'article': article,
                    'original_length': original_length,
                    'enhanced_length': len(full_content),
                    'improvement': improvement,
                    'success': True
                })
            else:
                print("‚ùå FiveFilters –Ω–µ –∑–º—ñ–≥ –≤–∏—Ç—è–≥—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç")
                results.append({
                    'article': article,
                    'original_length': original_length,
                    'enhanced_length': 0,
                    'improvement': 0,
                    'success': False
                })
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            results.append({
                'article': article,
                'original_length': original_length,
                'enhanced_length': 0,
                'improvement': 0,
                'success': False
            })
    
    return results

def analyze_pipeline_results(results):
    """–ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print(f"\nüìä –ê–ù–ê–õ–Ü–ó –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í PIPELINE")
    print("=" * 40)
    
    if not results:
        print("‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        return
    
    successful = [r for r in results if r['success']]
    success_rate = len(successful) / len(results) * 100
    
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å FiveFilters: {success_rate:.1f}% ({len(successful)}/{len(results)})")
    
    if successful:
        total_improvement = sum(r['improvement'] for r in successful)
        avg_improvement = total_improvement / len(successful)
        
        print(f"üìà –°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è: {avg_improvement:.0f} —Å–∏–º–≤–æ–ª—ñ–≤")
        print(f"üìä –ó–∞–≥–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è: {total_improvement} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best = max(successful, key=lambda x: x['improvement'])
        print(f"\nüèÜ –ù–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   üì∞ {best['article'].title[:50]}...")
        print(f"   üìà {best['original_length']} ‚Üí {best['enhanced_length']} —Å–∏–º–≤–æ–ª—ñ–≤")
        print(f"   üéØ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è: +{best['improvement']} —Å–∏–º–≤–æ–ª—ñ–≤")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    if success_rate >= 80:
        print("üéâ –í—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å! –ì–æ—Ç–æ–≤—ñ –¥–æ AI –æ–±—Ä–æ–±–∫–∏!")
    elif success_rate >= 60:
        print("‚úÖ –•–æ—Ä–æ—à–∞ —è–∫—ñ—Å—Ç—å. –ú–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–∂–µ—Ä–µ–ª.")
    elif success_rate >= 40:
        print("‚ö†Ô∏è –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å. –í–∞—Ä—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è FiveFilters.")
    else:
        print("‚ùå –ù–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º.")

def test_ai_readiness(results):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–ª—è AI –æ–±—Ä–æ–±–∫–∏"""
    print(f"\nü§ñ –ì–û–¢–û–í–ù–Ü–°–¢–¨ –î–û AI –û–ë–†–û–ë–ö–ò")
    print("=" * 30)
    
    successful = [r for r in results if r['success'] and r['enhanced_length'] > 800]
    
    print(f"üìä –°—Ç–∞—Ç–µ–π –≥–æ—Ç–æ–≤–∏—Ö –¥–æ AI: {len(successful)}")
    
    if successful:
        avg_length = sum(r['enhanced_length'] for r in successful) / len(successful)
        print(f"üìè –°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞: {avg_length:.0f} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        if avg_length > 2000:
            print("üî• –í—ñ–¥–º—ñ–Ω–Ω–æ! AI –º–∞—Ç–∏–º–µ –±–∞–≥–∞—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Ä–æ–±–æ—Ç–∏")
        elif avg_length > 1000:
            print("‚úÖ –î–æ–±—Ä–µ! –î–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —è–∫—ñ—Å–Ω–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤")
        else:
            print("‚ö†Ô∏è –ú–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É. AI –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –∑ –æ–±–º–µ–∂–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é")

def main():
    print("üß™ –¢–ï–°–¢ ENHANCED PIPELINE")
    print("=" * 50)
    
    # 1. Smart Selection
    top_articles = test_smart_selection()
    
    if not top_articles:
        print("‚ùå –ù–µ–º–∞—î —Å—Ç–∞—Ç–µ–π. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏ RSS –ø–∞—Ä—Å–∏–Ω–≥!")
        return
    
    # 2. FiveFilters Enhancement
    results = test_fivefilters_on_top_articles(top_articles)
    
    # 3. –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    analyze_pipeline_results(results)
    
    # 4. –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ AI
    test_ai_readiness(results)
    
    print(f"\nüéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
    print("1. –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–æ–±—Ä—ñ ‚Üí —ñ–Ω—Ç–µ–≥—Ä—É–π –≤ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥")
    print("2. –ü–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é–π AI –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–≤–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º")
    print("3. –¢–µ—Å—Ç—É–π –ø–æ–≤–Ω–∏–π pipeline: RSS ‚Üí Selection ‚Üí FiveFilters ‚Üí AI")

if __name__ == "__main__":
    main()