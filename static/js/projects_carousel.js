document.addEventListener('DOMContentLoaded', function() {
    console.log('üé† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª–µ–π –ø—Ä–æ—î–∫—Ç—ñ–≤...');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Lucide —ñ–∫–æ–Ω–æ–∫
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
        console.log('‚úÖ Lucide —ñ–∫–æ–Ω–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } else {
        console.warn('‚ö†Ô∏è Lucide –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    }
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—É—Å–µ–ª–µ–π
    const carousels = document.querySelectorAll('.projects-carousel-wrapper');
    console.log(`üìã –ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—É—Å–µ–ª–µ–π: ${carousels.length}`);
    
    carousels.forEach((carousel, index) => {
        const track = carousel.querySelector('.projects-carousel-track');
        const items = carousel.querySelectorAll('.carousel-project-item');
        const carouselId = carousel.id;
        
        console.log(`üéØ –ö–∞—Ä—É—Å–µ–ª—å ${index + 1}: ID=${carouselId}, –µ–ª–µ–º–µ–Ω—Ç—ñ–≤=${items.length}`);
        
        if (!track || items.length === 0) return;
        
        let currentIndex = 0;
        const totalItems = items.length;
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
        const prevBtn = document.querySelector(`.carousel-nav-btn[data-carousel="${carouselId}"][data-direction="prev"]`);
        const nextBtn = document.querySelector(`.carousel-nav-btn[data-carousel="${carouselId}"][data-direction="next"]`);
        const indicators = document.querySelectorAll(`.indicator[data-carousel="${carouselId}"]`);
        
        console.log(`üîò –ö–Ω–æ–ø–∫–∏: prev=${!!prevBtn}, next=${!!nextBtn}, indicators=${indicators.length}`);
        
        // –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —à–∏—Ä–∏–Ω–∏
        function getItemWidth() {
            if (items.length === 0) return 340;
            const itemStyle = window.getComputedStyle(items[0]);
            const itemWidth = items[0].offsetWidth;
            const gap = parseFloat(itemStyle.marginRight) || 24;
            return itemWidth + gap;
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∏–º–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        function getVisibleItems() {
            const containerWidth = carousel.offsetWidth;
            const itemWidth = getItemWidth();
            return Math.max(1, Math.floor(containerWidth / itemWidth));
        }
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ
        function updateCarousel() {
            const itemWidth = getItemWidth();
            const translateX = -(currentIndex * itemWidth);
            track.style.transform = `translateX(${translateX}px)`;
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
            const visibleItems = getVisibleItems();
            const maxIndex = Math.max(0, totalItems - visibleItems);
            
            if (prevBtn) {
                prevBtn.disabled = currentIndex === 0;
            }
            if (nextBtn) {
                nextBtn.disabled = currentIndex >= maxIndex;
            }
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
            indicators.forEach((indicator, index) => {
                indicator.classList.toggle('active', index === currentIndex);
            });
            
            console.log(`üìä –ü–æ–∑–∏—Ü—ñ—è: ${currentIndex}/${maxIndex}, –≤–∏–¥–∏–º–∏—Ö: ${visibleItems}`);
        }
        
        // –ü–æ–ø–µ—Ä–µ–¥–Ω—è –∫–∞—Ä—Ç–∫–∞
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                console.log('üëà –ü–æ–ø–µ—Ä–µ–¥–Ω—è –∫–∞—Ä—Ç–∫–∞');
                if (currentIndex > 0) {
                    currentIndex--;
                    updateCarousel();
                }
            });
        }
        
        // –ù–∞—Å—Ç—É–ø–Ω–∞ –∫–∞—Ä—Ç–∫–∞
        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                console.log('üëâ –ù–∞—Å—Ç—É–ø–Ω–∞ –∫–∞—Ä—Ç–∫–∞');
                const visibleItems = getVisibleItems();
                const maxIndex = Math.max(0, totalItems - visibleItems);
                if (currentIndex < maxIndex) {
                    currentIndex++;
                    updateCarousel();
                }
            });
        }
        
        // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => {
                console.log(`üéØ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ ${index}`);
                currentIndex = index;
                updateCarousel();
            });
        });
        
        // Touch/Swipe –ø–æ–¥—ñ—ó
        let startX = 0;
        let isDragging = false;
        
        track.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            isDragging = true;
            console.log('üëÜ Touch start');
        });
        
        track.addEventListener('touchend', (e) => {
            if (!isDragging) return;
            
            const endX = e.changedTouches[0].clientX;
            const diff = startX - endX;
            const threshold = 50;
            
            console.log(`üëÜ Touch end: diff=${diff}`);
            
            if (Math.abs(diff) > threshold) {
                if (diff > 0 && nextBtn && !nextBtn.disabled) {
                    nextBtn.click();
                } else if (diff < 0 && prevBtn && !prevBtn.disabled) {
                    prevBtn.click();
                }
            }
            
            isDragging = false;
        });
        
        // Resize –æ–±—Ä–æ–±–∫–∞
        window.addEventListener('resize', () => {
            console.log('üìê Resize –∫–∞—Ä—É—Å–µ–ª—å');
            updateCarousel();
        });
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        updateCarousel();
        console.log(`‚úÖ –ö–∞—Ä—É—Å–µ–ª—å ${index + 1} —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ`);
    });
});