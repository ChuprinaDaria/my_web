from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.utils.decorators import method_decorator
from django.views.generic import TemplateView
from django.core.mail import send_mail
from django.conf import settings
import json
import logging
from datetime import datetime

from .models import Contact, ContactSubmission
from services.asana_service import asana_service
from news.services.telegram import tg_send_message

logger = logging.getLogger(__name__)

class ContactView(TemplateView):
    template_name = 'contacts/contacts.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        contact_info = Contact.objects.filter(is_active=True).first()
        if not contact_info:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—É, —è–∫—â–æ –Ω–µ–º–∞—î
            contact_info = Contact.objects.create()
        
        context.update({
            'contact_info': contact_info,
            'page_title': contact_info.title_uk,  # –ê–±–æ –∑–≥—ñ–¥–Ω–æ –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
            'seo_title': contact_info.seo_title_uk or contact_info.title_uk,
            'seo_description': contact_info.seo_description_uk,
        })
        
        return context

@require_POST
@csrf_exempt  # –¢–∏–º—á–∞—Å–æ–≤–æ, –ø–æ—Ç—ñ–º –¥–æ–¥–∞—Å–∏ CSRF token –≤ —Ñ–æ—Ä–º—É
def submit_contact_form(request):
    """API endpoint –¥–ª—è —Ñ–æ—Ä–º–∏ –∑–≤'—è–∑–∫—É"""
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏
        if request.content_type == 'application/json':
            data = json.loads(request.body)
        else:
            data = request.POST
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        required_fields = ['name', 'email', 'subject', 'message']
        for field in required_fields:
            if not data.get(field):
                return JsonResponse({
                    'success': False,
                    'error': f'–ü–æ–ª–µ "{field}" —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
                }, status=400)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–µ–∫—ñ–Ω–≥—É CTA
        cta_source = data.get('cta_source', '')
        page_url = data.get('page_url', '') or request.META.get('HTTP_REFERER', '')
        session_id = data.get('session_id', '') or request.session.session_key or ''
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ –ë–î
        submission = ContactSubmission.objects.create(
            name=data.get('name'),
            email=data.get('email'),
            phone=data.get('phone', ''),
            company=data.get('company', ''),
            subject=data.get('subject'),
            message=data.get('message'),
            referred_from=data.get('referred_from', 'contact_page'),
            ip_address=get_client_ip(request),
            user_agent=request.META.get('HTTP_USER_AGENT', ''),
            # CTA —Ç—Ä–µ–∫—ñ–Ω–≥ –ø–æ–ª—è
            cta_source=cta_source,
            page_url=page_url,
            session_id=session_id
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ù–ï–ì–ê–ô–ù–û
        response = JsonResponse({
            'success': True,
            'message': '–î—è–∫—É—î–º–æ! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'
        })
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
        import threading
        
        def background_tasks():
            # üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞—Å–∫ –≤ Asana
            try:
                if asana_service:
                    asana_task_id = asana_service.create_lead_task(submission)
                    if asana_task_id:
                        submission.asana_task_id = asana_task_id
                        submission.save(update_fields=['asana_task_id'])
                        logger.info(f"‚úÖ Asana task created: {asana_task_id}")
                    else:
                        logger.warning("‚ö†Ô∏è Failed to create Asana task, but submission saved")
                else:
                    logger.warning("‚ö†Ô∏è Asana service not configured - check ASANA_TOKEN, ASANA_WORKSPACE_ID, ASANA_PROJECT_ID")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è Asana integration error: {e}")
            
            # üì± –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
            try:
                send_lead_notification_to_telegram(submission)
            except Exception as e:
                logger.error(f"Telegram notification failed: {e}")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –∞–¥–º—ñ–Ω—É
            try:
                send_notification_email(submission)
            except Exception as e:
                logger.error(f"Email notification failed: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=background_tasks)
        thread.daemon = True
        thread.start()
        
        return response
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º –Ω–∞ info@lazysoft.pl'
        }, status=500)

def get_client_ip(request):
    """–û—Ç—Ä–∏–º—É—î–º–æ IP –∫–ª—ñ—î–Ω—Ç–∞"""
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip

def send_notification_email(submission):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ notification email"""
    subject = f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É: {submission.subject}"
    
    message = f"""
–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏:

–Ü–º'—è: {submission.name}
Email: {submission.email}
–¢–µ–ª–µ—Ñ–æ–Ω: {submission.phone or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
–ö–æ–º–ø–∞–Ω—ñ—è: {submission.company or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
–¢–µ–º–∞: {submission.subject}

–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
{submission.message}

---
–î–∂–µ—Ä–µ–ª–æ: {submission.referred_from or 'contact_page'}
IP: {submission.ip_address}
–î–∞—Ç–∞: {submission.created_at}
"""
    
    send_mail(
        subject=subject,
        message=message,
        from_email=settings.DEFAULT_FROM_EMAIL,
        recipient_list=['info@lazysoft.pl'],
        fail_silently=False,
    )

def sync_submission_to_asana(submission):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –∑–º—ñ–Ω–∏ ContactSubmission –∑ Asana
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ admin.py –∞–±–æ signals
    """
    if not asana_service or not submission.asana_task_id:
        return False
    
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ Asana
        success = asana_service.update_task_status(
            submission.asana_task_id, 
            submission.status
        )
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä —è–∫—â–æ —î admin_notes
        if submission.admin_notes and success:
            asana_service.add_task_comment(
                submission.asana_task_id,
                f"üí¨ –ê–¥–º—ñ–Ω –Ω–æ—Ç–∞—Ç–∫–∞: {submission.admin_notes}"
            )
        
        return success
        
    except Exception as e:
        print(f"Error syncing to Asana: {e}")
        return False

def send_lead_notification_to_telegram(submission):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –ª—ñ–¥ –≤ Telegram —á–∞—Ç –∑ –∞–¥–º—ñ–Ω–æ–º
    """
    try:
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        asana_link = f"https://app.asana.com/0/0/{submission.asana_task_id}" if submission.asana_task_id else "–ù–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
        
        message = f"""
üéØ <b>–ù–û–í–ò–ô –õ–Ü–î –ó –°–ê–ô–¢–£</b>

üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> {submission.name}
üìß <b>Email:</b> {submission.email}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {submission.phone or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üè¢ <b>–ö–æ–º–ø–∞–Ω—ñ—è:</b> {submission.company or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üìù <b>–¢–µ–º–∞:</b> {submission.subject}
üí¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>
{submission.message[:200]}{'...' if len(submission.message) > 200 else ''}

üéØ <b>CTA —Ç—Ä–µ–∫—ñ–Ω–≥:</b>
‚Ä¢ CTA –¥–∂–µ—Ä–µ–ª–æ: {submission.cta_source or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –°—Ç–æ—Ä—ñ–Ω–∫–∞: {submission.page_url or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Session ID: {submission.session_id or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üìä <b>–î–µ—Ç–∞–ª—ñ:</b>
‚Ä¢ –î–∂–µ—Ä–µ–ª–æ: {submission.referred_from or 'contact_page'}
‚Ä¢ –î–∞—Ç–∞: {submission.created_at.strftime('%d.%m.%Y –æ %H:%M')}
‚Ä¢ IP: {submission.ip_address or '–ù–µ–≤—ñ–¥–æ–º–∞'}

‚è∞ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üîó <b>Asana —Ç–∞—Å–∫:</b> <a href="{asana_link}">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–∞—Å–∫–∞</a>
        """.strip()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç
        from news.services.telegram import _tg_request
        admin_chat_id = getattr(settings, 'TELEGRAM_ADMIN_CHAT_ID', None)
        
        if admin_chat_id:
            data = {
                "chat_id": admin_chat_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": False,
            }
            _tg_request("sendMessage", data)
            logger.info(f"Telegram notification sent to admin chat for lead {submission.id}")
        else:
            logger.warning("No Telegram admin chat configured")
        
    except Exception as e:
        logger.error(f"Failed to send Telegram notification: {e}")