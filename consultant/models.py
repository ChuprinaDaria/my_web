from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
import uuid


class ChatSession(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–µ—Å—ñ—ó —á–∞—Ç—É –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    session_id = models.CharField(max_length=100, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)
    user_ip = models.GenericIPAddressField(null=True, blank=True)
    user_agent = models.TextField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = '–°–µ—Å—ñ—è —á–∞—Ç—É'
        verbose_name_plural = '–°–µ—Å—ñ—ó —á–∞—Ç—É'
    
    def __str__(self):
        return f"Chat Session {self.session_id}"


class Message(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–∞—Ç—ñ"""
    ROLE_CHOICES = [
        ('user', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'),
        ('assistant', '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'),
        ('system', '–°–∏—Å—Ç–µ–º–∞'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    chat_session = models.ForeignKey(ChatSession, on_delete=models.CASCADE, related_name='messages')
    role = models.CharField(max_length=20, choices=ROLE_CHOICES)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_processed = models.BooleanField(default=False)
    processing_time = models.FloatField(null=True, blank=True)  # –ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    tokens_used = models.IntegerField(null=True, blank=True)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
    
    class Meta:
        ordering = ['created_at']
        verbose_name = '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
        verbose_name_plural = '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
    
    def __str__(self):
        return f"{self.role}: {self.content[:50]}..."


class ConsultantProfile(models.Model):
    """–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    name = models.CharField(max_length=100, default="RAG –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
    description = models.TextField(default="–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∏")
    avatar = models.CharField(max_length=10, default="ü´ß")
    is_active = models.BooleanField(default=True)
    max_tokens = models.IntegerField(default=4000)
    temperature = models.FloatField(default=0.7)
    system_prompt = models.TextField(
        default="–¢–∏ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç - —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏. "
                "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–∏—Å–Ω–∏–º–∏, —Ç–æ—á–Ω–∏–º–∏ —Ç–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = '–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞'
        verbose_name_plural = '–ü—Ä–æ—Ñ—ñ–ª—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞'
    
    def __str__(self):
        return self.name


class KnowledgeBase(models.Model):
    """–ë–∞–∑–∞ –∑–Ω–∞–Ω—å –¥–ª—è RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    title = models.CharField(max_length=200)
    content = models.TextField()
    category = models.CharField(max_length=100, null=True, blank=True)
    tags = models.CharField(max_length=500, null=True, blank=True, help_text="–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É")
    is_active = models.BooleanField(default=True)
    priority = models.IntegerField(default=0, help_text="–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (–≤–∏—â–∏–π = –≤–∞–∂–ª–∏–≤—ñ—à–∏–π)")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-priority', '-created_at']
        verbose_name = '–ë–∞–∑–∞ –∑–Ω–∞–Ω—å'
        verbose_name_plural = '–ë–∞–∑–∞ –∑–Ω–∞–Ω—å'
    
    def __str__(self):
        return self.title
    
    def get_tags_list(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–µ–≥—ñ–≤"""
        if self.tags:
            return [tag.strip() for tag in self.tags.split(',')]
        return []


class ChatAnalytics(models.Model):
    """–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —á–∞—Ç—É"""
    chat_session = models.OneToOneField(ChatSession, on_delete=models.CASCADE, related_name='analytics')
    total_messages = models.IntegerField(default=0)
    user_messages = models.IntegerField(default=0)
    assistant_messages = models.IntegerField(default=0)
    total_tokens_used = models.IntegerField(default=0)
    session_duration = models.FloatField(null=True, blank=True)  # –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    satisfaction_rating = models.IntegerField(null=True, blank=True, choices=[
        (1, '–î—É–∂–µ –ø–æ–≥–∞–Ω–æ'),
        (2, '–ü–æ–≥–∞–Ω–æ'),
        (3, '–ù–æ—Ä–º–∞–ª—å–Ω–æ'),
        (4, '–î–æ–±—Ä–µ'),
        (5, '–í—ñ–¥–º—ñ–Ω–Ω–æ'),
    ])
    feedback = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —á–∞—Ç—É'
        verbose_name_plural = '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —á–∞—Ç—ñ–≤'
    
    def __str__(self):
        return f"Analytics for {self.chat_session.session_id}"