import time
import logging
from typing import Dict, List
from django.conf import settings
from .models import ChatSession, ConsultantProfile

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ—ó RAG —Å–µ—Ä–≤—ñ—Å–∏
try:
    from rag.services import RAGConsultantService, VectorSearchService, EmbeddingService
    RAG_AVAILABLE = True
except ImportError:
    RAG_AVAILABLE = False

logger = logging.getLogger(__name__)


class EnhancedRAGConsultant:
    """–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ —á–∞—Ç—É"""
    
    def __init__(self):
        self.rag_available = RAG_AVAILABLE
        
        if self.rag_available:
            self.rag_consultant = RAGConsultantService()
            self.vector_search = VectorSearchService()
        
        # –§–æ–ª–±–µ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ RAG
    
    def generate_response(self, user_message: str, chat_session: ChatSession) -> Dict:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ RAG –∞–±–æ fallback"""
        
        start_time = time.time()
        
        if self.rag_available:
            try:
                # –ú–µ—Ç–∞–¥–∞—Ç–∞ —Å–µ—Å—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º pricing
                meta = getattr(chat_session, 'metadata', {}) or {}
                awaiting = bool(meta.get('awaiting_pricing_details', False))
                completed = bool(meta.get('pricing_completed', False))

                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π RAG (—É—Å—é —Ä–µ–∂–∏—Å—É—Ä—É —Ä–æ–±–∏—Ç—å services.py)
                result = self._generate_rag_response(user_message, chat_session)

                # –Ø–∫—â–æ –Ω–∞–º—ñ—Ä –Ω–µ pricing ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–º–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
                if result.get('intent') != 'pricing':
                    result.setdefault('actions', [])
                    result['actions'].extend([
                        {
                            'type': 'button',
                            'text': 'üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é (60 —Ö–≤)',
                            'action': 'open_calendly',
                            'style': 'secondary',
                            'url': 'https://calendly.com/dchuprina-lazysoft/free-consultation-1h'
                        },
                        {
                            'type': 'button',
                            'text': 'üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é (30 —Ö–≤)',
                            'action': 'open_calendly',
                            'style': 'secondary',
                            'url': 'https://calendly.com/dchuprina-lazysoft/30min'
                        }
                    ])
                
                # –ì–∞—Ä–∞–Ω—Ç—ñ—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –æ–∑–Ω–∞–∫–∞—Ö —Ü—ñ–Ω
                content_text = (result.get('response') or '')
                text_lower = content_text.lower()
                has_textual_price = any(k in text_lower for k in ['–æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω', '–≤–∞—Ä—Ç—ñ—Å—Ç', 'price', 'usd']) or ('$' in content_text)
                final_prices_ready = bool(result.get('prices_ready')) or has_textual_price
                final_actions = list(result.get('actions', []) or [])
                has_quote_btn = any((a.get('type') == 'button' and a.get('action') == 'request_quote') for a in final_actions)
                if final_prices_ready and not has_quote_btn:
                    final_actions.append({
                        'type': 'button',
                        'text': 'üßÆ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ —É PDF',
                        'action': 'request_quote',
                        'style': 'primary'
                    })

                processing_time = time.time() - start_time
                
                return {
                    'content': result['response'],
                    'intent': result.get('intent', 'general'),
                    'sources': result.get('sources', []),
                    'suggestions': result.get('suggestions', []),
                    'actions': final_actions,
                    'prices': result.get('prices', []),
                    'prices_ready': final_prices_ready,
                    'processing_time': processing_time,
                    'method': 'rag',
                    'tokens_used': len(result['response'].split()),
                }
                
            except Exception as e:
                logger.error(f"RAG –ø–æ–º–∏–ª–∫–∞: {e}")
                # –ë–µ–∑ —Ñ–æ–ª–±–µ–∫—É: –≤—ñ–¥–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
                result_text = "–í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ —è –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
                processing_time = time.time() - start_time
                return {
                    'content': result_text,
                    'intent': 'error',
                    'sources': [],
                    'suggestions': [],
                    'actions': [],
                    'processing_time': processing_time,
                    'method': 'error',
                    'tokens_used': len(result_text.split()),
                }
        
        return {
            'content': "–í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ —è –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            'intent': 'error',
            'sources': [],
            'suggestions': [],
            'actions': [],
            'processing_time': time.time() - start_time,
            'method': 'error',
            'tokens_used': 0,
        }
    
    def _generate_rag_response(self, user_message: str, chat_session: ChatSession) -> Dict:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π RAG"""
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ session_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è RAG
        session_id = str(chat_session.session_id)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è)
        language = 'uk'
        try:
            lang_msg = chat_session.messages.filter(role='system', content__startswith='language:').order_by('created_at').last()
            if lang_msg and ':' in lang_msg.content:
                language = lang_msg.content.split(':', 1)[1].strip() or 'uk'
        except Exception:
            pass
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
        result = self.rag_consultant.process_user_query(
            query=user_message,
            session_id=session_id,
            language=language
        )
        
        # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥—ñ—ó –¥–ª—è pricing (—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ RAGConsultantService)
        # –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ —Ç—É—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏
        
        return result
    
    def _generate_pricing_actions(self, sources: List[Dict]) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä—É—î –¥—ñ—ó –¥–ª—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
        actions = [
            {
                'type': 'button',
                'text': 'üßÆ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ —É PDF',
                'action': 'request_quote',
                'style': 'primary'
            },
            {
                'type': 'button',
                'text': 'üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é (60 —Ö–≤)',
                'action': 'open_calendly',
                'style': 'secondary',
                'url': 'https://calendly.com/dchuprina-lazysoft/free-consultation-1h'
            },
            {
                'type': 'button',
                'text': 'üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é (30 —Ö–≤)',
                'action': 'open_calendly',
                'style': 'secondary',
                'url': 'https://calendly.com/dchuprina-lazysoft/30min'
            }
        ]
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ö–æ–∂—ñ –ø—Ä–æ—î–∫—Ç–∏
        if sources:
            for source in sources[:2]:
                if hasattr(source.get('object'), 'slug'):
                    obj = source['object']
                    if hasattr(obj, 'get_absolute_url'):
                        actions.append({
                            'type': 'link',
                            'text': f'üìÑ {source["content_title"][:30]}...',
                            'url': obj.get_absolute_url(),
                            'style': 'info'
                        })
        
        return actions
    
    # –§–æ–ª–±–µ–∫ –≤–∏–º–∫–Ω–µ–Ω–æ; –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ —Ç—É—Ç –Ω–µ–º–∞—î
    
    def detect_intent(self, user_message: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
        message_lower = user_message.lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–º—ñ—Ä—ñ–≤
        if any(word in message_lower for word in ['—Ü—ñ–Ω–∞', '—Å–∫—ñ–ª—å–∫–∏', '–∫–æ—à—Ç—É—î', '–±—é–¥–∂–µ—Ç', 'price']):
            return 'pricing'
        elif any(word in message_lower for word in ['–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è', '–∑—É—Å—Ç—Ä—ñ—á', '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏']):
            return 'consultation'  
        elif any(word in message_lower for word in ['–ø—Ä–æ—î–∫—Ç', '–ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ', '–∫–µ–π—Å', '–ø—Ä–∏–∫–ª–∞–¥']):
            return 'portfolio'
        elif any(word in message_lower for word in ['—Å–µ—Ä–≤—ñ—Å', '–ø–æ—Å–ª—É–≥–∞', '—â–æ —Ä–æ–±–∏—Ç–µ']):
            return 'services'
        
        return 'general'


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ views
enhanced_consultant = EnhancedRAGConsultant()
