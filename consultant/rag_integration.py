import time
import logging
from typing import Dict, List
from django.conf import settings
from .models import ChatSession, ConsultantProfile, KnowledgeBase

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ—ó RAG —Å–µ—Ä–≤—ñ—Å–∏
try:
    from rag.services import RAGConsultantService, VectorSearchService, EmbeddingService
    RAG_AVAILABLE = True
except ImportError:
    RAG_AVAILABLE = False

logger = logging.getLogger(__name__)


class EnhancedRAGConsultant:
    """–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ —á–∞—Ç—É"""
    
    def __init__(self):
        self.rag_available = RAG_AVAILABLE
        
        if self.rag_available:
            self.rag_consultant = RAGConsultantService()
            self.vector_search = VectorSearchService()
        
        # Fallback –¥–æ —ñ—Å–Ω—É—é—á–æ—ó KnowledgeBase
        self.fallback_enabled = True
    
    def generate_response(self, user_message: str, chat_session: ChatSession) -> Dict:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ RAG –∞–±–æ fallback"""
        
        start_time = time.time()
        
        if self.rag_available:
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π RAG
                result = self._generate_rag_response(user_message, chat_session)
                
                processing_time = time.time() - start_time
                
                return {
                    'content': result['response'],
                    'intent': result.get('intent', 'general'),
                    'sources': result.get('sources', []),
                    'suggestions': result.get('suggestions', []),
                    'actions': result.get('actions', []),
                    'processing_time': processing_time,
                    'method': 'rag',
                    'tokens_used': len(result['response'].split()),
                }
                
            except Exception as e:
                logger.error(f"RAG –ø–æ–º–∏–ª–∫–∞: {e}")
                # Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
        
        # –ü—Ä–æ—Å—Ç–∏–π fallback –∞–ª–≥–æ—Ä–∏—Ç–º 
        if self.fallback_enabled:
            result = self._generate_fallback_response(user_message, chat_session)
            processing_time = time.time() - start_time
            
            return {
                'content': result,
                'intent': 'general',
                'sources': [],
                'suggestions': [],
                'actions': [],
                'processing_time': processing_time,
                'method': 'fallback',
                'tokens_used': len(result.split()),
            }
        
        return {
            'content': "–í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ —è –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            'intent': 'error',
            'sources': [],
            'suggestions': [],
            'actions': [],
            'processing_time': time.time() - start_time,
            'method': 'error',
            'tokens_used': 0,
        }
    
    def _generate_rag_response(self, user_message: str, chat_session: ChatSession) -> Dict:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π RAG"""
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ session_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è RAG
        session_id = str(chat_session.session_id)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è)
        language = 'uk'  # TODO: –≤–∏–∑–Ω–∞—á–∞—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
        result = self.rag_consultant.process_user_query(
            query=user_message,
            session_id=session_id,
            language=language
        )
        
        # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥—ñ—ó –¥–ª—è pricing
        if result['intent'] == 'pricing':
            result['actions'] = self._generate_pricing_actions(result.get('sources', []))
        
        return result
    
    def _generate_pricing_actions(self, sources: List[Dict]) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä—É—î –¥—ñ—ó –¥–ª—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
        actions = [
            {
                'type': 'button',
                'text': 'üßÆ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫',
                'action': 'request_quote',
                'style': 'primary'
            },
            {
                'type': 'button',
                'text': 'üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è',
                'action': 'schedule_consultation', 
                'style': 'secondary'
            }
        ]
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ö–æ–∂—ñ –ø—Ä–æ—î–∫—Ç–∏
        if sources:
            for source in sources[:2]:
                if hasattr(source.get('object'), 'slug'):
                    obj = source['object']
                    if hasattr(obj, 'get_absolute_url'):
                        actions.append({
                            'type': 'link',
                            'text': f'üìÑ {source["content_title"][:30]}...',
                            'url': obj.get_absolute_url(),
                            'style': 'info'
                        })
        
        return actions
    
    def _generate_fallback_response(self, user_message: str, chat_session: ChatSession) -> str:
        """Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É (—ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥)"""
        
        import random
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É KnowledgeBase
        knowledge_items = KnowledgeBase.objects.filter(is_active=True).order_by('-priority')
        
        # –ü–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –∑–Ω–∞–Ω—å (–ø—Ä–æ—Å—Ç–∏–π)
        relevant_knowledge = []
        user_words = user_message.lower().split()
        
        for item in knowledge_items:
            item_words = (item.title + ' ' + item.content).lower().split()
            if any(word in item_words for word in user_words):
                relevant_knowledge.append(item)
        
        # –ë–∞–∑–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        responses = [
            f"–î—è–∫—É—é –∑–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è! –¶–µ —Ü—ñ–∫–∞–≤–∞ —Ç–µ–º–∞.",
            "–Ø —Ä–æ–∑—É–º—ñ—é –≤–∞—à –∑–∞–ø–∏—Ç. –î–æ–∑–≤–æ–ª—å—Ç–µ –º–µ–Ω—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ —Ü–∏–º.",
            "–¶–µ –≤–∞–∂–ª–∏–≤–µ –ø–∏—Ç–∞–Ω–Ω—è. –û—Å—å —â–æ —è –º–æ–∂—É –≤–∞–º –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏:",
            "–í—ñ–¥–º—ñ–Ω–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —Ü–µ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ.",
        ]
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = random.choice(responses)
        
        if relevant_knowledge:
            response += f"\n\n–ó–≥—ñ–¥–Ω–æ –∑ –º–æ—î—é –±–∞–∑–æ—é –∑–Ω–∞–Ω—å:\n"
            for item in relevant_knowledge[:2]:
                response += f"‚Ä¢ {item.title}: {item.content[:200]}...\n"
        
        # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏
        general_advice = [
            "–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–∞–ø–∏—Ç–∞—Ç–∏!",
            "–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–º –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º.", 
            "–ß–∏ —î —â–æ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
            "–ì–æ—Ç–æ–≤–∏–π –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞—à—É —Ä–æ–∑–º–æ–≤—É!",
        ]
        
        response += f"\n\n{random.choice(general_advice)}"
        
        return response
    
    def detect_intent(self, user_message: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
        message_lower = user_message.lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–º—ñ—Ä—ñ–≤
        if any(word in message_lower for word in ['—Ü—ñ–Ω–∞', '—Å–∫—ñ–ª—å–∫–∏', '–∫–æ—à—Ç—É—î', '–±—é–¥–∂–µ—Ç', 'price']):
            return 'pricing'
        elif any(word in message_lower for word in ['–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è', '–∑—É—Å—Ç—Ä—ñ—á', '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏']):
            return 'consultation'  
        elif any(word in message_lower for word in ['–ø—Ä–æ—î–∫—Ç', '–ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ', '–∫–µ–π—Å', '–ø—Ä–∏–∫–ª–∞–¥']):
            return 'portfolio'
        elif any(word in message_lower for word in ['—Å–µ—Ä–≤—ñ—Å', '–ø–æ—Å–ª—É–≥–∞', '—â–æ —Ä–æ–±–∏—Ç–µ']):
            return 'services'
        
        return 'general'


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ views
enhanced_consultant = EnhancedRAGConsultant()
