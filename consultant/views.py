# consultant/views.py - –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ RAG
from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils import timezone
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from django.template.loader import render_to_string
from django.conf import settings
from django.core.mail import EmailMessage
import json
import uuid
import time

from .models import ChatSession, Message, ConsultantProfile, KnowledgeBase, ChatAnalytics
from services.asana_service import asana_service
from news.services.telegram import _tg_request
from .rag_integration import enhanced_consultant

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ pricing –º–æ–¥–µ–ª—ñ —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ
try:
    from pricing.models import QuoteRequest
    PRICING_AVAILABLE = True
except ImportError:
    PRICING_AVAILABLE = False

import logging
logger = logging.getLogger(__name__)


def _get_company_brand_context():
    try:
        from contacts.models import CompanyInfo
        brand = CompanyInfo.objects.filter(is_active=True).first()
        if brand:
            return brand
    except Exception as e:
        logger.warning(f"CompanyInfo not available: {e}")
    class Fallback:
        company_name = "LAZYSOFT"
        website = "lazysoft.dev"
        logo = None
        address_line1 = "Edwarda Dembowskiego 98/1"
        city = "Wroc≈Çaw"
        postal_code = "51-669"
        country = "Poland"
        email = "info@lazysoft.pl"
        phone = "+48 727 842 737"
        tax_id = ""
        authorized_person = "Daria Chuprina"
    return Fallback()
# –¢—Ä–µ–∫ –∫–ª—ñ–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é: —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞—Å–∫ –≤ Asana —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤ Telegram
@csrf_exempt
@require_http_methods(["POST"])
def track_consultation_click(request):
    try:
        data = json.loads(request.body)
        session_id = data.get('session_id')
        name = data.get('name', '')
        email = data.get('email', '')
        url = data.get('url', '')

        notes = (
            f"–ö–ª—ñ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑ —á–∞—Ç—É\n\n"
            f"Session: {session_id}\n"
            f"–Ü–º'—è: {name}\nEmail: {email}\nURL: {url}"
        )
        try:
            if asana_service:
                asana_service.create_generic_task("–ö–ª—ñ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é (—á–∞—Ç)", notes, due_days=2)
        except Exception as e:
            logger.error(f"Asana error (consultation click): {e}")

        try:
            admin_chat_id = getattr(settings, 'TELEGRAM_ADMIN_CHAT_ID', None)
            if admin_chat_id:
                data = {
                    "chat_id": admin_chat_id,
                    "text": f"üìÖ –ö–ª—ñ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑ —á–∞—Ç—É\n{notes}",
                    "parse_mode": "HTML",
                    "disable_web_page_preview": False,
                }
                _tg_request("sendMessage", data)
        except Exception as e:
            logger.error(f"Telegram error (consultation click): {e}")

        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)



def _ensure_items(items):
    safe_items = []
    if isinstance(items, list):
        for it in items:
            if not isinstance(it, dict):
                continue
            safe_items.append({
                'title': it.get('title', '–ü–æ—Å–ª—É–≥–∞'),
                'pkg': it.get('pkg', ''),
                'price': it.get('price', '-'),
                'currency': it.get('currency', ''),
                'assumptions': it.get('assumptions', '')
            })
    if not safe_items:
        safe_items = [{
            'title': '–ü–æ—Å–ª—É–≥–∞',
            'pkg': '',
            'price': '-',
            'currency': '',
            'assumptions': ''
        }]
    return safe_items


def _render_proposal_pdf(context):
    try:
        html = render_to_string('quotes/proposal.html', context)
    except Exception:
        # Fallback –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π HTML, —è–∫—â–æ —à–∞–±–ª–æ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        html = f"""
        <html><body>
          <h1>–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è</h1>
          <p>–ö–ª—ñ—î–Ω—Ç: {context.get('name')}</p>
          <p>Email: {context.get('email')}</p>
          <ul>
            {''.join([f"<li>{it.get('title')} ‚Äî {it.get('pkg')} ‚Äî {it.get('price')} {it.get('currency')}</li>" for it in context.get('items', [])])}
          </ul>
          <p>{context.get('notes','')}</p>
        </body></html>
        """
    pdf_bytes = None
    try:
        import importlib
        weasyprint_module = importlib.import_module('weasyprint')
        html_renderer = getattr(weasyprint_module, 'HTML', None)
        if html_renderer:
            pdf_bytes = html_renderer(string=html, base_url=getattr(settings, 'SITE_URL', None)).write_pdf()
        else:
            raise ImportError('weasyprint.HTML not found')
    except Exception as e:
        logger.warning(f"WeasyPrint not available or failed, sending HTML instead: {e}")
    return html, pdf_bytes


def _send_proposal_email(to_email, subject, html_body, pdf_bytes=None):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç—É; –ø–æ–≤–µ—Ä—Ç–∞—î True/False, –ª–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏, –¥—É–±–ª—é—î –∞–¥–º—ñ–Ω—É."""
    try:
        admin_email = getattr(settings, 'SALES_EMAIL', None) or getattr(settings, 'DEFAULT_FROM_EMAIL', None)
        from_email = getattr(settings, 'DEFAULT_FROM_EMAIL', 'no-reply@localhost')

        email = EmailMessage(
            subject=subject,
            body=html_body,
            from_email=from_email,
            to=[to_email],
            bcc=[admin_email] if admin_email else None,
        )
        try:
            email.charset = 'utf-8'
        except Exception:
            pass
        # reply-to —è–∫ –±—Ä–µ–Ω–¥–æ–≤–∞ –∞–¥—Ä–µ—Å–∞, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞
        try:
            brand = _get_company_brand_context()
            reply_to = [getattr(brand, 'email', None)] if getattr(brand, 'email', None) else []
            if reply_to:
                email.reply_to = reply_to
        except Exception:
            pass

        email.content_subtype = 'html'
        if pdf_bytes:
            email.attach('proposal.pdf', pdf_bytes, 'application/pdf')
        else:
            email.attach('proposal.html', html_body.encode('utf-8'), 'text/html')
        email.send(fail_silently=False)
        return True
    except Exception as e:
        logger.error(f"Email send failed: {e}")
        return False


def consultant_chat(request):
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —á–∞—Ç—É –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"""
    consultant = ConsultantProfile.objects.filter(is_active=True).first()
    if not consultant:
        consultant = ConsultantProfile.objects.create()
    
    context = {
        'consultant': consultant,
        'page_title': 'RAG –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
        'page_description': '–°–ø—ñ–ª–∫—É–π—Ç–µ—Å—å –∑ –Ω–∞—à–∏–º —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º',
    }
    return render(request, 'consultant/chat.html', context)


@csrf_exempt
@require_http_methods(["POST"])
def start_chat_session(request):
    """–ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é —á–∞—Ç—É"""
    try:
        data = json.loads(request.body)
        session_id = data.get('session_id', str(uuid.uuid4()))
        language = data.get('language')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—é
        chat_session, created = ChatSession.objects.get_or_create(
            session_id=session_id,
            defaults={
                'user': request.user if request.user.is_authenticated else None,
                'user_ip': request.META.get('REMOTE_ADDR'),
                'user_agent': request.META.get('HTTP_USER_AGENT', ''),
            }
        )
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ —è–∫ —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Å–µ—Å—ñ—ó
        if language:
            Message.objects.filter(
                chat_session=chat_session,
                role='system',
                content__startswith='language:'
            ).delete()
            Message.objects.create(chat_session=chat_session, role='system', content=f"language:{language}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó
        if created:
            ChatAnalytics.objects.create(chat_session=chat_session)
        
        return JsonResponse({
            'success': True,
            'session_id': str(chat_session.id),
            'created': created
        })
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ start_chat_session: {e}")
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=400)


@csrf_exempt
@require_http_methods(["POST"])
def send_message(request):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É - –û–ù–û–í–õ–ï–ù–û –ó RAG"""
    try:
        data = json.loads(request.body)
        session_id = data.get('session_id')
        language = data.get('language')
        message_content = data.get('message', '').strip()
        
        if not session_id or not message_content:
            return JsonResponse({
                'success': False,
                'error': 'Session ID —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
            }, status=400)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—é —á–∞—Ç—É
        chat_session = get_object_or_404(ChatSession, id=session_id)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_message = Message.objects.create(
            chat_session=chat_session,
            role='user',
            content=message_content
        )
        
        # üöÄ –ù–û–í–ê RAG –õ–û–ì–Ü–ö–ê - –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
        if language:
            Message.objects.filter(
                chat_session=chat_session,
                role='system',
                content__startswith='language:'
            ).delete()
            Message.objects.create(chat_session=chat_session, role='system', content=f"language:{language}")
        rag_result = enhanced_consultant.generate_response(message_content, chat_session)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –∑ RAG –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
        assistant_message = Message.objects.create(
            chat_session=chat_session,
            role='assistant',
            content=rag_result['content'],
            is_processed=True,
            processing_time=rag_result['processing_time'],
            tokens_used=rag_result['tokens_used']
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
        analytics, _ = ChatAnalytics.objects.get_or_create(chat_session=chat_session)
        analytics.user_messages += 1
        analytics.assistant_messages += 1
        analytics.total_messages += 2
        analytics.total_tokens_used += rag_result['tokens_used']
        analytics.save()
        
        # üí∞ –õ–æ–≥—ñ–∫–∞ –¥–ª—è pricing –∑–∞–ø–∏—Ç—ñ–≤ - –í–ò–î–ê–õ–ï–ù–û –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –í–Ü–î–ö–†–ò–¢–¢–Ø
        additional_data = {}
        
        return JsonResponse({
            'success': True,
            'message': {
                'id': str(assistant_message.id),
                'role': assistant_message.role,
                'content': assistant_message.content,
                'created_at': assistant_message.created_at.isoformat(),
                'processing_time': rag_result['processing_time']
            },
            # üöÄ –î–æ–¥–∞—Ç–∫–æ–≤—ñ RAG –¥–∞–Ω—ñ
            'rag_data': {
                'intent': rag_result['intent'],
                'sources': rag_result['sources'][:3],  # –¢–æ–ø 3 –¥–∂–µ—Ä–µ–ª–∞
                'suggestions': rag_result['suggestions'],
                'actions': rag_result['actions'],
                'method': rag_result['method'],
                'prices_ready': rag_result.get('prices_ready', False),
                'prices': rag_result.get('prices', [])
            },
            **additional_data
        })
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ send_message: {e}")
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


def _extract_services_from_sources(sources):
    """–í–∏—Ç—è–≥—É—î —Å–µ—Ä–≤—ñ—Å–∏ –∑ RAG –¥–∂–µ—Ä–µ–ª"""
    services = []
    for source in sources:
        if source.get('content_category') == 'service':
            obj = source.get('object')
            if obj:
                services.append({
                    'slug': getattr(obj, 'slug', None),
                    'title': source.get('content_title', str(obj)),
                    'similarity': source.get('similarity', 0)
                })
    return services


# üí∞ –ù–û–í–Ü API –¥–ª—è pricing —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
@csrf_exempt
@require_http_methods(["POST"])
def request_quote_from_chat(request):
    """–ó–∞–ø–∏—Ç –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫—É –∑ —á–∞—Ç—É"""
    if not PRICING_AVAILABLE:
        return JsonResponse({'error': 'Pricing —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}, status=400)
    
    try:
        data = json.loads(request.body)
        language = (data.get('language') or '').lower()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        required_fields = ['client_name', 'client_email', 'message']
        for field in required_fields:
            if not data.get(field):
                return JsonResponse({'error': f'–ü–æ–ª–µ {field} –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ'}, status=400)
        
        session_id = data.get('session_id')
        chat_session = None
        
        # –®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        if session_id:
            try:
                chat_session = ChatSession.objects.get(id=session_id)
            except ChatSession.DoesNotExist:
                pass
        # –Ø–∫—â–æ –º–æ–≤–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ ‚Äî –±–µ—Ä–µ–º–æ –∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        if (not language) and chat_session:
            try:
                sys_msg = chat_session.messages.filter(role='system', content__startswith='language:').order_by('-created_at').first()
                if sys_msg and ':' in sys_msg.content:
                    language = sys_msg.content.split(':', 1)[1].strip().lower()
            except Exception:
                pass
        if language not in ('uk', 'pl', 'en'):
            language = 'uk'
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–∞—Ç—É
        detected_service = None
        if chat_session:
            recent_messages = chat_session.messages.filter(role='user').order_by('-created_at')[:3]
            recent_text = ' '.join([msg.content for msg in recent_messages])
            detected_service = _detect_service_from_text(recent_text)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫
        quote_request = QuoteRequest.objects.create(
            client_name=data['client_name'],
            client_email=data['client_email'],
            client_phone=data.get('client_phone', ''),
            client_company=data.get('client_company', ''),
            original_query=data['message'],
            service_category=detected_service,
            session_id=str(session_id) if session_id else None,
            ip_address=_get_client_ip(request),
            user_agent=request.META.get('HTTP_USER_AGENT', ''),
            status='new'
        )
        
        # –ü–æ–±—É–¥–æ–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è PDF
        brand = _get_company_brand_context()

        # –§–æ—Ä–º—É—î–º–æ items –∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
        items = []
        try:
            from pricing.models import ServicePricing
            pricing_qs = ServicePricing.objects.filter(is_active=True)
            if detected_service:
                pricing_qs = pricing_qs.filter(service_category=detected_service)
            pricing_qs = pricing_qs.select_related('service_category', 'tier').order_by('tier__order', 'order')
            for sp in list(pricing_qs[:3]):
                # –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–∑–≤
                lang = (language or 'uk').lower()
                service_title = getattr(sp.service_category, f'title_{lang}', getattr(sp.service_category, 'title_en', str(sp.service_category)))
                tier_name = getattr(sp.tier, f'display_name_{lang}', getattr(sp.tier, 'display_name_en', str(sp.tier)))
                if getattr(sp, 'price_to', None) and sp.price_to and sp.price_to != sp.price_from:
                    price_str = f"{int(sp.price_from)}-{int(sp.price_to)}"
                else:
                    price_str = f"{int(sp.price_from)}"
                features = []
                try:
                    features = sp.get_features_list(lang=lang)[:5]
                except Exception:
                    pass
                assumptions = "; ".join(features) if features else ''
                items.append({
                    'title': service_title,
                    'pkg': tier_name,
                    'price': price_str,
                    'currency': 'USD',
                    'assumptions': assumptions
                })
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–±—É–¥—É–≤–∞—Ç–∏ items –∑ ServicePricing: {e}")

        if not items:
            items = _ensure_items(data.get('items', []))

        # –ê–±—Å–æ–ª—é—Ç–Ω–∏–π URL –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ —É –ª–∏—Å—Ç—ñ
        brand_logo_url = None
        try:
            site_url = getattr(settings, 'SITE_URL', '')
            if site_url and getattr(brand, 'logo', None):
                logo_url = getattr(getattr(brand, 'logo', None), 'url', None)
                if logo_url:
                    brand_logo_url = site_url.rstrip('/') + logo_url
        except Exception:
            pass
        # URL –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä (RAG_SETTINGS –∞–±–æ CONSULTATION_CALENDAR_URL)
        calendly_url = getattr(settings, 'RAG_SETTINGS', {}).get('CONSULTATION_CALENDAR_URL') or getattr(settings, 'CONSULTATION_CALENDAR_URL', '')

        ctx = {
            'brand': brand,
            'brand_logo_url': brand_logo_url,
            'issued_at': timezone.now(),
            'name': data['client_name'],
            'email': data['client_email'],
            'company': data.get('client_company', ''),
            'notes': data.get('message', ''),
            'items': items,
            'language': (language or 'uk').lower(),
            'calendly_url': calendly_url
        }
        html, pdf_bytes = _render_proposal_pdf(ctx)
        
        # –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Ç–µ–º–∞ –ª–∏—Å—Ç–∞
        subj_map = {
            'uk': '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è',
            'pl': 'Oferta handlowa',
            'en': 'Commercial Proposal',
        }
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ email –∫–ª—ñ—î–Ω—Ç–∞
        sent_ok = _send_proposal_email(
            to_email=data['client_email'],
            subject=subj_map.get(language, 'Commercial Proposal'),
            html_body=html,
            pdf_bytes=pdf_bytes
        )
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Ç—É
        try:
            quote_request.email_sent = bool(sent_ok)
            quote_request.pdf_generated = bool(pdf_bytes)
            quote_request.status = 'quoted'
            quote_request.save(update_fields=['email_sent', 'pdf_generated', 'status'])
        except Exception:
            pass

        # –§–æ–Ω–æ–≤–æ: —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞—Å–∫ –≤ Asana —ñ —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –≤ Telegram
        try:
            import threading
            def background():
                try:
                    if asana_service:
                        task_id = asana_service.create_quote_task(quote_request)
                        if task_id:
                            try:
                                quote_request.asana_task_id = task_id
                                quote_request.save(update_fields=['asana_task_id'])
                            except Exception:
                                pass
                except Exception as e:
                    logger.error(f"Asana error for quote: {e}")
                try:
                    asana_task_id_local = None
                    try:
                        asana_task_id_local = task_id if 'task_id' in locals() and task_id else getattr(quote_request, 'asana_task_id', None)
                    except Exception:
                        asana_task_id_local = getattr(quote_request, 'asana_task_id', None)
                    asana_link = f"https://app.asana.com/0/0/{asana_task_id_local}" if asana_task_id_local else "–ù–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
                    msg = (
                        f"üì® –ù–û–í–ò–ô –ó–ê–ü–ò–¢ –ù–ê –ü–†–û–†–ê–•–£–ù–û–ö\n\n"
                        f"üë§ {quote_request.client_name} | {quote_request.client_email}\n"
                        f"üè¢ {quote_request.client_company or '‚Äî'} | üìû {quote_request.client_phone or '‚Äî'}\n\n"
                        f"üìù {quote_request.original_query[:500]}{'...' if len(quote_request.original_query) > 500 else ''}\n\n"
                        f"üîó Asana —Ç–∞—Å–∫: <a href=\"{asana_link}\">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–∞—Å–∫–∞</a>"
                    )
                    admin_chat_id = getattr(settings, 'TELEGRAM_ADMIN_CHAT_ID', None)
                    if admin_chat_id:
                        data = {
                            "chat_id": admin_chat_id,
                            "text": msg,
                            "parse_mode": "HTML",
                            "disable_web_page_preview": False,
                        }
                        _tg_request("sendMessage", data)
                except Exception as e:
                    logger.error(f"Telegram error for quote: {e}")
            t = threading.Thread(target=background)
            t.daemon = True
            t.start()
        except Exception:
            pass
        
        # TODO: –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ Celery –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ PDF —Ç–∞ email
        # generate_quote_pdf.delay(quote_request.id)
        
        return JsonResponse({
            'success': True,
            'message': '–ó–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –ù–∞–¥—ñ—Å–ª–∞–ª–∏ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –≤–∞—à email.' if sent_ok else '–ó–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –°—Ç–∞–ª–∞—Å—è –ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é email ‚Äî –º–∏ –Ω–∞–¥—ñ—à–ª–µ–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—Ä—É—á–Ω—É –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.',
            'quote_id': quote_request.id,
            'email_sent': bool(sent_ok)
        })
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ request_quote_from_chat: {e}")
        return JsonResponse({'error': '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É'}, status=500)


def _detect_service_from_text(text):
    """–°–ø—Ä–æ—â–µ–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É –∑ —Ç–µ–∫—Å—Ç—É"""
    try:
        from services.models import ServiceCategory
        
        text_lower = text.lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
        service_keywords = {
            'web-development': ['—Å–∞–π—Ç', '–≤–µ–±—Å–∞–π—Ç', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'landing', '–≤–µ–±'],
            'mobile-app': ['–¥–æ–¥–∞—Ç–æ–∫', '–º–æ–±—ñ–ª—å–Ω–∏–π', 'app', 'ios', 'android'],
            'ai-automation': ['–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è', 'ai', '—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç', '–±–æ—Ç'],
            'design': ['–¥–∏–∑–∞–π–Ω', '–≥—Ä–∞—Ñ—ñ–∫–∞', '–ª–æ–≥–æ—Ç–∏–ø', '–±—Ä–µ–Ω–¥–∏–Ω–≥'],
        }
        
        for service_slug, keywords in service_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                try:
                    return ServiceCategory.objects.get(slug=service_slug)
                except ServiceCategory.DoesNotExist:
                    continue
                    
    except ImportError:
        pass
    
    return None


def _get_client_ip(request):
    """–û—Ç—Ä–∏–º—É—î IP –∫–ª—ñ—î–Ω—Ç–∞"""
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip


# –Ü—Å–Ω—É—é—á—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
def get_chat_history(request, session_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É"""
    try:
        chat_session = get_object_or_404(ChatSession, id=session_id)
        messages = chat_session.messages.all().order_by('created_at')
        
        messages_data = []
        for message in messages:
            messages_data.append({
                'id': str(message.id),
                'role': message.role,
                'content': message.content,
                'created_at': message.created_at.isoformat(),
                'processing_time': message.processing_time
            })
        
        return JsonResponse({
            'success': True,
            'messages': messages_data
        })
    
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@csrf_exempt
@require_http_methods(["POST"])
def rate_chat(request):
    """–û—Ü—ñ–Ω–∏—Ç–∏ —è–∫—ñ—Å—Ç—å —á–∞—Ç—É"""
    try:
        data = json.loads(request.body)
        session_id = data.get('session_id')
        rating = data.get('rating')
        feedback = data.get('feedback', '')
        
        if not session_id or not rating:
            return JsonResponse({
                'success': False,
                'error': 'Session ID —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
            }, status=400)
        
        chat_session = get_object_or_404(ChatSession, id=session_id)
        analytics, _ = ChatAnalytics.objects.get_or_create(chat_session=chat_session)
        
        analytics.satisfaction_rating = rating
        analytics.feedback = feedback
        analytics.save()
        
        return JsonResponse({
            'success': True,
            'message': '–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É!'
        })
    
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


def consultant_stats(request):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if not request.user.is_staff:
        return JsonResponse({'error': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'}, status=403)
    
    total_sessions = ChatSession.objects.count()
    active_sessions = ChatSession.objects.filter(is_active=True).count()
    total_messages = Message.objects.count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
    from datetime import timedelta
    thirty_days_ago = timezone.now() - timedelta(days=30)
    recent_sessions = ChatSession.objects.filter(created_at__gte=thirty_days_ago).count()
    recent_messages = Message.objects.filter(created_at__gte=thirty_days_ago).count()
    
    return JsonResponse({
        'total_sessions': total_sessions,
        'active_sessions': active_sessions,
        'total_messages': total_messages,
        'recent_sessions_30d': recent_sessions,
        'recent_messages_30d': recent_messages,
    })